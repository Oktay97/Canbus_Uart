
BluePill_CanBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a20  08007a20  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a20  08007a20  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a20  08007a20  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000125c  2000017c  08007ba4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013d8  08007ba4  000213d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001239d  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c96  00000000  00000000  00032542  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  000351d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  00035da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c33  00000000  00000000  00036810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d077  00000000  00000000  00050443  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008712f  00000000  00000000  0005d4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e45e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e04  00000000  00000000  000e4664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800799c 	.word	0x0800799c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800799c 	.word	0x0800799c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb1a 	bl	8000788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f85a 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8e8 	bl	800032c <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f8b0 	bl	80002c0 <MX_CAN_Init>
  MX_USB_DEVICE_Init();
 8000160:	f006 ff7a 	bl	8007058 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  canfil.FilterBank = 0;
 8000164:	4b25      	ldr	r3, [pc, #148]	; (80001fc <main+0xb0>)
 8000166:	2200      	movs	r2, #0
 8000168:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800016a:	4b24      	ldr	r3, [pc, #144]	; (80001fc <main+0xb0>)
 800016c:	2200      	movs	r2, #0
 800016e:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000170:	4b22      	ldr	r3, [pc, #136]	; (80001fc <main+0xb0>)
 8000172:	2200      	movs	r2, #0
 8000174:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 8000176:	4b21      	ldr	r3, [pc, #132]	; (80001fc <main+0xb0>)
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 800017c:	4b1f      	ldr	r3, [pc, #124]	; (80001fc <main+0xb0>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 8000182:	4b1e      	ldr	r3, [pc, #120]	; (80001fc <main+0xb0>)
 8000184:	2200      	movs	r2, #0
 8000186:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 8000188:	4b1c      	ldr	r3, [pc, #112]	; (80001fc <main+0xb0>)
 800018a:	2200      	movs	r2, #0
 800018c:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800018e:	4b1b      	ldr	r3, [pc, #108]	; (80001fc <main+0xb0>)
 8000190:	2201      	movs	r2, #1
 8000192:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8000194:	4b19      	ldr	r3, [pc, #100]	; (80001fc <main+0xb0>)
 8000196:	2201      	movs	r2, #1
 8000198:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 800019a:	4b18      	ldr	r3, [pc, #96]	; (80001fc <main+0xb0>)
 800019c:	220e      	movs	r2, #14
 800019e:	625a      	str	r2, [r3, #36]	; 0x24

  txHeader.DLC = 8;
 80001a0:	4b17      	ldr	r3, [pc, #92]	; (8000200 <main+0xb4>)
 80001a2:	2208      	movs	r2, #8
 80001a4:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 80001a6:	4b16      	ldr	r3, [pc, #88]	; (8000200 <main+0xb4>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 80001ac:	4b14      	ldr	r3, [pc, #80]	; (8000200 <main+0xb4>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x030;
 80001b2:	4b13      	ldr	r3, [pc, #76]	; (8000200 <main+0xb4>)
 80001b4:	2230      	movs	r2, #48	; 0x30
 80001b6:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = 0x02;
 80001b8:	4b11      	ldr	r3, [pc, #68]	; (8000200 <main+0xb4>)
 80001ba:	2202      	movs	r2, #2
 80001bc:	605a      	str	r2, [r3, #4]
  txHeader.TransmitGlobalTime = DISABLE;
 80001be:	4b10      	ldr	r3, [pc, #64]	; (8000200 <main+0xb4>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	751a      	strb	r2, [r3, #20]

  HAL_CAN_ConfigFilter(&hcan,&canfil);
 80001c4:	490d      	ldr	r1, [pc, #52]	; (80001fc <main+0xb0>)
 80001c6:	480f      	ldr	r0, [pc, #60]	; (8000204 <main+0xb8>)
 80001c8:	f000 fc5d 	bl	8000a86 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 80001cc:	480d      	ldr	r0, [pc, #52]	; (8000204 <main+0xb8>)
 80001ce:	f000 fd23 	bl	8000c18 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80001d2:	2102      	movs	r1, #2
 80001d4:	480b      	ldr	r0, [pc, #44]	; (8000204 <main+0xb8>)
 80001d6:	f000 fe3d 	bl	8000e54 <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  intial_input_state();
 80001da:	f000 f98b 	bl	80004f4 <intial_input_state>
	  HAL_Delay(10);
 80001de:	200a      	movs	r0, #10
 80001e0:	f000 fb34 	bl	800084c <HAL_Delay>
	  can_hattina_veri_bas();
 80001e4:	f000 f940 	bl	8000468 <can_hattina_veri_bas>
	  HAL_GPIO_TogglePin(Led13_GPIO_Port, Led13_Pin);
 80001e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ec:	4806      	ldr	r0, [pc, #24]	; (8000208 <main+0xbc>)
 80001ee:	f001 fb14 	bl	800181a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80001f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f6:	f000 fb29 	bl	800084c <HAL_Delay>
	  intial_input_state();
 80001fa:	e7ee      	b.n	80001da <main+0x8e>
 80001fc:	20000428 	.word	0x20000428
 8000200:	200003c4 	.word	0x200003c4
 8000204:	200003f8 	.word	0x200003f8
 8000208:	40011000 	.word	0x40011000

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b094      	sub	sp, #80	; 0x50
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f007 fbb6 	bl	800798c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023c:	2301      	movs	r3, #1
 800023e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000258:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800025c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fe76 	bl	8002f54 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026e:	f000 f98b 	bl	8000588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2302      	movs	r3, #2
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000282:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	2102      	movs	r1, #2
 800028e:	4618      	mov	r0, r3
 8000290:	f003 f8e0 	bl	8003454 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800029a:	f000 f975 	bl	8000588 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800029e:	2310      	movs	r3, #16
 80002a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f003 fa3d 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002b4:	f000 f968 	bl	8000588 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3750      	adds	r7, #80	; 0x50
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <MX_CAN_Init+0x64>)
 80002c6:	4a18      	ldr	r2, [pc, #96]	; (8000328 <MX_CAN_Init+0x68>)
 80002c8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_CAN_Init+0x64>)
 80002cc:	2209      	movs	r2, #9
 80002ce:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <MX_CAN_Init+0x64>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <MX_CAN_Init+0x64>)
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_CAN_Init+0x64>)
 80002de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80002e2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_CAN_Init+0x64>)
 80002e6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80002ea:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <MX_CAN_Init+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_CAN_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MX_CAN_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_CAN_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <MX_CAN_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_CAN_Init+0x64>)
 800030c:	2200      	movs	r2, #0
 800030e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <MX_CAN_Init+0x64>)
 8000312:	f000 fabd 	bl	8000890 <HAL_CAN_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800031c:	f000 f934 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	200003f8 	.word	0x200003f8
 8000328:	40006400 	.word	0x40006400

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000340:	4b44      	ldr	r3, [pc, #272]	; (8000454 <MX_GPIO_Init+0x128>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a43      	ldr	r2, [pc, #268]	; (8000454 <MX_GPIO_Init+0x128>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b41      	ldr	r3, [pc, #260]	; (8000454 <MX_GPIO_Init+0x128>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000358:	4b3e      	ldr	r3, [pc, #248]	; (8000454 <MX_GPIO_Init+0x128>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a3d      	ldr	r2, [pc, #244]	; (8000454 <MX_GPIO_Init+0x128>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b3b      	ldr	r3, [pc, #236]	; (8000454 <MX_GPIO_Init+0x128>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000370:	4b38      	ldr	r3, [pc, #224]	; (8000454 <MX_GPIO_Init+0x128>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a37      	ldr	r2, [pc, #220]	; (8000454 <MX_GPIO_Init+0x128>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b35      	ldr	r3, [pc, #212]	; (8000454 <MX_GPIO_Init+0x128>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0304 	and.w	r3, r3, #4
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b32      	ldr	r3, [pc, #200]	; (8000454 <MX_GPIO_Init+0x128>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a31      	ldr	r2, [pc, #196]	; (8000454 <MX_GPIO_Init+0x128>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <MX_GPIO_Init+0x128>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led13_GPIO_Port, Led13_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a6:	482c      	ldr	r0, [pc, #176]	; (8000458 <MX_GPIO_Init+0x12c>)
 80003a8:	f001 fa1f 	bl	80017ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	21f0      	movs	r1, #240	; 0xf0
 80003b0:	482a      	ldr	r0, [pc, #168]	; (800045c <MX_GPIO_Init+0x130>)
 80003b2:	f001 fa1a 	bl	80017ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2103      	movs	r1, #3
 80003ba:	4829      	ldr	r0, [pc, #164]	; (8000460 <MX_GPIO_Init+0x134>)
 80003bc:	f001 fa15 	bl	80017ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led13_Pin */
  GPIO_InitStruct.Pin = Led13_Pin;
 80003c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led13_GPIO_Port, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	481f      	ldr	r0, [pc, #124]	; (8000458 <MX_GPIO_Init+0x12c>)
 80003da:	f001 f895 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80003de:	23f0      	movs	r3, #240	; 0xf0
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2302      	movs	r3, #2
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	4819      	ldr	r0, [pc, #100]	; (800045c <MX_GPIO_Init+0x130>)
 80003f6:	f001 f887 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003fa:	2303      	movs	r3, #3
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4813      	ldr	r0, [pc, #76]	; (8000460 <MX_GPIO_Init+0x134>)
 8000412:	f001 f879 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000416:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800041a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_GPIO_Init+0x138>)
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	4619      	mov	r1, r3
 800042a:	480d      	ldr	r0, [pc, #52]	; (8000460 <MX_GPIO_Init+0x134>)
 800042c:	f001 f86c 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000430:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_GPIO_Init+0x138>)
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_GPIO_Init+0x130>)
 8000446:	f001 f85f 	bl	8001508 <HAL_GPIO_Init>

}
 800044a:	bf00      	nop
 800044c:	3720      	adds	r7, #32
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40011000 	.word	0x40011000
 800045c:	40010800 	.word	0x40010800
 8000460:	40010c00 	.word	0x40010c00
 8000464:	10110000 	.word	0x10110000

08000468 <can_hattina_veri_bas>:

/* USER CODE BEGIN 4 */


void can_hattina_veri_bas(void){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	 Tavan Aydınlatma = 0x10
	 Dörtlüler = 0x20

	*/
	//Can hattına veri gönderilir...
	uint8_t m=0;
 800046e:	2300      	movs	r3, #0
 8000470:	71fb      	strb	r3, [r7, #7]
	for (m = 0; m < 7; m++) {
 8000472:	2300      	movs	r3, #0
 8000474:	71fb      	strb	r3, [r7, #7]
 8000476:	e026      	b.n	80004c6 <can_hattina_veri_bas+0x5e>
		if (!stateofinput[m]) {
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4a19      	ldr	r2, [pc, #100]	; (80004e0 <can_hattina_veri_bas+0x78>)
 800047c:	5cd3      	ldrb	r3, [r2, r3]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d10d      	bne.n	800049e <can_hattina_veri_bas+0x36>
			csend[0] = csend[0] | (0x01 << m);
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <can_hattina_veri_bas+0x7c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b25a      	sxtb	r2, r3
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2101      	movs	r1, #1
 800048c:	fa01 f303 	lsl.w	r3, r1, r3
 8000490:	b25b      	sxtb	r3, r3
 8000492:	4313      	orrs	r3, r2
 8000494:	b25b      	sxtb	r3, r3
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <can_hattina_veri_bas+0x7c>)
 800049a:	701a      	strb	r2, [r3, #0]
 800049c:	e010      	b.n	80004c0 <can_hattina_veri_bas+0x58>
		} else {
			csend[0] = ~((~csend[0]) | (0x01 << m));
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <can_hattina_veri_bas+0x7c>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	43db      	mvns	r3, r3
 80004a6:	b25a      	sxtb	r2, r3
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	2101      	movs	r1, #1
 80004ac:	fa01 f303 	lsl.w	r3, r1, r3
 80004b0:	b25b      	sxtb	r3, r3
 80004b2:	4313      	orrs	r3, r2
 80004b4:	b25b      	sxtb	r3, r3
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <can_hattina_veri_bas+0x7c>)
 80004be:	701a      	strb	r2, [r3, #0]
	for (m = 0; m < 7; m++) {
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	3301      	adds	r3, #1
 80004c4:	71fb      	strb	r3, [r7, #7]
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b06      	cmp	r3, #6
 80004ca:	d9d5      	bls.n	8000478 <can_hattina_veri_bas+0x10>
		}
	}
	HAL_CAN_AddTxMessage(&hcan, &txHeader, stateofinput, &canMailbox);
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <can_hattina_veri_bas+0x80>)
 80004ce:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <can_hattina_veri_bas+0x78>)
 80004d0:	4906      	ldr	r1, [pc, #24]	; (80004ec <can_hattina_veri_bas+0x84>)
 80004d2:	4807      	ldr	r0, [pc, #28]	; (80004f0 <can_hattina_veri_bas+0x88>)
 80004d4:	f000 fbe4 	bl	8000ca0 <HAL_CAN_AddTxMessage>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000420 	.word	0x20000420
 80004e4:	20000198 	.word	0x20000198
 80004e8:	20000450 	.word	0x20000450
 80004ec:	200003c4 	.word	0x200003c4
 80004f0:	200003f8 	.word	0x200003f8

080004f4 <intial_input_state>:


//Butonların ilk çalışma esnasındaki değerleri okunur..
void intial_input_state(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

	//Dörtlüler
	stateofinput[6]=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80004f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fc:	481f      	ldr	r0, [pc, #124]	; (800057c <intial_input_state+0x88>)
 80004fe:	f001 f95d 	bl	80017bc <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <intial_input_state+0x8c>)
 8000508:	719a      	strb	r2, [r3, #6]
	//Angel Far
	stateofinput[4]=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	481b      	ldr	r0, [pc, #108]	; (800057c <intial_input_state+0x88>)
 8000510:	f001 f954 	bl	80017bc <HAL_GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	461a      	mov	r2, r3
 8000518:	4b19      	ldr	r3, [pc, #100]	; (8000580 <intial_input_state+0x8c>)
 800051a:	711a      	strb	r2, [r3, #4]
	//Tavan Aydınlatma
	stateofinput[5]=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800051c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000520:	4816      	ldr	r0, [pc, #88]	; (800057c <intial_input_state+0x88>)
 8000522:	f001 f94b 	bl	80017bc <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <intial_input_state+0x8c>)
 800052c:	715a      	strb	r2, [r3, #5]
	//Flasher Mod
	stateofinput[3]=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800052e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000532:	4812      	ldr	r0, [pc, #72]	; (800057c <intial_input_state+0x88>)
 8000534:	f001 f942 	bl	80017bc <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	4b10      	ldr	r3, [pc, #64]	; (8000580 <intial_input_state+0x8c>)
 800053e:	70da      	strb	r2, [r3, #3]
	//Far
	stateofinput[2]=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <intial_input_state+0x90>)
 8000546:	f001 f939 	bl	80017bc <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	461a      	mov	r2, r3
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <intial_input_state+0x8c>)
 8000550:	709a      	strb	r2, [r3, #2]
	//Sağ  Sinyal
	stateofinput[0]=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <intial_input_state+0x90>)
 8000558:	f001 f930 	bl	80017bc <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <intial_input_state+0x8c>)
 8000562:	701a      	strb	r2, [r3, #0]
	//Sol Sinyal
	stateofinput[1]=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000568:	4806      	ldr	r0, [pc, #24]	; (8000584 <intial_input_state+0x90>)
 800056a:	f001 f927 	bl	80017bc <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	461a      	mov	r2, r3
 8000572:	4b03      	ldr	r3, [pc, #12]	; (8000580 <intial_input_state+0x8c>)
 8000574:	705a      	strb	r2, [r3, #1]
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40010c00 	.word	0x40010c00
 8000580:	20000420 	.word	0x20000420
 8000584:	40010800 	.word	0x40010800

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058e:	e7fe      	b.n	800058e <Error_Handler+0x6>

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_MspInit+0x5c>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a14      	ldr	r2, [pc, #80]	; (80005ec <HAL_MspInit+0x5c>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_MspInit+0x5c>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_MspInit+0x5c>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_MspInit+0x5c>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b8:	61d3      	str	r3, [r2, #28]
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_MspInit+0x5c>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_MspInit+0x60>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_MspInit+0x60>)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010000 	.word	0x40010000

080005f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a29      	ldr	r2, [pc, #164]	; (80006b4 <HAL_CAN_MspInit+0xc0>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d14b      	bne.n	80006ac <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <HAL_CAN_MspInit+0xc4>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <HAL_CAN_MspInit+0xc4>)
 800061a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061e:	61d3      	str	r3, [r2, #28]
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <HAL_CAN_MspInit+0xc4>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <HAL_CAN_MspInit+0xc4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <HAL_CAN_MspInit+0xc4>)
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <HAL_CAN_MspInit+0xc4>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0308 	and.w	r3, r3, #8
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4818      	ldr	r0, [pc, #96]	; (80006bc <HAL_CAN_MspInit+0xc8>)
 800065a:	f000 ff55 	bl	8001508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800065e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000668:	2303      	movs	r3, #3
 800066a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	4812      	ldr	r0, [pc, #72]	; (80006bc <HAL_CAN_MspInit+0xc8>)
 8000674:	f000 ff48 	bl	8001508 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_CAN_MspInit+0xcc>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
 800067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000680:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <HAL_CAN_MspInit+0xcc>)
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2014      	movs	r0, #20
 80006a2:	f000 fefa 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006a6:	2014      	movs	r0, #20
 80006a8:	f000 ff13 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006ac:	bf00      	nop
 80006ae:	3728      	adds	r7, #40	; 0x28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40006400 	.word	0x40006400
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	40010000 	.word	0x40010000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <NMI_Handler+0x4>

080006ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <HardFault_Handler+0x4>

080006d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <MemManage_Handler+0x4>

080006d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <BusFault_Handler+0x4>

080006dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <UsageFault_Handler+0x4>

080006e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr

080006ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070a:	f000 f883 	bl	8000814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 800071a:	f000 fbc0 	bl	8000e9e <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8000720:	f001 f9c5 	bl	8001aae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200003f8 	.word	0x200003f8
 800072c:	200010ec 	.word	0x200010ec

08000730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800073c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800073e:	e003      	b.n	8000748 <LoopCopyDataInit>

08000740 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000742:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000744:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000746:	3104      	adds	r1, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000748:	480a      	ldr	r0, [pc, #40]	; (8000774 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800074c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800074e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000750:	d3f6      	bcc.n	8000740 <CopyDataInit>
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000754:	e002      	b.n	800075c <LoopFillZerobss>

08000756 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000758:	f842 3b04 	str.w	r3, [r2], #4

0800075c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800075e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000760:	d3f9      	bcc.n	8000756 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000762:	f7ff ffe5 	bl	8000730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000766:	f007 f8ed 	bl	8007944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fcef 	bl	800014c <main>
  bx lr
 800076e:	4770      	bx	lr
  ldr r3, =_sidata
 8000770:	08007a28 	.word	0x08007a28
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000778:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 800077c:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8000780:	200013d8 	.word	0x200013d8

08000784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_2_IRQHandler>
	...

08000788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_Init+0x28>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_Init+0x28>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 fe73 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 f808 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a4:	f7ff fef4 	bl	8000590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x54>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x58>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fe8b 	bl	80014ee <HAL_SYSTICK_Config>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e00e      	b.n	8000800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d80a      	bhi.n	80007fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f000 fe53 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <HAL_InitTick+0x5c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000000 	.word	0x20000000
 800080c:	20000008 	.word	0x20000008
 8000810:	20000004 	.word	0x20000004

08000814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x1c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_IncTick+0x20>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a03      	ldr	r2, [pc, #12]	; (8000834 <HAL_IncTick+0x20>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000008 	.word	0x20000008
 8000834:	20000454 	.word	0x20000454

08000838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <HAL_GetTick+0x10>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000454 	.word	0x20000454

0800084c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff fff0 	bl	8000838 <HAL_GetTick>
 8000858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d005      	beq.n	8000872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_Delay+0x40>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000872:	bf00      	nop
 8000874:	f7ff ffe0 	bl	8000838 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	429a      	cmp	r2, r3
 8000882:	d8f7      	bhi.n	8000874 <HAL_Delay+0x28>
  {
  }
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000008 	.word	0x20000008

08000890 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e0ed      	b.n	8000a7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d102      	bne.n	80008b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fea0 	bl	80005f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f022 0202 	bic.w	r2, r2, #2
 80008c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008c4:	f7ff ffb8 	bl	8000838 <HAL_GetTick>
 80008c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008ca:	e012      	b.n	80008f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008cc:	f7ff ffb4 	bl	8000838 <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	2b0a      	cmp	r3, #10
 80008d8:	d90b      	bls.n	80008f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2205      	movs	r2, #5
 80008ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e0c5      	b.n	8000a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1e5      	bne.n	80008cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f042 0201 	orr.w	r2, r2, #1
 800090e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000910:	f7ff ff92 	bl	8000838 <HAL_GetTick>
 8000914:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000916:	e012      	b.n	800093e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000918:	f7ff ff8e 	bl	8000838 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	2b0a      	cmp	r3, #10
 8000924:	d90b      	bls.n	800093e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2205      	movs	r2, #5
 8000936:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e09f      	b.n	8000a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0e5      	beq.n	8000918 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7e1b      	ldrb	r3, [r3, #24]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d108      	bne.n	8000966 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	e007      	b.n	8000976 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000974:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7e5b      	ldrb	r3, [r3, #25]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d108      	bne.n	8000990 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	e007      	b.n	80009a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800099e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7e9b      	ldrb	r3, [r3, #26]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d108      	bne.n	80009ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0220 	orr.w	r2, r2, #32
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	e007      	b.n	80009ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f022 0220 	bic.w	r2, r2, #32
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7edb      	ldrb	r3, [r3, #27]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d108      	bne.n	80009e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f022 0210 	bic.w	r2, r2, #16
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e007      	b.n	80009f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f042 0210 	orr.w	r2, r2, #16
 80009f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7f1b      	ldrb	r3, [r3, #28]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d108      	bne.n	8000a0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f042 0208 	orr.w	r2, r2, #8
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	e007      	b.n	8000a1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 0208 	bic.w	r2, r2, #8
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7f5b      	ldrb	r3, [r3, #29]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d108      	bne.n	8000a38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f042 0204 	orr.w	r2, r2, #4
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e007      	b.n	8000a48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 0204 	bic.w	r2, r2, #4
 8000a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	431a      	orrs	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	ea42 0103 	orr.w	r1, r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	1e5a      	subs	r2, r3, #1
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2201      	movs	r2, #1
 8000a78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b087      	sub	sp, #28
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a9c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a9e:	7cfb      	ldrb	r3, [r7, #19]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d003      	beq.n	8000aac <HAL_CAN_ConfigFilter+0x26>
 8000aa4:	7cfb      	ldrb	r3, [r7, #19]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	f040 80aa 	bne.w	8000c00 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ab2:	f043 0201 	orr.w	r2, r3, #1
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f003 031f 	and.w	r3, r3, #31
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d123      	bne.n	8000b2e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	401a      	ands	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3248      	adds	r2, #72	; 0x48
 8000b0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b24:	6979      	ldr	r1, [r7, #20]
 8000b26:	3348      	adds	r3, #72	; 0x48
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d122      	bne.n	8000b7c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3248      	adds	r2, #72	; 0x48
 8000b5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b72:	6979      	ldr	r1, [r7, #20]
 8000b74:	3348      	adds	r3, #72	; 0x48
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	440b      	add	r3, r1
 8000b7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d109      	bne.n	8000b98 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b96:	e007      	b.n	8000ba8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d109      	bne.n	8000bc4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000bc2:	e007      	b.n	8000bd4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d107      	bne.n	8000bec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	431a      	orrs	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bf2:	f023 0201 	bic.w	r2, r3, #1
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e006      	b.n	8000c0e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
  }
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d12e      	bne.n	8000c8a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2202      	movs	r2, #2
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0201 	bic.w	r2, r2, #1
 8000c42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c44:	f7ff fdf8 	bl	8000838 <HAL_GetTick>
 8000c48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c4a:	e012      	b.n	8000c72 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c4c:	f7ff fdf4 	bl	8000838 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b0a      	cmp	r3, #10
 8000c58:	d90b      	bls.n	8000c72 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2205      	movs	r2, #5
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e012      	b.n	8000c98 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1e5      	bne.n	8000c4c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e006      	b.n	8000c98 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
  }
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cbe:	7ffb      	ldrb	r3, [r7, #31]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d003      	beq.n	8000ccc <HAL_CAN_AddTxMessage+0x2c>
 8000cc4:	7ffb      	ldrb	r3, [r7, #31]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	f040 80b8 	bne.w	8000e3c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d10a      	bne.n	8000cec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d105      	bne.n	8000cec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 80a0 	beq.w	8000e2c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	0e1b      	lsrs	r3, r3, #24
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d907      	bls.n	8000d0c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e09e      	b.n	8000e4a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	409a      	lsls	r2, r3
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10d      	bne.n	8000d3a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d28:	68f9      	ldr	r1, [r7, #12]
 8000d2a:	6809      	ldr	r1, [r1, #0]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3318      	adds	r3, #24
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	440b      	add	r3, r1
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	e00f      	b.n	8000d5a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d44:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d4a:	68f9      	ldr	r1, [r7, #12]
 8000d4c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d4e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3318      	adds	r3, #24
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	440b      	add	r3, r1
 8000d58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6819      	ldr	r1, [r3, #0]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	691a      	ldr	r2, [r3, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3318      	adds	r3, #24
 8000d66:	011b      	lsls	r3, r3, #4
 8000d68:	440b      	add	r3, r1
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	7d1b      	ldrb	r3, [r3, #20]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d111      	bne.n	8000d9a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	4413      	add	r3, r2
 8000d82:	3304      	adds	r3, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	6811      	ldr	r1, [r2, #0]
 8000d8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3318      	adds	r3, #24
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	440b      	add	r3, r1
 8000d96:	3304      	adds	r3, #4
 8000d98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3307      	adds	r3, #7
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	061a      	lsls	r2, r3, #24
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3306      	adds	r3, #6
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	041b      	lsls	r3, r3, #16
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3305      	adds	r3, #5
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	4313      	orrs	r3, r2
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	3204      	adds	r2, #4
 8000dba:	7812      	ldrb	r2, [r2, #0]
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	6811      	ldr	r1, [r2, #0]
 8000dc2:	ea43 0200 	orr.w	r2, r3, r0
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	440b      	add	r3, r1
 8000dcc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000dd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3303      	adds	r3, #3
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	061a      	lsls	r2, r3, #24
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3302      	adds	r3, #2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	041b      	lsls	r3, r3, #16
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3301      	adds	r3, #1
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	4313      	orrs	r3, r2
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	4610      	mov	r0, r2
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	6811      	ldr	r1, [r2, #0]
 8000df8:	ea43 0200 	orr.w	r2, r3, r0
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	440b      	add	r3, r1
 8000e02:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000e06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	3318      	adds	r3, #24
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	4413      	add	r3, r2
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	6811      	ldr	r1, [r2, #0]
 8000e1a:	f043 0201 	orr.w	r2, r3, #1
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3318      	adds	r3, #24
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	440b      	add	r3, r1
 8000e26:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	e00e      	b.n	8000e4a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e006      	b.n	8000e4a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
  }
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e64:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d002      	beq.n	8000e72 <HAL_CAN_ActivateNotification+0x1e>
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d109      	bne.n	8000e86 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6959      	ldr	r1, [r3, #20]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e006      	b.n	8000e94 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
  }
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b08a      	sub	sp, #40	; 0x28
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d07c      	beq.n	8000fde <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d023      	beq.n	8000f36 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f97d 	bl	8001200 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f06:	e016      	b.n	8000f36 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	e00c      	b.n	8000f36 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2e:	e002      	b.n	8000f36 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f980 	bl	8001236 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d024      	beq.n	8000f8a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f95c 	bl	8001212 <HAL_CAN_TxMailbox1CompleteCallback>
 8000f5a:	e016      	b.n	8000f8a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d004      	beq.n	8000f70 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6e:	e00c      	b.n	8000f8a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d004      	beq.n	8000f84 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
 8000f82:	e002      	b.n	8000f8a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f95f 	bl	8001248 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d024      	beq.n	8000fde <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f93b 	bl	8001224 <HAL_CAN_TxMailbox2CompleteCallback>
 8000fae:	e016      	b.n	8000fde <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc2:	e00c      	b.n	8000fde <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d004      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd6:	e002      	b.n	8000fde <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f93e 	bl	800125a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000fde:	6a3b      	ldr	r3, [r7, #32]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00c      	beq.n	8001002 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2210      	movs	r2, #16
 8001000:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2208      	movs	r2, #8
 800101c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f92d 	bl	800127e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d009      	beq.n	8001042 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f915 	bl	800126c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00c      	beq.n	8001066 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2210      	movs	r2, #16
 8001064:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00b      	beq.n	8001088 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2208      	movs	r2, #8
 8001080:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f90d 	bl	80012a2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d009      	beq.n	80010a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f8f5 	bl	8001290 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00b      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2210      	movs	r2, #16
 80010c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f8f6 	bl	80012b4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80010c8:	6a3b      	ldr	r3, [r7, #32]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2208      	movs	r2, #8
 80010e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f8ee 	bl	80012c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d075      	beq.n	80011e0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d06c      	beq.n	80011d8 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001158:	2b00      	cmp	r3, #0
 800115a:	d03d      	beq.n	80011d8 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001162:	2b00      	cmp	r3, #0
 8001164:	d038      	beq.n	80011d8 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800116c:	2b30      	cmp	r3, #48	; 0x30
 800116e:	d017      	beq.n	80011a0 <HAL_CAN_IRQHandler+0x302>
 8001170:	2b30      	cmp	r3, #48	; 0x30
 8001172:	d804      	bhi.n	800117e <HAL_CAN_IRQHandler+0x2e0>
 8001174:	2b10      	cmp	r3, #16
 8001176:	d009      	beq.n	800118c <HAL_CAN_IRQHandler+0x2ee>
 8001178:	2b20      	cmp	r3, #32
 800117a:	d00c      	beq.n	8001196 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800117c:	e024      	b.n	80011c8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800117e:	2b50      	cmp	r3, #80	; 0x50
 8001180:	d018      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x316>
 8001182:	2b60      	cmp	r3, #96	; 0x60
 8001184:	d01b      	beq.n	80011be <HAL_CAN_IRQHandler+0x320>
 8001186:	2b40      	cmp	r3, #64	; 0x40
 8001188:	d00f      	beq.n	80011aa <HAL_CAN_IRQHandler+0x30c>
            break;
 800118a:	e01d      	b.n	80011c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001194:	e018      	b.n	80011c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800119e:	e013      	b.n	80011c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011a8:	e00e      	b.n	80011c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011b2:	e009      	b.n	80011c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011bc:	e004      	b.n	80011c8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2204      	movs	r2, #4
 80011de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d008      	beq.n	80011f8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f870 	bl	80012d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
	...

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4906      	ldr	r1, [pc, #24]	; (8001384 <__NVIC_EnableIRQ+0x34>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff90 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff2d 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff42 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff90 	bl	80013dc <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5f 	bl	8001388 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff35 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b08b      	sub	sp, #44	; 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	e127      	b.n	800176c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800151c:	2201      	movs	r2, #1
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8116 	bne.w	8001766 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b12      	cmp	r3, #18
 8001540:	d034      	beq.n	80015ac <HAL_GPIO_Init+0xa4>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d80d      	bhi.n	8001562 <HAL_GPIO_Init+0x5a>
 8001546:	2b02      	cmp	r3, #2
 8001548:	d02b      	beq.n	80015a2 <HAL_GPIO_Init+0x9a>
 800154a:	2b02      	cmp	r3, #2
 800154c:	d804      	bhi.n	8001558 <HAL_GPIO_Init+0x50>
 800154e:	2b00      	cmp	r3, #0
 8001550:	d031      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
 8001552:	2b01      	cmp	r3, #1
 8001554:	d01c      	beq.n	8001590 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001556:	e048      	b.n	80015ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001558:	2b03      	cmp	r3, #3
 800155a:	d043      	beq.n	80015e4 <HAL_GPIO_Init+0xdc>
 800155c:	2b11      	cmp	r3, #17
 800155e:	d01b      	beq.n	8001598 <HAL_GPIO_Init+0x90>
          break;
 8001560:	e043      	b.n	80015ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001562:	4a89      	ldr	r2, [pc, #548]	; (8001788 <HAL_GPIO_Init+0x280>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d026      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
 8001568:	4a87      	ldr	r2, [pc, #540]	; (8001788 <HAL_GPIO_Init+0x280>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d806      	bhi.n	800157c <HAL_GPIO_Init+0x74>
 800156e:	4a87      	ldr	r2, [pc, #540]	; (800178c <HAL_GPIO_Init+0x284>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d020      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
 8001574:	4a86      	ldr	r2, [pc, #536]	; (8001790 <HAL_GPIO_Init+0x288>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01d      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
          break;
 800157a:	e036      	b.n	80015ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800157c:	4a85      	ldr	r2, [pc, #532]	; (8001794 <HAL_GPIO_Init+0x28c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
 8001582:	4a85      	ldr	r2, [pc, #532]	; (8001798 <HAL_GPIO_Init+0x290>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d016      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
 8001588:	4a84      	ldr	r2, [pc, #528]	; (800179c <HAL_GPIO_Init+0x294>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
          break;
 800158e:	e02c      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e028      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	3304      	adds	r3, #4
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e023      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	3308      	adds	r3, #8
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e01e      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	330c      	adds	r3, #12
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e019      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015be:	2304      	movs	r3, #4
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e012      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	611a      	str	r2, [r3, #16]
          break;
 80015d6:	e008      	b.n	80015ea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	615a      	str	r2, [r3, #20]
          break;
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2bff      	cmp	r3, #255	; 0xff
 80015ee:	d801      	bhi.n	80015f4 <HAL_GPIO_Init+0xec>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	e001      	b.n	80015f8 <HAL_GPIO_Init+0xf0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3304      	adds	r3, #4
 80015f8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2bff      	cmp	r3, #255	; 0xff
 80015fe:	d802      	bhi.n	8001606 <HAL_GPIO_Init+0xfe>
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x104>
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	3b08      	subs	r3, #8
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	210f      	movs	r1, #15
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	401a      	ands	r2, r3
 800161e:	6a39      	ldr	r1, [r7, #32]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	431a      	orrs	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 8096 	beq.w	8001766 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800163a:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <HAL_GPIO_Init+0x298>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <HAL_GPIO_Init+0x298>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6193      	str	r3, [r2, #24]
 8001646:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <HAL_GPIO_Init+0x298>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001652:	4a54      	ldr	r2, [pc, #336]	; (80017a4 <HAL_GPIO_Init+0x29c>)
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4013      	ands	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4b      	ldr	r2, [pc, #300]	; (80017a8 <HAL_GPIO_Init+0x2a0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x19e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4a      	ldr	r2, [pc, #296]	; (80017ac <HAL_GPIO_Init+0x2a4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x19a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a49      	ldr	r2, [pc, #292]	; (80017b0 <HAL_GPIO_Init+0x2a8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x196>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x192>
 8001696:	2303      	movs	r3, #3
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x1a0>
 800169a:	2304      	movs	r3, #4
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_Init+0x1a0>
 800169e:	2302      	movs	r3, #2
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_Init+0x1a0>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x1a0>
 80016a6:	2300      	movs	r3, #0
 80016a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016aa:	f002 0203 	and.w	r2, r2, #3
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	4093      	lsls	r3, r2
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016b8:	493a      	ldr	r1, [pc, #232]	; (80017a4 <HAL_GPIO_Init+0x29c>)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d2:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4938      	ldr	r1, [pc, #224]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
 80016de:	e006      	b.n	80016ee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e0:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4933      	ldr	r1, [pc, #204]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016fa:	4b2f      	ldr	r3, [pc, #188]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	492e      	ldr	r1, [pc, #184]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
 8001706:	e006      	b.n	8001716 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	43db      	mvns	r3, r3
 8001710:	4929      	ldr	r1, [pc, #164]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001712:	4013      	ands	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d006      	beq.n	8001730 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	4924      	ldr	r1, [pc, #144]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
 800172e:	e006      	b.n	800173e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	43db      	mvns	r3, r3
 8001738:	491f      	ldr	r1, [pc, #124]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 800173a:	4013      	ands	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	491a      	ldr	r1, [pc, #104]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	60cb      	str	r3, [r1, #12]
 8001756:	e006      	b.n	8001766 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	43db      	mvns	r3, r3
 8001760:	4915      	ldr	r1, [pc, #84]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001762:	4013      	ands	r3, r2
 8001764:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	3301      	adds	r3, #1
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	f47f aed0 	bne.w	800151c <HAL_GPIO_Init+0x14>
  }
}
 800177c:	bf00      	nop
 800177e:	372c      	adds	r7, #44	; 0x2c
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	10210000 	.word	0x10210000
 800178c:	10110000 	.word	0x10110000
 8001790:	10120000 	.word	0x10120000
 8001794:	10310000 	.word	0x10310000
 8001798:	10320000 	.word	0x10320000
 800179c:	10220000 	.word	0x10220000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40011400 	.word	0x40011400
 80017b8:	40010400 	.word	0x40010400

080017bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	e001      	b.n	80017de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	807b      	strh	r3, [r7, #2]
 80017f6:	4613      	mov	r3, r2
 80017f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fa:	787b      	ldrb	r3, [r7, #1]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001800:	887a      	ldrh	r2, [r7, #2]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001806:	e003      	b.n	8001810 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	041a      	lsls	r2, r3, #16
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	611a      	str	r2, [r3, #16]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800181a:	b480      	push	{r7}
 800181c:	b085      	sub	sp, #20
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800182c:	887a      	ldrh	r2, [r7, #2]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	041a      	lsls	r2, r3, #16
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43d9      	mvns	r1, r3
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	400b      	ands	r3, r1
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	611a      	str	r2, [r3, #16]
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800184c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af06      	add	r7, sp, #24
 8001852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0fd      	b.n	8001a5a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f005 fdbc 	bl	80073f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2203      	movs	r2, #3
 800187c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f002 f82b 	bl	80038e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	687e      	ldr	r6, [r7, #4]
 8001892:	466d      	mov	r5, sp
 8001894:	f106 0410 	add.w	r4, r6, #16
 8001898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	602b      	str	r3, [r5, #0]
 80018a0:	1d33      	adds	r3, r6, #4
 80018a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a4:	6838      	ldr	r0, [r7, #0]
 80018a6:	f001 fff5 	bl	8003894 <USB_CoreInit>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0ce      	b.n	8001a5a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 f826 	bl	8003914 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e04c      	b.n	8001968 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	3301      	adds	r3, #1
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	b298      	uxth	r0, r3
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	3336      	adds	r3, #54	; 0x36
 800190c:	4602      	mov	r2, r0
 800190e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	440b      	add	r3, r1
 8001920:	3303      	adds	r3, #3
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	3338      	adds	r3, #56	; 0x38
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	333c      	adds	r3, #60	; 0x3c
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	3340      	adds	r3, #64	; 0x40
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	3301      	adds	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	d3ad      	bcc.n	80018ce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
 8001976:	e044      	b.n	8001a02 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	f203 1369 	addw	r3, r3, #361	; 0x169
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	440b      	add	r3, r1
 80019de:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	3301      	adds	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d3b5      	bcc.n	8001978 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	687e      	ldr	r6, [r7, #4]
 8001a14:	466d      	mov	r5, sp
 8001a16:	f106 0410 	add.w	r4, r6, #16
 8001a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	602b      	str	r3, [r5, #0]
 8001a22:	1d33      	adds	r3, r6, #4
 8001a24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a26:	6838      	ldr	r0, [r7, #0]
 8001a28:	f001 ff80 	bl	800392c <USB_DevInit>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00d      	b.n	8001a5a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 ff1a 	bl	800588c <USB_DevDisconnect>

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_PCD_Start+0x16>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e016      	b.n	8001aa6 <HAL_PCD_Start+0x44>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 ff15 	bl	80038b4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f005 ff22 	bl	80078d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 feee 	bl	8005878 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b088      	sub	sp, #32
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fef0 	bl	80058a0 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aca:	d102      	bne.n	8001ad2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fb61 	bl	8002194 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fee2 	bl	80058a0 <USB_ReadInterrupts>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae6:	d112      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001afa:	b292      	uxth	r2, r2
 8001afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f005 fcf0 	bl	80074e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b06:	2100      	movs	r1, #0
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f925 	bl	8001d58 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fec4 	bl	80058a0 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b22:	d10b      	bne.n	8001b3c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b36:	b292      	uxth	r2, r2
 8001b38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fead 	bl	80058a0 <USB_ReadInterrupts>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b50:	d10b      	bne.n	8001b6a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b64:	b292      	uxth	r2, r2
 8001b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fe96 	bl	80058a0 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7e:	d126      	bne.n	8001bce <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0204 	bic.w	r2, r2, #4
 8001b92:	b292      	uxth	r2, r2
 8001b94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0208 	bic.w	r2, r2, #8
 8001baa:	b292      	uxth	r2, r2
 8001bac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f005 fcd1 	bl	8007558 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bc8:	b292      	uxth	r2, r2
 8001bca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fe64 	bl	80058a0 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001be2:	f040 8084 	bne.w	8001cee <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	77fb      	strb	r3, [r7, #31]
 8001bea:	e011      	b.n	8001c10 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	7ffb      	ldrb	r3, [r7, #31]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	441a      	add	r2, r3
 8001bf8:	7ffb      	ldrb	r3, [r7, #31]
 8001bfa:	8812      	ldrh	r2, [r2, #0]
 8001bfc:	b292      	uxth	r2, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	f107 0120 	add.w	r1, r7, #32
 8001c04:	440b      	add	r3, r1
 8001c06:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c0a:	7ffb      	ldrb	r3, [r7, #31]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	77fb      	strb	r3, [r7, #31]
 8001c10:	7ffb      	ldrb	r3, [r7, #31]
 8001c12:	2b07      	cmp	r3, #7
 8001c14:	d9ea      	bls.n	8001bec <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	b292      	uxth	r2, r2
 8001c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c46:	bf00      	nop
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f6      	beq.n	8001c48 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	77fb      	strb	r3, [r7, #31]
 8001c76:	e010      	b.n	8001c9a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c78:	7ffb      	ldrb	r3, [r7, #31]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	7ffa      	ldrb	r2, [r7, #31]
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	440a      	add	r2, r1
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	f107 0120 	add.w	r1, r7, #32
 8001c8c:	440b      	add	r3, r1
 8001c8e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c92:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c94:	7ffb      	ldrb	r3, [r7, #31]
 8001c96:	3301      	adds	r3, #1
 8001c98:	77fb      	strb	r3, [r7, #31]
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
 8001c9c:	2b07      	cmp	r3, #7
 8001c9e:	d9eb      	bls.n	8001c78 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0208 	orr.w	r2, r2, #8
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0204 	orr.w	r2, r2, #4
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f005 fc1b 	bl	8007524 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fdd4 	bl	80058a0 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d02:	d10e      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d16:	b292      	uxth	r2, r2
 8001d18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f005 fbd4 	bl	80074ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fdba 	bl	80058a0 <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d36:	d10b      	bne.n	8001d50 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_PCD_SetAddress+0x1a>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e013      	b.n	8001d9a <HAL_PCD_SetAddress+0x42>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 fd61 	bl	8005852 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	4608      	mov	r0, r1
 8001dac:	4611      	mov	r1, r2
 8001dae:	461a      	mov	r2, r3
 8001db0:	4603      	mov	r3, r0
 8001db2:	70fb      	strb	r3, [r7, #3]
 8001db4:	460b      	mov	r3, r1
 8001db6:	803b      	strh	r3, [r7, #0]
 8001db8:	4613      	mov	r3, r2
 8001dba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	da0e      	bge.n	8001de6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	705a      	strb	r2, [r3, #1]
 8001de4:	e00e      	b.n	8001e04 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 0207 	and.w	r2, r3, #7
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e10:	883a      	ldrh	r2, [r7, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	78ba      	ldrb	r2, [r7, #2]
 8001e1a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e2e:	78bb      	ldrb	r3, [r7, #2]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d102      	bne.n	8001e3a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_PCD_EP_Open+0xa6>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e00e      	b.n	8001e66 <HAL_PCD_EP_Open+0xc4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 fd88 	bl	800396c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da0e      	bge.n	8001ea0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	705a      	strb	r2, [r3, #1]
 8001e9e:	e00e      	b.n	8001ebe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 0207 	and.w	r2, r3, #7
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_PCD_EP_Close+0x6a>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e00e      	b.n	8001ef6 <HAL_PCD_EP_Close+0x88>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 f8aa 	bl	8004040 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f0e:	7afb      	ldrb	r3, [r7, #11]
 8001f10:	f003 0207 	and.w	r2, r3, #7
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2200      	movs	r2, #0
 8001f36:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f3e:	7afb      	ldrb	r3, [r7, #11]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d106      	bne.n	8001f62 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6979      	ldr	r1, [r7, #20]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f002 fa5c 	bl	8004418 <USB_EPStartXfer>
 8001f60:	e005      	b.n	8001f6e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6979      	ldr	r1, [r7, #20]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 fa55 	bl	8004418 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 0207 	and.w	r2, r3, #7
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ffe:	7afb      	ldrb	r3, [r7, #11]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	2b00      	cmp	r3, #0
 8002006:	d106      	bne.n	8002016 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6979      	ldr	r1, [r7, #20]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fa02 	bl	8004418 <USB_EPStartXfer>
 8002014:	e005      	b.n	8002022 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6979      	ldr	r1, [r7, #20]
 800201c:	4618      	mov	r0, r3
 800201e:	f002 f9fb 	bl	8004418 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 0207 	and.w	r2, r3, #7
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	d901      	bls.n	800204a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e04c      	b.n	80020e4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800204a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204e:	2b00      	cmp	r3, #0
 8002050:	da0e      	bge.n	8002070 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	705a      	strb	r2, [r3, #1]
 800206e:	e00c      	b.n	800208a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	b2da      	uxtb	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_PCD_EP_SetStall+0x7e>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e01c      	b.n	80020e4 <HAL_PCD_EP_SetStall+0xb8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68f9      	ldr	r1, [r7, #12]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 facd 	bl	8005658 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d108      	bne.n	80020da <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80020d2:	4619      	mov	r1, r3
 80020d4:	4610      	mov	r0, r2
 80020d6:	f003 fbf2 	bl	80058be <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 020f 	and.w	r2, r3, #15
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d901      	bls.n	800210a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e040      	b.n	800218c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800210a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210e:	2b00      	cmp	r3, #0
 8002110:	da0e      	bge.n	8002130 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	705a      	strb	r2, [r3, #1]
 800212e:	e00e      	b.n	800214e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 0207 	and.w	r2, r3, #7
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	b2da      	uxtb	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_PCD_EP_ClrStall+0x82>
 800216a:	2302      	movs	r3, #2
 800216c:	e00e      	b.n	800218c <HAL_PCD_EP_ClrStall+0xa0>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68f9      	ldr	r1, [r7, #12]
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fabb 	bl	80056f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08e      	sub	sp, #56	; 0x38
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800219c:	e2df      	b.n	800275e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80021b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 8158 	bne.w	800246e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d152      	bne.n	800226e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d8:	81fb      	strh	r3, [r7, #14]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	89fb      	ldrh	r3, [r7, #14]
 80021e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3328      	adds	r3, #40	; 0x28
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	3302      	adds	r3, #2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	441a      	add	r2, r3
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800222c:	2100      	movs	r1, #0
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f005 f931 	bl	8007496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 828e 	beq.w	800275e <PCD_EP_ISR_Handler+0x5ca>
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 8289 	bne.w	800275e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002258:	b2da      	uxtb	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b292      	uxth	r2, r2
 8002260:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800226c:	e277      	b.n	800275e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800227e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002284:	2b00      	cmp	r3, #0
 8002286:	d034      	beq.n	80022f2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	3306      	adds	r3, #6
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f003 fb48 	bl	800595c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022d8:	4013      	ands	r3, r2
 80022da:	823b      	strh	r3, [r7, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	8a3a      	ldrh	r2, [r7, #16]
 80022e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022e6:	b292      	uxth	r2, r2
 80022e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f005 f8a6 	bl	800743c <HAL_PCD_SetupStageCallback>
 80022f0:	e235      	b.n	800275e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f280 8231 	bge.w	800275e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29a      	uxth	r2, r3
 8002304:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002308:	4013      	ands	r3, r2
 800230a:	83bb      	strh	r3, [r7, #28]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	8bba      	ldrh	r2, [r7, #28]
 8002312:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002316:	b292      	uxth	r2, r2
 8002318:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	3306      	adds	r3, #6
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d019      	beq.n	8002382 <PCD_EP_ISR_Handler+0x1ee>
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d015      	beq.n	8002382 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	6959      	ldr	r1, [r3, #20]
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002366:	b29b      	uxth	r3, r3
 8002368:	f003 faf8 	bl	800595c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	441a      	add	r2, r3
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800237a:	2100      	movs	r1, #0
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f005 f86f 	bl	8007460 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002390:	b29b      	uxth	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	4413      	add	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d112      	bne.n	80023d0 <PCD_EP_ISR_Handler+0x23c>
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	801a      	strh	r2, [r3, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	801a      	strh	r2, [r3, #0]
 80023ce:	e02f      	b.n	8002430 <PCD_EP_ISR_Handler+0x29c>
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b3e      	cmp	r3, #62	; 0x3e
 80023d6:	d813      	bhi.n	8002400 <PCD_EP_ISR_Handler+0x26c>
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <PCD_EP_ISR_Handler+0x25e>
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	3301      	adds	r3, #1
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	029b      	lsls	r3, r3, #10
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	801a      	strh	r2, [r3, #0]
 80023fe:	e017      	b.n	8002430 <PCD_EP_ISR_Handler+0x29c>
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <PCD_EP_ISR_Handler+0x286>
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	3b01      	subs	r3, #1
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	b29b      	uxth	r3, r3
 800241e:	029b      	lsls	r3, r3, #10
 8002420:	b29b      	uxth	r3, r3
 8002422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800242a:	b29a      	uxth	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800243c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002440:	827b      	strh	r3, [r7, #18]
 8002442:	8a7b      	ldrh	r3, [r7, #18]
 8002444:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002448:	827b      	strh	r3, [r7, #18]
 800244a:	8a7b      	ldrh	r3, [r7, #18]
 800244c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002450:	827b      	strh	r3, [r7, #18]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	8a7b      	ldrh	r3, [r7, #18]
 8002458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800245c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002468:	b29b      	uxth	r3, r3
 800246a:	8013      	strh	r3, [r2, #0]
 800246c:	e177      	b.n	800275e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002480:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002484:	2b00      	cmp	r3, #0
 8002486:	f280 80ea 	bge.w	800265e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29a      	uxth	r2, r3
 800249c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024a0:	4013      	ands	r3, r2
 80024a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024b8:	b292      	uxth	r2, r2
 80024ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024bc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	4413      	add	r3, r2
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	7b1b      	ldrb	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d122      	bne.n	8002520 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	3306      	adds	r3, #6
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002502:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002504:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8087 	beq.w	800261a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	6959      	ldr	r1, [r3, #20]
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	88da      	ldrh	r2, [r3, #6]
 8002518:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800251a:	f003 fa1f 	bl	800595c <USB_ReadPMA>
 800251e:	e07c      	b.n	800261a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	78db      	ldrb	r3, [r3, #3]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d108      	bne.n	800253a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002528:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800252a:	461a      	mov	r2, r3
 800252c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f923 	bl	800277a <HAL_PCD_EP_DB_Receive>
 8002534:	4603      	mov	r3, r0
 8002536:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002538:	e06f      	b.n	800261a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002554:	847b      	strh	r3, [r7, #34]	; 0x22
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	441a      	add	r2, r3
 8002564:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800256a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800256e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002576:	b29b      	uxth	r3, r3
 8002578:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d021      	beq.n	80025d8 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	3302      	adds	r3, #2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025bc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d02a      	beq.n	800261a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	6959      	ldr	r1, [r3, #20]
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	891a      	ldrh	r2, [r3, #8]
 80025d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025d2:	f003 f9c3 	bl	800595c <USB_ReadPMA>
 80025d6:	e020      	b.n	800261a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	3306      	adds	r3, #6
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002600:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002602:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	6959      	ldr	r1, [r3, #20]
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	895a      	ldrh	r2, [r3, #10]
 8002614:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002616:	f003 f9a1 	bl	800595c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002620:	441a      	add	r2, r3
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800262c:	441a      	add	r2, r3
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <PCD_EP_ISR_Handler+0x4b0>
 800263a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d206      	bcs.n	8002652 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f004 ff08 	bl	8007460 <HAL_PCD_DataOutStageCallback>
 8002650:	e005      	b.n	800265e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fedd 	bl	8004418 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800265e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	d07a      	beq.n	800275e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002668:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002696:	843b      	strh	r3, [r7, #32]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	441a      	add	r2, r3
 80026a6:	8c3b      	ldrh	r3, [r7, #32]
 80026a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	78db      	ldrb	r3, [r3, #3]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d108      	bne.n	80026ce <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d146      	bne.n	8002752 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80026c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d141      	bne.n	8002752 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	3302      	adds	r3, #2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	8bfb      	ldrh	r3, [r7, #30]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d906      	bls.n	8002710 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	8bfb      	ldrh	r3, [r7, #30]
 8002708:	1ad2      	subs	r2, r2, r3
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	619a      	str	r2, [r3, #24]
 800270e:	e002      	b.n	8002716 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	2200      	movs	r2, #0
 8002714:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	4619      	mov	r1, r3
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f004 feb6 	bl	8007496 <HAL_PCD_DataInStageCallback>
 800272a:	e018      	b.n	800275e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	8bfb      	ldrh	r3, [r7, #30]
 8002732:	441a      	add	r2, r3
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	8bfb      	ldrh	r3, [r7, #30]
 800273e:	441a      	add	r2, r3
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274a:	4618      	mov	r0, r3
 800274c:	f001 fe64 	bl	8004418 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002750:	e005      	b.n	800275e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002752:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002754:	461a      	mov	r2, r3
 8002756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f91b 	bl	8002994 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21b      	sxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	f6ff ad17 	blt.w	800219e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3738      	adds	r7, #56	; 0x38
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b088      	sub	sp, #32
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	4613      	mov	r3, r2
 8002786:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d07e      	beq.n	8002890 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279a:	b29b      	uxth	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	3302      	adds	r3, #2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	699a      	ldr	r2, [r3, #24]
 80027c0:	8b7b      	ldrh	r3, [r7, #26]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d306      	bcc.n	80027d4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	8b7b      	ldrh	r3, [r7, #26]
 80027cc:	1ad2      	subs	r2, r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	619a      	str	r2, [r3, #24]
 80027d2:	e002      	b.n	80027da <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2200      	movs	r2, #0
 80027d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d123      	bne.n	800282a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fc:	833b      	strh	r3, [r7, #24]
 80027fe:	8b3b      	ldrh	r3, [r7, #24]
 8002800:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002804:	833b      	strh	r3, [r7, #24]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	441a      	add	r2, r3
 8002814:	8b3b      	ldrh	r3, [r7, #24]
 8002816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800281e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002826:	b29b      	uxth	r3, r3
 8002828:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01f      	beq.n	8002874 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	82fb      	strh	r3, [r7, #22]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	441a      	add	r2, r3
 800285e:	8afb      	ldrh	r3, [r7, #22]
 8002860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002870:	b29b      	uxth	r3, r3
 8002872:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002874:	8b7b      	ldrh	r3, [r7, #26]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8087 	beq.w	800298a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6959      	ldr	r1, [r3, #20]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	891a      	ldrh	r2, [r3, #8]
 8002888:	8b7b      	ldrh	r3, [r7, #26]
 800288a:	f003 f867 	bl	800595c <USB_ReadPMA>
 800288e:	e07c      	b.n	800298a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	3306      	adds	r3, #6
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	8b7b      	ldrh	r3, [r7, #26]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d306      	bcc.n	80028d2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	699a      	ldr	r2, [r3, #24]
 80028c8:	8b7b      	ldrh	r3, [r7, #26]
 80028ca:	1ad2      	subs	r2, r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	619a      	str	r2, [r3, #24]
 80028d0:	e002      	b.n	80028d8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d123      	bne.n	8002928 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	83fb      	strh	r3, [r7, #30]
 80028fc:	8bfb      	ldrh	r3, [r7, #30]
 80028fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002902:	83fb      	strh	r3, [r7, #30]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	8bfb      	ldrh	r3, [r7, #30]
 8002914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002924:	b29b      	uxth	r3, r3
 8002926:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d11f      	bne.n	8002972 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294c:	83bb      	strh	r3, [r7, #28]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	441a      	add	r2, r3
 800295c:	8bbb      	ldrh	r3, [r7, #28]
 800295e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800296e:	b29b      	uxth	r3, r3
 8002970:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002972:	8b7b      	ldrh	r3, [r7, #26]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	6959      	ldr	r1, [r3, #20]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	895a      	ldrh	r2, [r3, #10]
 8002984:	8b7b      	ldrh	r3, [r7, #26]
 8002986:	f002 ffe9 	bl	800595c <USB_ReadPMA>
    }
  }

  return count;
 800298a:	8b7b      	ldrh	r3, [r7, #26]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b092      	sub	sp, #72	; 0x48
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8132 	beq.w	8002c12 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	3302      	adds	r3, #2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029de:	429a      	cmp	r2, r3
 80029e0:	d906      	bls.n	80029f0 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029e8:	1ad2      	subs	r2, r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	619a      	str	r2, [r3, #24]
 80029ee:	e002      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d12c      	bne.n	8002a58 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	4619      	mov	r1, r3
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f004 fd46 	bl	8007496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 822f 	beq.w	8002e74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a30:	827b      	strh	r3, [r7, #18]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	441a      	add	r2, r3
 8002a40:	8a7b      	ldrh	r3, [r7, #18]
 8002a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	8013      	strh	r3, [r2, #0]
 8002a56:	e20d      	b.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01f      	beq.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	441a      	add	r2, r3
 8002a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	f040 81e3 	bne.w	8002e74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ab4:	441a      	add	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ac0:	441a      	add	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d309      	bcc.n	8002ae6 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	1ad2      	subs	r2, r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	e014      	b.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002aee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002afa:	e009      	b.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	785b      	ldrb	r3, [r3, #1]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d155      	bne.n	8002bc4 <HAL_PCD_EP_DB_Transmit+0x230>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	011a      	lsls	r2, r3, #4
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d112      	bne.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	801a      	strh	r2, [r3, #0]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	e047      	b.n	8002bfc <HAL_PCD_EP_DB_Transmit+0x268>
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b70:	d811      	bhi.n	8002b96 <HAL_PCD_EP_DB_Transmit+0x202>
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	3301      	adds	r3, #1
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	029b      	lsls	r3, r3, #10
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	e032      	b.n	8002bfc <HAL_PCD_EP_DB_Transmit+0x268>
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <HAL_PCD_EP_DB_Transmit+0x218>
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	029b      	lsls	r3, r3, #10
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	801a      	strh	r2, [r3, #0]
 8002bc2:	e01b      	b.n	8002bfc <HAL_PCD_EP_DB_Transmit+0x268>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d117      	bne.n	8002bfc <HAL_PCD_EP_DB_Transmit+0x268>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	4413      	add	r3, r2
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	011a      	lsls	r2, r3, #4
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	4413      	add	r3, r2
 8002bee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	6959      	ldr	r1, [r3, #20]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	891a      	ldrh	r2, [r3, #8]
 8002c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f002 fe62 	bl	80058d4 <USB_WritePMA>
 8002c10:	e130      	b.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	3306      	adds	r3, #6
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c3a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d306      	bcc.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c4c:	1ad2      	subs	r2, r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	619a      	str	r2, [r3, #24]
 8002c52:	e002      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2200      	movs	r2, #0
 8002c58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d12c      	bne.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f004 fc14 	bl	8007496 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 80fd 	bne.w	8002e74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c94:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	441a      	add	r2, r3
 8002ca4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	8013      	strh	r3, [r2, #0]
 8002cba:	e0db      	b.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d11f      	bne.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	441a      	add	r2, r3
 8002cf0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	f040 80b1 	bne.w	8002e74 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d18:	441a      	add	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d24:	441a      	add	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	6a1a      	ldr	r2, [r3, #32]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d309      	bcc.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	6a1a      	ldr	r2, [r3, #32]
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	1ad2      	subs	r2, r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	621a      	str	r2, [r3, #32]
 8002d48:	e014      	b.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002d52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d5e:	e009      	b.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	785b      	ldrb	r3, [r3, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d155      	bne.n	8002e2e <HAL_PCD_EP_DB_Transmit+0x49a>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	647b      	str	r3, [r7, #68]	; 0x44
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d96:	4413      	add	r3, r2
 8002d98:	647b      	str	r3, [r7, #68]	; 0x44
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	011a      	lsls	r2, r3, #4
 8002da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da2:	4413      	add	r3, r2
 8002da4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002da8:	643b      	str	r3, [r7, #64]	; 0x40
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d112      	bne.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x442>
 8002db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd2:	801a      	strh	r2, [r3, #0]
 8002dd4:	e044      	b.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8002dda:	d811      	bhi.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dee:	3301      	adds	r3, #1
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfc:	801a      	strh	r2, [r3, #0]
 8002dfe:	e02f      	b.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <HAL_PCD_EP_DB_Transmit+0x482>
 8002e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e12:	3b01      	subs	r3, #1
 8002e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	029b      	lsls	r3, r3, #10
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	e018      	b.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d114      	bne.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e44:	4413      	add	r3, r2
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	011a      	lsls	r2, r3, #4
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e50:	4413      	add	r3, r2
 8002e52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	6959      	ldr	r1, [r3, #20]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	895a      	ldrh	r2, [r3, #10]
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f002 fd30 	bl	80058d4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8e:	823b      	strh	r3, [r7, #16]
 8002e90:	8a3b      	ldrh	r3, [r7, #16]
 8002e92:	f083 0310 	eor.w	r3, r3, #16
 8002e96:	823b      	strh	r3, [r7, #16]
 8002e98:	8a3b      	ldrh	r3, [r7, #16]
 8002e9a:	f083 0320 	eor.w	r3, r3, #32
 8002e9e:	823b      	strh	r3, [r7, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	8a3b      	ldrh	r3, [r7, #16]
 8002eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3748      	adds	r7, #72	; 0x48
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b087      	sub	sp, #28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	607b      	str	r3, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	817b      	strh	r3, [r7, #10]
 8002edc:	4613      	mov	r3, r2
 8002ede:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ee0:	897b      	ldrh	r3, [r7, #10]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eec:	897b      	ldrh	r3, [r7, #10]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e009      	b.n	8002f18 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f04:	897a      	ldrh	r2, [r7, #10]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4413      	add	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f18:	893b      	ldrh	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	80da      	strh	r2, [r3, #6]
 8002f2c:	e00b      	b.n	8002f46 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2201      	movs	r2, #1
 8002f32:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e26c      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8087 	beq.w	8003082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f74:	4b92      	ldr	r3, [pc, #584]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d00c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f80:	4b8f      	ldr	r3, [pc, #572]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d112      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x5e>
 8002f8c:	4b8c      	ldr	r3, [pc, #560]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9a:	4b89      	ldr	r3, [pc, #548]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d06c      	beq.n	8003080 <HAL_RCC_OscConfig+0x12c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d168      	bne.n	8003080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e246      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_OscConfig+0x76>
 8002fbc:	4b80      	ldr	r3, [pc, #512]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a7f      	ldr	r2, [pc, #508]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	e02e      	b.n	8003028 <HAL_RCC_OscConfig+0xd4>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x98>
 8002fd2:	4b7b      	ldr	r3, [pc, #492]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7a      	ldr	r2, [pc, #488]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a77      	ldr	r2, [pc, #476]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e01d      	b.n	8003028 <HAL_RCC_OscConfig+0xd4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0xbc>
 8002ff6:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a71      	ldr	r2, [pc, #452]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b6f      	ldr	r3, [pc, #444]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6e      	ldr	r2, [pc, #440]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0xd4>
 8003010:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a6a      	ldr	r2, [pc, #424]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b68      	ldr	r3, [pc, #416]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a67      	ldr	r2, [pc, #412]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fd fc02 	bl	8000838 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fd fbfe 	bl	8000838 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e1fa      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b5d      	ldr	r3, [pc, #372]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0xe4>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fd fbee 	bl	8000838 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7fd fbea 	bl	8000838 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e1e6      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	4b53      	ldr	r3, [pc, #332]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x10c>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d063      	beq.n	8003156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800308e:	4b4c      	ldr	r3, [pc, #304]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800309a:	4b49      	ldr	r3, [pc, #292]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d11c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x18c>
 80030a6:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_RCC_OscConfig+0x176>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e1ba      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4939      	ldr	r1, [pc, #228]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	e03a      	b.n	8003156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e8:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fd fba3 	bl	8000838 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f6:	f7fd fb9f 	bl	8000838 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e19b      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	4b2d      	ldr	r3, [pc, #180]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4927      	ldr	r1, [pc, #156]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
 8003128:	e015      	b.n	8003156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <HAL_RCC_OscConfig+0x270>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fd fb82 	bl	8000838 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003138:	f7fd fb7e 	bl	8000838 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e17a      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d03a      	beq.n	80031d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d019      	beq.n	800319e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003170:	f7fd fb62 	bl	8000838 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7fd fb5e 	bl	8000838 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e15a      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_RCC_OscConfig+0x26c>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003196:	2001      	movs	r0, #1
 8003198:	f000 faa8 	bl	80036ec <RCC_Delay>
 800319c:	e01c      	b.n	80031d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <HAL_RCC_OscConfig+0x274>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a4:	f7fd fb48 	bl	8000838 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031aa:	e00f      	b.n	80031cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ac:	f7fd fb44 	bl	8000838 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d908      	bls.n	80031cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e140      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	42420000 	.word	0x42420000
 80031c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	4b9e      	ldr	r3, [pc, #632]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e9      	bne.n	80031ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a6 	beq.w	8003332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ea:	4b97      	ldr	r3, [pc, #604]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	4b94      	ldr	r3, [pc, #592]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a93      	ldr	r2, [pc, #588]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	61d3      	str	r3, [r2, #28]
 8003202:	4b91      	ldr	r3, [pc, #580]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b8e      	ldr	r3, [pc, #568]	; (800344c <HAL_RCC_OscConfig+0x4f8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d118      	bne.n	8003250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321e:	4b8b      	ldr	r3, [pc, #556]	; (800344c <HAL_RCC_OscConfig+0x4f8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a8a      	ldr	r2, [pc, #552]	; (800344c <HAL_RCC_OscConfig+0x4f8>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322a:	f7fd fb05 	bl	8000838 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003232:	f7fd fb01 	bl	8000838 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e0fd      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	4b81      	ldr	r3, [pc, #516]	; (800344c <HAL_RCC_OscConfig+0x4f8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0x312>
 8003258:	4b7b      	ldr	r3, [pc, #492]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a7a      	ldr	r2, [pc, #488]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	e02d      	b.n	80032c2 <HAL_RCC_OscConfig+0x36e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0x334>
 800326e:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	4a75      	ldr	r2, [pc, #468]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	6213      	str	r3, [r2, #32]
 800327a:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4a72      	ldr	r2, [pc, #456]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	6213      	str	r3, [r2, #32]
 8003286:	e01c      	b.n	80032c2 <HAL_RCC_OscConfig+0x36e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b05      	cmp	r3, #5
 800328e:	d10c      	bne.n	80032aa <HAL_RCC_OscConfig+0x356>
 8003290:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4a6c      	ldr	r2, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	6213      	str	r3, [r2, #32]
 800329c:	4b6a      	ldr	r3, [pc, #424]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4a69      	ldr	r2, [pc, #420]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6213      	str	r3, [r2, #32]
 80032a8:	e00b      	b.n	80032c2 <HAL_RCC_OscConfig+0x36e>
 80032aa:	4b67      	ldr	r3, [pc, #412]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4a66      	ldr	r2, [pc, #408]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6213      	str	r3, [r2, #32]
 80032b6:	4b64      	ldr	r3, [pc, #400]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	4a63      	ldr	r2, [pc, #396]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	f023 0304 	bic.w	r3, r3, #4
 80032c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d015      	beq.n	80032f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7fd fab5 	bl	8000838 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fd fab1 	bl	8000838 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0ab      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ee      	beq.n	80032d2 <HAL_RCC_OscConfig+0x37e>
 80032f4:	e014      	b.n	8003320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fd fa9f 	bl	8000838 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7fd fa9b 	bl	8000838 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e095      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003314:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ee      	bne.n	80032fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003326:	4b48      	ldr	r3, [pc, #288]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4a47      	ldr	r2, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8081 	beq.w	800343e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800333c:	4b42      	ldr	r3, [pc, #264]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d061      	beq.n	800340c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d146      	bne.n	80033de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b3f      	ldr	r3, [pc, #252]	; (8003450 <HAL_RCC_OscConfig+0x4fc>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7fd fa6f 	bl	8000838 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335e:	f7fd fa6b 	bl	8000838 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e067      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003370:	4b35      	ldr	r3, [pc, #212]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d108      	bne.n	8003398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003386:	4b30      	ldr	r3, [pc, #192]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	492d      	ldr	r1, [pc, #180]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a19      	ldr	r1, [r3, #32]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	430b      	orrs	r3, r1
 80033aa:	4927      	ldr	r1, [pc, #156]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b0:	4b27      	ldr	r3, [pc, #156]	; (8003450 <HAL_RCC_OscConfig+0x4fc>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7fd fa3f 	bl	8000838 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033be:	f7fd fa3b 	bl	8000838 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e037      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x46a>
 80033dc:	e02f      	b.n	800343e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <HAL_RCC_OscConfig+0x4fc>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fd fa28 	bl	8000838 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7fd fa24 	bl	8000838 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e020      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x498>
 800340a:	e018      	b.n	800343e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e013      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	429a      	cmp	r2, r3
 800342a:	d106      	bne.n	800343a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	40007000 	.word	0x40007000
 8003450:	42420060 	.word	0x42420060

08003454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0d0      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b6a      	ldr	r3, [pc, #424]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d910      	bls.n	8003498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b67      	ldr	r3, [pc, #412]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 0207 	bic.w	r2, r3, #7
 800347e:	4965      	ldr	r1, [pc, #404]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b8      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b0:	4b59      	ldr	r3, [pc, #356]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c8:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	494d      	ldr	r1, [pc, #308]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d040      	beq.n	8003574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d115      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07f      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e073      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e06b      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f023 0203 	bic.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4936      	ldr	r1, [pc, #216]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003544:	f7fd f978 	bl	8000838 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	e00a      	b.n	8003562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fd f974 	bl	8000838 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e053      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 020c 	and.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	429a      	cmp	r2, r3
 8003572:	d1eb      	bne.n	800354c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003574:	4b27      	ldr	r3, [pc, #156]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d210      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 0207 	bic.w	r2, r3, #7
 800358a:	4922      	ldr	r1, [pc, #136]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e032      	b.n	800360a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4916      	ldr	r1, [pc, #88]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490e      	ldr	r1, [pc, #56]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e2:	f000 f821 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80035e6:	4601      	mov	r1, r0
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	4a0a      	ldr	r2, [pc, #40]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	fa21 f303 	lsr.w	r3, r1, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1cc>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1d0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd f8d6 	bl	80007b4 <HAL_InitTick>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40022000 	.word	0x40022000
 8003618:	40021000 	.word	0x40021000
 800361c:	08007a10 	.word	0x08007a10
 8003620:	20000000 	.word	0x20000000
 8003624:	20000004 	.word	0x20000004

08003628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	b490      	push	{r4, r7}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800362e:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003630:	1d3c      	adds	r4, r7, #4
 8003632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003638:	4b28      	ldr	r3, [pc, #160]	; (80036dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003652:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b04      	cmp	r3, #4
 8003660:	d002      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x40>
 8003662:	2b08      	cmp	r3, #8
 8003664:	d003      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x46>
 8003666:	e02d      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003668:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800366a:	623b      	str	r3, [r7, #32]
      break;
 800366c:	e02d      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	0c9b      	lsrs	r3, r3, #18
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800367a:	4413      	add	r3, r2
 800367c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003680:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d013      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800368c:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	0c5b      	lsrs	r3, r3, #17
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800369a:	4413      	add	r3, r2
 800369c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4a0f      	ldr	r2, [pc, #60]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036a6:	fb02 f203 	mul.w	r2, r2, r3
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
 80036b2:	e004      	b.n	80036be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	623b      	str	r3, [r7, #32]
      break;
 80036c2:	e002      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036c6:	623b      	str	r3, [r7, #32]
      break;
 80036c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ca:	6a3b      	ldr	r3, [r7, #32]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3728      	adds	r7, #40	; 0x28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc90      	pop	{r4, r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	080079b4 	.word	0x080079b4
 80036dc:	080079c4 	.word	0x080079c4
 80036e0:	40021000 	.word	0x40021000
 80036e4:	007a1200 	.word	0x007a1200
 80036e8:	003d0900 	.word	0x003d0900

080036ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <RCC_Delay+0x34>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <RCC_Delay+0x38>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0a5b      	lsrs	r3, r3, #9
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003708:	bf00      	nop
  }
  while (Delay --);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1e5a      	subs	r2, r3, #1
 800370e:	60fa      	str	r2, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f9      	bne.n	8003708 <RCC_Delay+0x1c>
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000000 	.word	0x20000000
 8003724:	10624dd3 	.word	0x10624dd3

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d07d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003744:	2300      	movs	r3, #0
 8003746:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003748:	4b4f      	ldr	r3, [pc, #316]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10d      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003754:	4b4c      	ldr	r3, [pc, #304]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4a4b      	ldr	r2, [pc, #300]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375e:	61d3      	str	r3, [r2, #28]
 8003760:	4b49      	ldr	r3, [pc, #292]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d118      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a42      	ldr	r2, [pc, #264]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003788:	f7fd f856 	bl	8000838 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	e008      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003790:	f7fd f852 	bl	8000838 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e06d      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b3a      	ldr	r3, [pc, #232]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037ae:	4b36      	ldr	r3, [pc, #216]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d02e      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d027      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037cc:	4b2e      	ldr	r3, [pc, #184]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037dc:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037e2:	4a29      	ldr	r2, [pc, #164]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d014      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fd f821 	bl	8000838 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f8:	e00a      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fa:	f7fd f81d 	bl	8000838 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f241 3288 	movw	r2, #5000	; 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d901      	bls.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e036      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003810:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ee      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4917      	ldr	r1, [pc, #92]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382a:	4313      	orrs	r3, r2
 800382c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d105      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003834:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	4a13      	ldr	r2, [pc, #76]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800384c:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	490b      	ldr	r1, [pc, #44]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800386a:	4b07      	ldr	r3, [pc, #28]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4904      	ldr	r1, [pc, #16]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000
 800388c:	40007000 	.word	0x40007000
 8003890:	42420440 	.word	0x42420440

08003894 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003894:	b084      	sub	sp, #16
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	f107 0014 	add.w	r0, r7, #20
 80038a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	b004      	add	sp, #16
 80038b2:	4770      	bx	lr

080038b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038e8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	4013      	ands	r3, r2
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800392c:	b084      	sub	sp, #16
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	f107 0014 	add.w	r0, r7, #20
 800393a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	b004      	add	sp, #16
 800396a:	4770      	bx	lr

0800396c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800396c:	b480      	push	{r7}
 800396e:	b09b      	sub	sp, #108	; 0x6c
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	78db      	ldrb	r3, [r3, #3]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d81f      	bhi.n	80039de <USB_ActivateEndpoint+0x72>
 800399e:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <USB_ActivateEndpoint+0x38>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039d1 	.word	0x080039d1
 80039ac:	080039e7 	.word	0x080039e7
 80039b0:	080039c3 	.word	0x080039c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80039b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80039c0:	e012      	b.n	80039e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80039c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039c6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80039ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80039ce:	e00b      	b.n	80039e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80039d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80039dc:	e004      	b.n	80039e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80039e4:	e000      	b.n	80039e8 <USB_ActivateEndpoint+0x7c>
      break;
 80039e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	441a      	add	r2, r3
 8003a38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	7b1b      	ldrb	r3, [r3, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f040 8149 	bne.w	8003cec <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8084 	beq.w	8003b6c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4413      	add	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	011a      	lsls	r2, r3, #4
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	88db      	ldrh	r3, [r3, #6]
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	81fb      	strh	r3, [r7, #14]
 8003aa6:	89fb      	ldrh	r3, [r7, #14]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01b      	beq.n	8003ae8 <USB_ActivateEndpoint+0x17c>
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	81bb      	strh	r3, [r7, #12]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	441a      	add	r2, r3
 8003ad2:	89bb      	ldrh	r3, [r7, #12]
 8003ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	78db      	ldrb	r3, [r3, #3]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d020      	beq.n	8003b32 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b06:	813b      	strh	r3, [r7, #8]
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	f083 0320 	eor.w	r3, r3, #32
 8003b0e:	813b      	strh	r3, [r7, #8]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	441a      	add	r2, r3
 8003b1a:	893b      	ldrh	r3, [r7, #8]
 8003b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	8013      	strh	r3, [r2, #0]
 8003b30:	e27f      	b.n	8004032 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b48:	817b      	strh	r3, [r7, #10]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	441a      	add	r2, r3
 8003b54:	897b      	ldrh	r3, [r7, #10]
 8003b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8013      	strh	r3, [r2, #0]
 8003b6a:	e262      	b.n	8004032 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	4413      	add	r3, r2
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	011a      	lsls	r2, r3, #4
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	88db      	ldrh	r3, [r3, #6]
 8003b94:	085b      	lsrs	r3, r3, #1
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	4413      	add	r3, r2
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	011a      	lsls	r2, r3, #4
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bc2:	623b      	str	r3, [r7, #32]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d112      	bne.n	8003bf2 <USB_ActivateEndpoint+0x286>
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	801a      	strh	r2, [r3, #0]
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	801a      	strh	r2, [r3, #0]
 8003bf0:	e02f      	b.n	8003c52 <USB_ActivateEndpoint+0x2e6>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf8:	d813      	bhi.n	8003c22 <USB_ActivateEndpoint+0x2b6>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	663b      	str	r3, [r7, #96]	; 0x60
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <USB_ActivateEndpoint+0x2a8>
 8003c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c10:	3301      	adds	r3, #1
 8003c12:	663b      	str	r3, [r7, #96]	; 0x60
 8003c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	029b      	lsls	r3, r3, #10
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	801a      	strh	r2, [r3, #0]
 8003c20:	e017      	b.n	8003c52 <USB_ActivateEndpoint+0x2e6>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	663b      	str	r3, [r7, #96]	; 0x60
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <USB_ActivateEndpoint+0x2d0>
 8003c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	029b      	lsls	r3, r3, #10
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	83fb      	strh	r3, [r7, #30]
 8003c60:	8bfb      	ldrh	r3, [r7, #30]
 8003c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01b      	beq.n	8003ca2 <USB_ActivateEndpoint+0x336>
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c80:	83bb      	strh	r3, [r7, #28]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	441a      	add	r2, r3
 8003c8c:	8bbb      	ldrh	r3, [r7, #28]
 8003c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb8:	837b      	strh	r3, [r7, #26]
 8003cba:	8b7b      	ldrh	r3, [r7, #26]
 8003cbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003cc0:	837b      	strh	r3, [r7, #26]
 8003cc2:	8b7b      	ldrh	r3, [r7, #26]
 8003cc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cc8:	837b      	strh	r3, [r7, #26]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	441a      	add	r2, r3
 8003cd4:	8b7b      	ldrh	r3, [r7, #26]
 8003cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	8013      	strh	r3, [r2, #0]
 8003cea:	e1a2      	b.n	8004032 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d02:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	441a      	add	r2, r3
 8003d10:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d38:	4413      	add	r3, r2
 8003d3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	011a      	lsls	r2, r3, #4
 8003d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	891b      	ldrh	r3, [r3, #8]
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d5a:	801a      	strh	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6c:	4413      	add	r3, r2
 8003d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	011a      	lsls	r2, r3, #4
 8003d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	895b      	ldrh	r3, [r3, #10]
 8003d84:	085b      	lsrs	r3, r3, #1
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	785b      	ldrb	r3, [r3, #1]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f040 8091 	bne.w	8003ebc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003da8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01b      	beq.n	8003dea <USB_ActivateEndpoint+0x47e>
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	441a      	add	r2, r3
 8003dd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	873b      	strh	r3, [r7, #56]	; 0x38
 8003df8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01b      	beq.n	8003e3a <USB_ActivateEndpoint+0x4ce>
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e18:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	441a      	add	r2, r3
 8003e24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e50:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	441a      	add	r2, r3
 8003e6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e98:	867b      	strh	r3, [r7, #50]	; 0x32
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	441a      	add	r2, r3
 8003ea4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8013      	strh	r3, [r2, #0]
 8003eba:	e0ba      	b.n	8004032 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003ecc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01d      	beq.n	8003f14 <USB_ActivateEndpoint+0x5a8>
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003f24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01d      	beq.n	8003f6c <USB_ActivateEndpoint+0x600>
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	78db      	ldrb	r3, [r3, #3]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d024      	beq.n	8003fbe <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f92:	f083 0320 	eor.w	r3, r3, #32
 8003f96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	441a      	add	r2, r3
 8003fa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	8013      	strh	r3, [r2, #0]
 8003fbc:	e01d      	b.n	8003ffa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800400c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004010:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	441a      	add	r2, r3
 800401c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800401e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402e:	b29b      	uxth	r3, r3
 8004030:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004032:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004036:	4618      	mov	r0, r3
 8004038:	376c      	adds	r7, #108	; 0x6c
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004040:	b480      	push	{r7}
 8004042:	b08d      	sub	sp, #52	; 0x34
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	7b1b      	ldrb	r3, [r3, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 808e 	bne.w	8004170 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d044      	beq.n	80040e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	81bb      	strh	r3, [r7, #12]
 800406a:	89bb      	ldrh	r3, [r7, #12]
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01b      	beq.n	80040ac <USB_DeactivateEndpoint+0x6c>
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	b29b      	uxth	r3, r3
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408a:	817b      	strh	r3, [r7, #10]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	441a      	add	r2, r3
 8004096:	897b      	ldrh	r3, [r7, #10]
 8004098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c2:	813b      	strh	r3, [r7, #8]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	893b      	ldrh	r3, [r7, #8]
 80040d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	8013      	strh	r3, [r2, #0]
 80040e4:	e192      	b.n	800440c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	827b      	strh	r3, [r7, #18]
 80040f4:	8a7b      	ldrh	r3, [r7, #18]
 80040f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01b      	beq.n	8004136 <USB_DeactivateEndpoint+0xf6>
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004114:	823b      	strh	r3, [r7, #16]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	441a      	add	r2, r3
 8004120:	8a3b      	ldrh	r3, [r7, #16]
 8004122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800412e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004132:	b29b      	uxth	r3, r3
 8004134:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414c:	81fb      	strh	r3, [r7, #14]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	441a      	add	r2, r3
 8004158:	89fb      	ldrh	r3, [r7, #14]
 800415a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416a:	b29b      	uxth	r3, r3
 800416c:	8013      	strh	r3, [r2, #0]
 800416e:	e14d      	b.n	800440c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 80a5 	bne.w	80042c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	843b      	strh	r3, [r7, #32]
 8004188:	8c3b      	ldrh	r3, [r7, #32]
 800418a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01b      	beq.n	80041ca <USB_DeactivateEndpoint+0x18a>
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a8:	83fb      	strh	r3, [r7, #30]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	441a      	add	r2, r3
 80041b4:	8bfb      	ldrh	r3, [r7, #30]
 80041b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	83bb      	strh	r3, [r7, #28]
 80041d8:	8bbb      	ldrh	r3, [r7, #28]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01b      	beq.n	800421a <USB_DeactivateEndpoint+0x1da>
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	837b      	strh	r3, [r7, #26]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	441a      	add	r2, r3
 8004204:	8b7b      	ldrh	r3, [r7, #26]
 8004206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004212:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004216:	b29b      	uxth	r3, r3
 8004218:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004230:	833b      	strh	r3, [r7, #24]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	8b3b      	ldrh	r3, [r7, #24]
 800423e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800424e:	b29b      	uxth	r3, r3
 8004250:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	82fb      	strh	r3, [r7, #22]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	441a      	add	r2, r3
 8004274:	8afb      	ldrh	r3, [r7, #22]
 8004276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800427a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004286:	b29b      	uxth	r3, r3
 8004288:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a0:	82bb      	strh	r3, [r7, #20]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	441a      	add	r2, r3
 80042ac:	8abb      	ldrh	r3, [r7, #20]
 80042ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042be:	b29b      	uxth	r3, r3
 80042c0:	8013      	strh	r3, [r2, #0]
 80042c2:	e0a3      	b.n	800440c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <USB_DeactivateEndpoint+0x2d4>
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	441a      	add	r2, r3
 80042fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800430c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004322:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <USB_DeactivateEndpoint+0x324>
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	853b      	strh	r3, [r7, #40]	; 0x28
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800435c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004408:	b29b      	uxth	r3, r3
 800440a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3734      	adds	r7, #52	; 0x34
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b0c4      	sub	sp, #272	; 0x110
 800441c:	af00      	add	r7, sp, #0
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	6018      	str	r0, [r3, #0]
 8004422:	463b      	mov	r3, r7
 8004424:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004426:	463b      	mov	r3, r7
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	2b01      	cmp	r3, #1
 800442e:	f040 8557 	bne.w	8004ee0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004432:	463b      	mov	r3, r7
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	463b      	mov	r3, r7
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	429a      	cmp	r2, r3
 8004440:	d905      	bls.n	800444e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004442:	463b      	mov	r3, r7
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800444c:	e004      	b.n	8004458 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800444e:	463b      	mov	r3, r7
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004458:	463b      	mov	r3, r7
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	7b1b      	ldrb	r3, [r3, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d12c      	bne.n	80044bc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004462:	463b      	mov	r3, r7
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6959      	ldr	r1, [r3, #20]
 8004468:	463b      	mov	r3, r7
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	88da      	ldrh	r2, [r3, #6]
 800446e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004472:	b29b      	uxth	r3, r3
 8004474:	1d38      	adds	r0, r7, #4
 8004476:	6800      	ldr	r0, [r0, #0]
 8004478:	f001 fa2c 	bl	80058d4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800447c:	1d3b      	adds	r3, r7, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800448a:	b29b      	uxth	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	463b      	mov	r3, r7
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	011a      	lsls	r2, r3, #4
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4413      	add	r3, r2
 80044a0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80044a4:	f107 0310 	add.w	r3, r7, #16
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	f107 0310 	add.w	r3, r7, #16
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	f000 bcdd 	b.w	8004e76 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80044bc:	463b      	mov	r3, r7
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	78db      	ldrb	r3, [r3, #3]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	f040 8347 	bne.w	8004b56 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80044c8:	463b      	mov	r3, r7
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	463b      	mov	r3, r7
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	f240 82eb 	bls.w	8004ab0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80044da:	1d3b      	adds	r3, r7, #4
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	463b      	mov	r3, r7
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80044f8:	1d3b      	adds	r3, r7, #4
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	463b      	mov	r3, r7
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800450a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004512:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800451e:	463b      	mov	r3, r7
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a1a      	ldr	r2, [r3, #32]
 8004524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004528:	1ad2      	subs	r2, r2, r3
 800452a:	463b      	mov	r3, r7
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004530:	1d3b      	adds	r3, r7, #4
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	463b      	mov	r3, r7
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8159 	beq.w	80047fe <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	637b      	str	r3, [r7, #52]	; 0x34
 8004552:	463b      	mov	r3, r7
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d164      	bne.n	8004626 <USB_EPStartXfer+0x20e>
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004562:	1d3b      	adds	r3, r7, #4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800456a:	b29b      	uxth	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	4413      	add	r3, r2
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004574:	463b      	mov	r3, r7
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	011a      	lsls	r2, r3, #4
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	4413      	add	r3, r2
 8004580:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
 8004586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d112      	bne.n	80045b4 <USB_EPStartXfer+0x19c>
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004598:	b29a      	uxth	r2, r3
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	801a      	strh	r2, [r3, #0]
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	801a      	strh	r2, [r3, #0]
 80045b2:	e054      	b.n	800465e <USB_EPStartXfer+0x246>
 80045b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b8:	2b3e      	cmp	r3, #62	; 0x3e
 80045ba:	d817      	bhi.n	80045ec <USB_EPStartXfer+0x1d4>
 80045bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <USB_EPStartXfer+0x1c4>
 80045d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d6:	3301      	adds	r3, #1
 80045d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	029b      	lsls	r3, r3, #10
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	801a      	strh	r2, [r3, #0]
 80045ea:	e038      	b.n	800465e <USB_EPStartXfer+0x246>
 80045ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d104      	bne.n	800460c <USB_EPStartXfer+0x1f4>
 8004602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004606:	3b01      	subs	r3, #1
 8004608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800460c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004610:	b29b      	uxth	r3, r3
 8004612:	029b      	lsls	r3, r3, #10
 8004614:	b29b      	uxth	r3, r3
 8004616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461e:	b29a      	uxth	r2, r3
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	801a      	strh	r2, [r3, #0]
 8004624:	e01b      	b.n	800465e <USB_EPStartXfer+0x246>
 8004626:	463b      	mov	r3, r7
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	785b      	ldrb	r3, [r3, #1]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d116      	bne.n	800465e <USB_EPStartXfer+0x246>
 8004630:	1d3b      	adds	r3, r7, #4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004638:	b29b      	uxth	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463e:	4413      	add	r3, r2
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
 8004642:	463b      	mov	r3, r7
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	011a      	lsls	r2, r3, #4
 800464a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464c:	4413      	add	r3, r2
 800464e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004652:	633b      	str	r3, [r7, #48]	; 0x30
 8004654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004658:	b29a      	uxth	r2, r3
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800465e:	463b      	mov	r3, r7
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	895b      	ldrh	r3, [r3, #10]
 8004664:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004668:	463b      	mov	r3, r7
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6959      	ldr	r1, [r3, #20]
 800466e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004672:	b29b      	uxth	r3, r3
 8004674:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004678:	1d38      	adds	r0, r7, #4
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	f001 f92a 	bl	80058d4 <USB_WritePMA>
            ep->xfer_buff += len;
 8004680:	463b      	mov	r3, r7
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468a:	441a      	add	r2, r3
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004692:	463b      	mov	r3, r7
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6a1a      	ldr	r2, [r3, #32]
 8004698:	463b      	mov	r3, r7
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d909      	bls.n	80046b6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80046a2:	463b      	mov	r3, r7
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a1a      	ldr	r2, [r3, #32]
 80046a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ac:	1ad2      	subs	r2, r2, r3
 80046ae:	463b      	mov	r3, r7
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	621a      	str	r2, [r3, #32]
 80046b4:	e008      	b.n	80046c8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80046b6:	463b      	mov	r3, r7
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80046c0:	463b      	mov	r3, r7
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2200      	movs	r2, #0
 80046c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046c8:	463b      	mov	r3, r7
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	785b      	ldrb	r3, [r3, #1]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d164      	bne.n	800479c <USB_EPStartXfer+0x384>
 80046d2:	1d3b      	adds	r3, r7, #4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	1d3b      	adds	r3, r7, #4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	4413      	add	r3, r2
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	463b      	mov	r3, r7
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	011a      	lsls	r2, r3, #4
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	4413      	add	r3, r2
 80046f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d112      	bne.n	800472a <USB_EPStartXfer+0x312>
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800470e:	b29a      	uxth	r2, r3
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	801a      	strh	r2, [r3, #0]
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800471e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004722:	b29a      	uxth	r2, r3
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	e057      	b.n	80047da <USB_EPStartXfer+0x3c2>
 800472a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800472e:	2b3e      	cmp	r3, #62	; 0x3e
 8004730:	d817      	bhi.n	8004762 <USB_EPStartXfer+0x34a>
 8004732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800473c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <USB_EPStartXfer+0x33a>
 8004748:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800474c:	3301      	adds	r3, #1
 800474e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004752:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004756:	b29b      	uxth	r3, r3
 8004758:	029b      	lsls	r3, r3, #10
 800475a:	b29a      	uxth	r2, r3
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	e03b      	b.n	80047da <USB_EPStartXfer+0x3c2>
 8004762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800476c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <USB_EPStartXfer+0x36a>
 8004778:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800477c:	3b01      	subs	r3, #1
 800477e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004782:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004786:	b29b      	uxth	r3, r3
 8004788:	029b      	lsls	r3, r3, #10
 800478a:	b29b      	uxth	r3, r3
 800478c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004794:	b29a      	uxth	r2, r3
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	e01e      	b.n	80047da <USB_EPStartXfer+0x3c2>
 800479c:	463b      	mov	r3, r7
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d119      	bne.n	80047da <USB_EPStartXfer+0x3c2>
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
 80047ac:	1d3b      	adds	r3, r7, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	4413      	add	r3, r2
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
 80047be:	463b      	mov	r3, r7
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	011a      	lsls	r2, r3, #4
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	4413      	add	r3, r2
 80047ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047ce:	623b      	str	r3, [r7, #32]
 80047d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80047da:	463b      	mov	r3, r7
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	891b      	ldrh	r3, [r3, #8]
 80047e0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047e4:	463b      	mov	r3, r7
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6959      	ldr	r1, [r3, #20]
 80047ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80047f4:	1d38      	adds	r0, r7, #4
 80047f6:	6800      	ldr	r0, [r0, #0]
 80047f8:	f001 f86c 	bl	80058d4 <USB_WritePMA>
 80047fc:	e33b      	b.n	8004e76 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047fe:	463b      	mov	r3, r7
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d164      	bne.n	80048d2 <USB_EPStartXfer+0x4ba>
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480e:	1d3b      	adds	r3, r7, #4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481c:	4413      	add	r3, r2
 800481e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004820:	463b      	mov	r3, r7
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	011a      	lsls	r2, r3, #4
 8004828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482a:	4413      	add	r3, r2
 800482c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004830:	64bb      	str	r3, [r7, #72]	; 0x48
 8004832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d112      	bne.n	8004860 <USB_EPStartXfer+0x448>
 800483a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004844:	b29a      	uxth	r2, r3
 8004846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004858:	b29a      	uxth	r2, r3
 800485a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	e057      	b.n	8004910 <USB_EPStartXfer+0x4f8>
 8004860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004864:	2b3e      	cmp	r3, #62	; 0x3e
 8004866:	d817      	bhi.n	8004898 <USB_EPStartXfer+0x480>
 8004868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d004      	beq.n	8004888 <USB_EPStartXfer+0x470>
 800487e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004882:	3301      	adds	r3, #1
 8004884:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800488c:	b29b      	uxth	r3, r3
 800488e:	029b      	lsls	r3, r3, #10
 8004890:	b29a      	uxth	r2, r3
 8004892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	e03b      	b.n	8004910 <USB_EPStartXfer+0x4f8>
 8004898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <USB_EPStartXfer+0x4a0>
 80048ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b2:	3b01      	subs	r3, #1
 80048b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048bc:	b29b      	uxth	r3, r3
 80048be:	029b      	lsls	r3, r3, #10
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	e01e      	b.n	8004910 <USB_EPStartXfer+0x4f8>
 80048d2:	463b      	mov	r3, r7
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d119      	bne.n	8004910 <USB_EPStartXfer+0x4f8>
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	657b      	str	r3, [r7, #84]	; 0x54
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f0:	4413      	add	r3, r2
 80048f2:	657b      	str	r3, [r7, #84]	; 0x54
 80048f4:	463b      	mov	r3, r7
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	011a      	lsls	r2, r3, #4
 80048fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fe:	4413      	add	r3, r2
 8004900:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004904:	653b      	str	r3, [r7, #80]	; 0x50
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490a:	b29a      	uxth	r2, r3
 800490c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004910:	463b      	mov	r3, r7
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	891b      	ldrh	r3, [r3, #8]
 8004916:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800491a:	463b      	mov	r3, r7
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6959      	ldr	r1, [r3, #20]
 8004920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004924:	b29b      	uxth	r3, r3
 8004926:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800492a:	1d38      	adds	r0, r7, #4
 800492c:	6800      	ldr	r0, [r0, #0]
 800492e:	f000 ffd1 	bl	80058d4 <USB_WritePMA>
            ep->xfer_buff += len;
 8004932:	463b      	mov	r3, r7
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493c:	441a      	add	r2, r3
 800493e:	463b      	mov	r3, r7
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004944:	463b      	mov	r3, r7
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a1a      	ldr	r2, [r3, #32]
 800494a:	463b      	mov	r3, r7
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d909      	bls.n	8004968 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004954:	463b      	mov	r3, r7
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	463b      	mov	r3, r7
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	621a      	str	r2, [r3, #32]
 8004966:	e008      	b.n	800497a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004968:	463b      	mov	r3, r7
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004972:	463b      	mov	r3, r7
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2200      	movs	r2, #0
 8004978:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800497a:	1d3b      	adds	r3, r7, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	647b      	str	r3, [r7, #68]	; 0x44
 8004980:	463b      	mov	r3, r7
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d164      	bne.n	8004a54 <USB_EPStartXfer+0x63c>
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004990:	1d3b      	adds	r3, r7, #4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004998:	b29b      	uxth	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499e:	4413      	add	r3, r2
 80049a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a2:	463b      	mov	r3, r7
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	011a      	lsls	r2, r3, #4
 80049aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ac:	4413      	add	r3, r2
 80049ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d112      	bne.n	80049e2 <USB_EPStartXfer+0x5ca>
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	e054      	b.n	8004a8c <USB_EPStartXfer+0x674>
 80049e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e6:	2b3e      	cmp	r3, #62	; 0x3e
 80049e8:	d817      	bhi.n	8004a1a <USB_EPStartXfer+0x602>
 80049ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <USB_EPStartXfer+0x5f2>
 8004a00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a04:	3301      	adds	r3, #1
 8004a06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	029b      	lsls	r3, r3, #10
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	e038      	b.n	8004a8c <USB_EPStartXfer+0x674>
 8004a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <USB_EPStartXfer+0x622>
 8004a30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a34:	3b01      	subs	r3, #1
 8004a36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	029b      	lsls	r3, r3, #10
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	e01b      	b.n	8004a8c <USB_EPStartXfer+0x674>
 8004a54:	463b      	mov	r3, r7
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d116      	bne.n	8004a8c <USB_EPStartXfer+0x674>
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6c:	4413      	add	r3, r2
 8004a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a70:	463b      	mov	r3, r7
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	011a      	lsls	r2, r3, #4
 8004a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a80:	643b      	str	r3, [r7, #64]	; 0x40
 8004a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a8c:	463b      	mov	r3, r7
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	895b      	ldrh	r3, [r3, #10]
 8004a92:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a96:	463b      	mov	r3, r7
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6959      	ldr	r1, [r3, #20]
 8004a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004aa6:	1d38      	adds	r0, r7, #4
 8004aa8:	6800      	ldr	r0, [r0, #0]
 8004aaa:	f000 ff13 	bl	80058d4 <USB_WritePMA>
 8004aae:	e1e2      	b.n	8004e76 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004aba:	1d3b      	adds	r3, r7, #4
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	463b      	mov	r3, r7
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004ad8:	1d3b      	adds	r3, r7, #4
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	463b      	mov	r3, r7
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	663b      	str	r3, [r7, #96]	; 0x60
 8004b04:	1d3b      	adds	r3, r7, #4
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b12:	4413      	add	r3, r2
 8004b14:	663b      	str	r3, [r7, #96]	; 0x60
 8004b16:	463b      	mov	r3, r7
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	011a      	lsls	r2, r3, #4
 8004b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b20:	4413      	add	r3, r2
 8004b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b32:	463b      	mov	r3, r7
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	891b      	ldrh	r3, [r3, #8]
 8004b38:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6959      	ldr	r1, [r3, #20]
 8004b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b4c:	1d38      	adds	r0, r7, #4
 8004b4e:	6800      	ldr	r0, [r0, #0]
 8004b50:	f000 fec0 	bl	80058d4 <USB_WritePMA>
 8004b54:	e18f      	b.n	8004e76 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	463b      	mov	r3, r7
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 808f 	beq.w	8004c90 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b72:	1d3b      	adds	r3, r7, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b78:	463b      	mov	r3, r7
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d164      	bne.n	8004c4c <USB_EPStartXfer+0x834>
 8004b82:	1d3b      	adds	r3, r7, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	673b      	str	r3, [r7, #112]	; 0x70
 8004b88:	1d3b      	adds	r3, r7, #4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b96:	4413      	add	r3, r2
 8004b98:	673b      	str	r3, [r7, #112]	; 0x70
 8004b9a:	463b      	mov	r3, r7
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	011a      	lsls	r2, r3, #4
 8004ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004baa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d112      	bne.n	8004bda <USB_EPStartXfer+0x7c2>
 8004bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc2:	801a      	strh	r2, [r3, #0]
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	e054      	b.n	8004c84 <USB_EPStartXfer+0x86c>
 8004bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bde:	2b3e      	cmp	r3, #62	; 0x3e
 8004be0:	d817      	bhi.n	8004c12 <USB_EPStartXfer+0x7fa>
 8004be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <USB_EPStartXfer+0x7ea>
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	029b      	lsls	r3, r3, #10
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	e038      	b.n	8004c84 <USB_EPStartXfer+0x86c>
 8004c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c20:	f003 031f 	and.w	r3, r3, #31
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <USB_EPStartXfer+0x81a>
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	029b      	lsls	r3, r3, #10
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c48:	801a      	strh	r2, [r3, #0]
 8004c4a:	e01b      	b.n	8004c84 <USB_EPStartXfer+0x86c>
 8004c4c:	463b      	mov	r3, r7
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d116      	bne.n	8004c84 <USB_EPStartXfer+0x86c>
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c64:	4413      	add	r3, r2
 8004c66:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c68:	463b      	mov	r3, r7
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	011a      	lsls	r2, r3, #4
 8004c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c72:	4413      	add	r3, r2
 8004c74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c78:	677b      	str	r3, [r7, #116]	; 0x74
 8004c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c84:	463b      	mov	r3, r7
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	895b      	ldrh	r3, [r3, #10]
 8004c8a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004c8e:	e097      	b.n	8004dc0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c90:	463b      	mov	r3, r7
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d168      	bne.n	8004d6c <USB_EPStartXfer+0x954>
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cb8:	463b      	mov	r3, r7
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	011a      	lsls	r2, r3, #4
 8004cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d112      	bne.n	8004cfa <USB_EPStartXfer+0x8e2>
 8004cd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ce2:	801a      	strh	r2, [r3, #0]
 8004ce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	e05d      	b.n	8004db6 <USB_EPStartXfer+0x99e>
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfe:	2b3e      	cmp	r3, #62	; 0x3e
 8004d00:	d817      	bhi.n	8004d32 <USB_EPStartXfer+0x91a>
 8004d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <USB_EPStartXfer+0x90a>
 8004d18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d2e:	801a      	strh	r2, [r3, #0]
 8004d30:	e041      	b.n	8004db6 <USB_EPStartXfer+0x99e>
 8004d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <USB_EPStartXfer+0x93a>
 8004d48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	029b      	lsls	r3, r3, #10
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d68:	801a      	strh	r2, [r3, #0]
 8004d6a:	e024      	b.n	8004db6 <USB_EPStartXfer+0x99e>
 8004d6c:	463b      	mov	r3, r7
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d11f      	bne.n	8004db6 <USB_EPStartXfer+0x99e>
 8004d76:	1d3b      	adds	r3, r7, #4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d8e:	4413      	add	r3, r2
 8004d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d94:	463b      	mov	r3, r7
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	011a      	lsls	r2, r3, #4
 8004d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004da0:	4413      	add	r3, r2
 8004da2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004db4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004db6:	463b      	mov	r3, r7
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	891b      	ldrh	r3, [r3, #8]
 8004dbc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6959      	ldr	r1, [r3, #20]
 8004dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004dd0:	1d38      	adds	r0, r7, #4
 8004dd2:	6800      	ldr	r0, [r0, #0]
 8004dd4:	f000 fd7e 	bl	80058d4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004dd8:	463b      	mov	r3, r7
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d122      	bne.n	8004e28 <USB_EPStartXfer+0xa10>
 8004de2:	1d3b      	adds	r3, r7, #4
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	463b      	mov	r3, r7
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004e00:	1d3b      	adds	r3, r7, #4
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	463b      	mov	r3, r7
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
 8004e26:	e026      	b.n	8004e76 <USB_EPStartXfer+0xa5e>
 8004e28:	463b      	mov	r3, r7
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d121      	bne.n	8004e76 <USB_EPStartXfer+0xa5e>
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	463b      	mov	r3, r7
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004e50:	1d3b      	adds	r3, r7, #4
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	463b      	mov	r3, r7
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	441a      	add	r2, r3
 8004e5e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004e76:	1d3b      	adds	r3, r7, #4
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f107 020e 	add.w	r2, r7, #14
 8004e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e94:	8013      	strh	r3, [r2, #0]
 8004e96:	f107 030e 	add.w	r3, r7, #14
 8004e9a:	f107 020e 	add.w	r2, r7, #14
 8004e9e:	8812      	ldrh	r2, [r2, #0]
 8004ea0:	f082 0210 	eor.w	r2, r2, #16
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	f107 030e 	add.w	r3, r7, #14
 8004eaa:	f107 020e 	add.w	r2, r7, #14
 8004eae:	8812      	ldrh	r2, [r2, #0]
 8004eb0:	f082 0220 	eor.w	r2, r2, #32
 8004eb4:	801a      	strh	r2, [r3, #0]
 8004eb6:	1d3b      	adds	r3, r7, #4
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	463b      	mov	r3, r7
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	f107 030e 	add.w	r3, r7, #14
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8013      	strh	r3, [r2, #0]
 8004ede:	e3b5      	b.n	800564c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	7b1b      	ldrb	r3, [r3, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f040 8090 	bne.w	800500c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004eec:	463b      	mov	r3, r7
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d90e      	bls.n	8004f1a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004efc:	463b      	mov	r3, r7
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004f06:	463b      	mov	r3, r7
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f10:	1ad2      	subs	r2, r2, r3
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	619a      	str	r2, [r3, #24]
 8004f18:	e008      	b.n	8004f2c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004f24:	463b      	mov	r3, r7
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f2c:	1d3b      	adds	r3, r7, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f44:	4413      	add	r3, r2
 8004f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	011a      	lsls	r2, r3, #4
 8004f52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f56:	4413      	add	r3, r2
 8004f58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d116      	bne.n	8004f96 <USB_EPStartXfer+0xb7e>
 8004f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f7a:	801a      	strh	r2, [r3, #0]
 8004f7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e32c      	b.n	80055f0 <USB_EPStartXfer+0x11d8>
 8004f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f9c:	d818      	bhi.n	8004fd0 <USB_EPStartXfer+0xbb8>
 8004f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d004      	beq.n	8004fbe <USB_EPStartXfer+0xba6>
 8004fb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	029b      	lsls	r3, r3, #10
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	e30f      	b.n	80055f0 <USB_EPStartXfer+0x11d8>
 8004fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d104      	bne.n	8004ff0 <USB_EPStartXfer+0xbd8>
 8004fe6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fea:	3b01      	subs	r3, #1
 8004fec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ff0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	029b      	lsls	r3, r3, #10
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005002:	b29a      	uxth	r2, r3
 8005004:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	e2f1      	b.n	80055f0 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800500c:	463b      	mov	r3, r7
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	78db      	ldrb	r3, [r3, #3]
 8005012:	2b02      	cmp	r3, #2
 8005014:	f040 818f 	bne.w	8005336 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005018:	463b      	mov	r3, r7
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	785b      	ldrb	r3, [r3, #1]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d175      	bne.n	800510e <USB_EPStartXfer+0xcf6>
 8005022:	1d3b      	adds	r3, r7, #4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005032:	b29b      	uxth	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800503a:	4413      	add	r3, r2
 800503c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005040:	463b      	mov	r3, r7
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	011a      	lsls	r2, r3, #4
 8005048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800504c:	4413      	add	r3, r2
 800504e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005056:	463b      	mov	r3, r7
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d116      	bne.n	800508e <USB_EPStartXfer+0xc76>
 8005060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800506c:	b29a      	uxth	r2, r3
 800506e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005084:	b29a      	uxth	r2, r3
 8005086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	e065      	b.n	800515a <USB_EPStartXfer+0xd42>
 800508e:	463b      	mov	r3, r7
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b3e      	cmp	r3, #62	; 0x3e
 8005096:	d81a      	bhi.n	80050ce <USB_EPStartXfer+0xcb6>
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050a4:	463b      	mov	r3, r7
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <USB_EPStartXfer+0xca4>
 80050b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050b6:	3301      	adds	r3, #1
 80050b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	029b      	lsls	r3, r3, #10
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	e045      	b.n	800515a <USB_EPStartXfer+0xd42>
 80050ce:	463b      	mov	r3, r7
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050da:	463b      	mov	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <USB_EPStartXfer+0xcda>
 80050e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050ec:	3b01      	subs	r3, #1
 80050ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	029b      	lsls	r3, r3, #10
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005104:	b29a      	uxth	r2, r3
 8005106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	e025      	b.n	800515a <USB_EPStartXfer+0xd42>
 800510e:	463b      	mov	r3, r7
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d120      	bne.n	800515a <USB_EPStartXfer+0xd42>
 8005118:	1d3b      	adds	r3, r7, #4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005128:	b29b      	uxth	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005130:	4413      	add	r3, r2
 8005132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005136:	463b      	mov	r3, r7
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	011a      	lsls	r2, r3, #4
 800513e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005142:	4413      	add	r3, r2
 8005144:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800514c:	463b      	mov	r3, r7
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	b29a      	uxth	r2, r3
 8005154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005162:	463b      	mov	r3, r7
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d175      	bne.n	8005258 <USB_EPStartXfer+0xe40>
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517c:	b29b      	uxth	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005184:	4413      	add	r3, r2
 8005186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800518a:	463b      	mov	r3, r7
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005196:	4413      	add	r3, r2
 8005198:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800519c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051a0:	463b      	mov	r3, r7
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d116      	bne.n	80051d8 <USB_EPStartXfer+0xdc0>
 80051aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051bc:	801a      	strh	r2, [r3, #0]
 80051be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e061      	b.n	800529c <USB_EPStartXfer+0xe84>
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b3e      	cmp	r3, #62	; 0x3e
 80051e0:	d81a      	bhi.n	8005218 <USB_EPStartXfer+0xe00>
 80051e2:	463b      	mov	r3, r7
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	085b      	lsrs	r3, r3, #1
 80051ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <USB_EPStartXfer+0xdee>
 80051fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005200:	3301      	adds	r3, #1
 8005202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520a:	b29b      	uxth	r3, r3
 800520c:	029b      	lsls	r3, r3, #10
 800520e:	b29a      	uxth	r2, r3
 8005210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	e041      	b.n	800529c <USB_EPStartXfer+0xe84>
 8005218:	463b      	mov	r3, r7
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005224:	463b      	mov	r3, r7
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2b00      	cmp	r3, #0
 8005230:	d104      	bne.n	800523c <USB_EPStartXfer+0xe24>
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005236:	3b01      	subs	r3, #1
 8005238:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800523c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005240:	b29b      	uxth	r3, r3
 8005242:	029b      	lsls	r3, r3, #10
 8005244:	b29b      	uxth	r3, r3
 8005246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524e:	b29a      	uxth	r2, r3
 8005250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e021      	b.n	800529c <USB_EPStartXfer+0xe84>
 8005258:	463b      	mov	r3, r7
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	785b      	ldrb	r3, [r3, #1]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d11c      	bne.n	800529c <USB_EPStartXfer+0xe84>
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526a:	b29b      	uxth	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005272:	4413      	add	r3, r2
 8005274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005278:	463b      	mov	r3, r7
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	011a      	lsls	r2, r3, #4
 8005280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005284:	4413      	add	r3, r2
 8005286:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800528a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800528e:	463b      	mov	r3, r7
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	b29a      	uxth	r2, r3
 8005296:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800529a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800529c:	463b      	mov	r3, r7
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 81a4 	beq.w	80055f0 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80052a8:	1d3b      	adds	r3, r7, #4
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	463b      	mov	r3, r7
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80052bc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80052c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <USB_EPStartXfer+0xebc>
 80052c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10d      	bne.n	80052f0 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80052d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80052d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f040 8187 	bne.w	80055f0 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80052e2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f040 8180 	bne.w	80055f0 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80052f0:	1d3b      	adds	r3, r7, #4
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	463b      	mov	r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800530e:	1d3b      	adds	r3, r7, #4
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	463b      	mov	r3, r7
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	441a      	add	r2, r3
 800531c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005330:	b29b      	uxth	r3, r3
 8005332:	8013      	strh	r3, [r2, #0]
 8005334:	e15c      	b.n	80055f0 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005336:	463b      	mov	r3, r7
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	78db      	ldrb	r3, [r3, #3]
 800533c:	2b01      	cmp	r3, #1
 800533e:	f040 8155 	bne.w	80055ec <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005342:	463b      	mov	r3, r7
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	463b      	mov	r3, r7
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	429a      	cmp	r2, r3
 8005350:	d90e      	bls.n	8005370 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005352:	463b      	mov	r3, r7
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005366:	1ad2      	subs	r2, r2, r3
 8005368:	463b      	mov	r3, r7
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	619a      	str	r2, [r3, #24]
 800536e:	e008      	b.n	8005382 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005370:	463b      	mov	r3, r7
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800537a:	463b      	mov	r3, r7
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2200      	movs	r2, #0
 8005380:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005382:	463b      	mov	r3, r7
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d16f      	bne.n	800546c <USB_EPStartXfer+0x1054>
 800538c:	1d3b      	adds	r3, r7, #4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005394:	1d3b      	adds	r3, r7, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539c:	b29b      	uxth	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053a4:	4413      	add	r3, r2
 80053a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053aa:	463b      	mov	r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	011a      	lsls	r2, r3, #4
 80053b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053b6:	4413      	add	r3, r2
 80053b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d116      	bne.n	80053f6 <USB_EPStartXfer+0xfde>
 80053c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e05f      	b.n	80054b6 <USB_EPStartXfer+0x109e>
 80053f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fa:	2b3e      	cmp	r3, #62	; 0x3e
 80053fc:	d818      	bhi.n	8005430 <USB_EPStartXfer+0x1018>
 80053fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d004      	beq.n	800541e <USB_EPStartXfer+0x1006>
 8005414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005418:	3301      	adds	r3, #1
 800541a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800541e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005422:	b29b      	uxth	r3, r3
 8005424:	029b      	lsls	r3, r3, #10
 8005426:	b29a      	uxth	r2, r3
 8005428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	e042      	b.n	80054b6 <USB_EPStartXfer+0x109e>
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800543a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	2b00      	cmp	r3, #0
 8005444:	d104      	bne.n	8005450 <USB_EPStartXfer+0x1038>
 8005446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800544a:	3b01      	subs	r3, #1
 800544c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005454:	b29b      	uxth	r3, r3
 8005456:	029b      	lsls	r3, r3, #10
 8005458:	b29b      	uxth	r3, r3
 800545a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005462:	b29a      	uxth	r2, r3
 8005464:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	e024      	b.n	80054b6 <USB_EPStartXfer+0x109e>
 800546c:	463b      	mov	r3, r7
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	785b      	ldrb	r3, [r3, #1]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d11f      	bne.n	80054b6 <USB_EPStartXfer+0x109e>
 8005476:	1d3b      	adds	r3, r7, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005486:	b29b      	uxth	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800548e:	4413      	add	r3, r2
 8005490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005494:	463b      	mov	r3, r7
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	011a      	lsls	r2, r3, #4
 800549c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054a0:	4413      	add	r3, r2
 80054a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054b4:	801a      	strh	r2, [r3, #0]
 80054b6:	1d3b      	adds	r3, r7, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054be:	463b      	mov	r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d16f      	bne.n	80055a8 <USB_EPStartXfer+0x1190>
 80054c8:	1d3b      	adds	r3, r7, #4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054d0:	1d3b      	adds	r3, r7, #4
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d8:	b29b      	uxth	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054e0:	4413      	add	r3, r2
 80054e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	011a      	lsls	r2, r3, #4
 80054ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054f2:	4413      	add	r3, r2
 80054f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d116      	bne.n	8005532 <USB_EPStartXfer+0x111a>
 8005504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005510:	b29a      	uxth	r2, r3
 8005512:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005528:	b29a      	uxth	r2, r3
 800552a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	e05e      	b.n	80055f0 <USB_EPStartXfer+0x11d8>
 8005532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005536:	2b3e      	cmp	r3, #62	; 0x3e
 8005538:	d818      	bhi.n	800556c <USB_EPStartXfer+0x1154>
 800553a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <USB_EPStartXfer+0x1142>
 8005550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005554:	3301      	adds	r3, #1
 8005556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800555a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555e:	b29b      	uxth	r3, r3
 8005560:	029b      	lsls	r3, r3, #10
 8005562:	b29a      	uxth	r2, r3
 8005564:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005568:	801a      	strh	r2, [r3, #0]
 800556a:	e041      	b.n	80055f0 <USB_EPStartXfer+0x11d8>
 800556c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	2b00      	cmp	r3, #0
 8005580:	d104      	bne.n	800558c <USB_EPStartXfer+0x1174>
 8005582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005586:	3b01      	subs	r3, #1
 8005588:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800558c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005590:	b29b      	uxth	r3, r3
 8005592:	029b      	lsls	r3, r3, #10
 8005594:	b29b      	uxth	r3, r3
 8005596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559e:	b29a      	uxth	r2, r3
 80055a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	e023      	b.n	80055f0 <USB_EPStartXfer+0x11d8>
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d11e      	bne.n	80055f0 <USB_EPStartXfer+0x11d8>
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055c2:	4413      	add	r3, r2
 80055c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	011a      	lsls	r2, r3, #4
 80055d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e001      	b.n	80055f0 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e02e      	b.n	800564e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	463b      	mov	r3, r7
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800560e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005612:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005616:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800561a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800561e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005622:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	463b      	mov	r3, r7
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	441a      	add	r2, r3
 8005634:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005648:	b29b      	uxth	r3, r3
 800564a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d020      	beq.n	80056ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005680:	81bb      	strh	r3, [r7, #12]
 8005682:	89bb      	ldrh	r3, [r7, #12]
 8005684:	f083 0310 	eor.w	r3, r3, #16
 8005688:	81bb      	strh	r3, [r7, #12]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	89bb      	ldrh	r3, [r7, #12]
 8005696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8013      	strh	r3, [r2, #0]
 80056aa:	e01f      	b.n	80056ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	81fb      	strh	r3, [r7, #14]
 80056c4:	89fb      	ldrh	r3, [r7, #14]
 80056c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056ca:	81fb      	strh	r3, [r7, #14]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	89fb      	ldrh	r3, [r7, #14]
 80056d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	7b1b      	ldrb	r3, [r3, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 809d 	bne.w	8005846 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d04c      	beq.n	80057ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	823b      	strh	r3, [r7, #16]
 8005722:	8a3b      	ldrh	r3, [r7, #16]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01b      	beq.n	8005764 <USB_EPClearStall+0x6c>
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	81fb      	strh	r3, [r7, #14]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	441a      	add	r2, r3
 800574e:	89fb      	ldrh	r3, [r7, #14]
 8005750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005760:	b29b      	uxth	r3, r3
 8005762:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	78db      	ldrb	r3, [r3, #3]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d06c      	beq.n	8005846 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005782:	81bb      	strh	r3, [r7, #12]
 8005784:	89bb      	ldrh	r3, [r7, #12]
 8005786:	f083 0320 	eor.w	r3, r3, #32
 800578a:	81bb      	strh	r3, [r7, #12]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	441a      	add	r2, r3
 8005796:	89bb      	ldrh	r3, [r7, #12]
 8005798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	8013      	strh	r3, [r2, #0]
 80057ac:	e04b      	b.n	8005846 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	82fb      	strh	r3, [r7, #22]
 80057bc:	8afb      	ldrh	r3, [r7, #22]
 80057be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01b      	beq.n	80057fe <USB_EPClearStall+0x106>
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057dc:	82bb      	strh	r3, [r7, #20]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	441a      	add	r2, r3
 80057e8:	8abb      	ldrh	r3, [r7, #20]
 80057ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005814:	827b      	strh	r3, [r7, #18]
 8005816:	8a7b      	ldrh	r3, [r7, #18]
 8005818:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800581c:	827b      	strh	r3, [r7, #18]
 800581e:	8a7b      	ldrh	r3, [r7, #18]
 8005820:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005824:	827b      	strh	r3, [r7, #18]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	441a      	add	r2, r3
 8005830:	8a7b      	ldrh	r3, [r7, #18]
 8005832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005842:	b29b      	uxth	r3, r3
 8005844:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	460b      	mov	r3, r1
 800585c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d103      	bne.n	800586c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2280      	movs	r2, #128	; 0x80
 8005868:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr

0800588c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b08d      	sub	sp, #52	; 0x34
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4611      	mov	r1, r2
 80058e0:	461a      	mov	r2, r3
 80058e2:	460b      	mov	r3, r1
 80058e4:	80fb      	strh	r3, [r7, #6]
 80058e6:	4613      	mov	r3, r2
 80058e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058ea:	88bb      	ldrh	r3, [r7, #4]
 80058ec:	3301      	adds	r3, #1
 80058ee:	085b      	lsrs	r3, r3, #1
 80058f0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	005a      	lsls	r2, r3, #1
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800590c:	e01e      	b.n	800594c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	3301      	adds	r3, #1
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	b29a      	uxth	r2, r3
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	3302      	adds	r3, #2
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	3302      	adds	r3, #2
 800593e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	3301      	adds	r3, #1
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	3b01      	subs	r3, #1
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1dd      	bne.n	800590e <USB_WritePMA+0x3a>
  }
}
 8005952:	bf00      	nop
 8005954:	3734      	adds	r7, #52	; 0x34
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr

0800595c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800595c:	b480      	push	{r7}
 800595e:	b08b      	sub	sp, #44	; 0x2c
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4611      	mov	r1, r2
 8005968:	461a      	mov	r2, r3
 800596a:	460b      	mov	r3, r1
 800596c:	80fb      	strh	r3, [r7, #6]
 800596e:	4613      	mov	r3, r2
 8005970:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005972:	88bb      	ldrh	r3, [r7, #4]
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	b29b      	uxth	r3, r3
 8005978:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	005a      	lsls	r2, r3, #1
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800598e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
 8005994:	e01b      	b.n	80059ce <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	3302      	adds	r3, #2
 80059a2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	3301      	adds	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	3301      	adds	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	3302      	adds	r3, #2
 80059c6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	3b01      	subs	r3, #1
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e0      	bne.n	8005996 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80059d4:	88bb      	ldrh	r3, [r7, #4]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	701a      	strb	r2, [r3, #0]
  }
}
 80059f0:	bf00      	nop
 80059f2:	372c      	adds	r7, #44	; 0x2c
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	460b      	mov	r3, r1
 8005a04:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	7c1b      	ldrb	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d115      	bne.n	8005a3e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a16:	2202      	movs	r2, #2
 8005a18:	2181      	movs	r1, #129	; 0x81
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 fe1f 	bl	800765e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 fe15 	bl	800765e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005a3c:	e012      	b.n	8005a64 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a3e:	2340      	movs	r3, #64	; 0x40
 8005a40:	2202      	movs	r2, #2
 8005a42:	2181      	movs	r1, #129	; 0x81
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 fe0a 	bl	800765e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a50:	2340      	movs	r3, #64	; 0x40
 8005a52:	2202      	movs	r2, #2
 8005a54:	2101      	movs	r1, #1
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 fe01 	bl	800765e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a64:	2308      	movs	r3, #8
 8005a66:	2203      	movs	r2, #3
 8005a68:	2182      	movs	r1, #130	; 0x82
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f001 fdf7 	bl	800765e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a76:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a7a:	f001 ff17 	bl	80078ac <USBD_static_malloc>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
 8005a94:	e026      	b.n	8005ae4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	7c1b      	ldrb	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aca:	2101      	movs	r1, #1
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 feb7 	bl	8007840 <USBD_LL_PrepareReceive>
 8005ad2:	e007      	b.n	8005ae4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ada:	2340      	movs	r3, #64	; 0x40
 8005adc:	2101      	movs	r1, #1
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f001 feae 	bl	8007840 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	460b      	mov	r3, r1
 8005af8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005afe:	2181      	movs	r1, #129	; 0x81
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 fdd2 	bl	80076aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 fdcb 	bl	80076aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b1c:	2182      	movs	r1, #130	; 0x82
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 fdc3 	bl	80076aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 febd 	bl	80078c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d039      	beq.n	8005bfa <USBD_CDC_Setup+0x9e>
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d17c      	bne.n	8005c84 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	88db      	ldrh	r3, [r3, #6]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d029      	beq.n	8005be6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b25b      	sxtb	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da11      	bge.n	8005bc0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005ba8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	88d2      	ldrh	r2, [r2, #6]
 8005bae:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bb0:	6939      	ldr	r1, [r7, #16]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	88db      	ldrh	r3, [r3, #6]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 f9c9 	bl	8006f50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005bbe:	e068      	b.n	8005c92 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	785a      	ldrb	r2, [r3, #1]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	88db      	ldrh	r3, [r3, #6]
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bd6:	6939      	ldr	r1, [r7, #16]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	88db      	ldrh	r3, [r3, #6]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 f9e4 	bl	8006fac <USBD_CtlPrepareRx>
      break;
 8005be4:	e055      	b.n	8005c92 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	7850      	ldrb	r0, [r2, #1]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	4798      	blx	r3
      break;
 8005bf8:	e04b      	b.n	8005c92 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b0a      	cmp	r3, #10
 8005c00:	d017      	beq.n	8005c32 <USBD_CDC_Setup+0xd6>
 8005c02:	2b0b      	cmp	r3, #11
 8005c04:	d029      	beq.n	8005c5a <USBD_CDC_Setup+0xfe>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d133      	bne.n	8005c72 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d107      	bne.n	8005c24 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c14:	f107 030c 	add.w	r3, r7, #12
 8005c18:	2202      	movs	r2, #2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 f997 	bl	8006f50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c22:	e02e      	b.n	8005c82 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 f928 	bl	8006e7c <USBD_CtlError>
            ret = USBD_FAIL;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	75fb      	strb	r3, [r7, #23]
          break;
 8005c30:	e027      	b.n	8005c82 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d107      	bne.n	8005c4c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c3c:	f107 030f 	add.w	r3, r7, #15
 8005c40:	2201      	movs	r2, #1
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 f983 	bl	8006f50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c4a:	e01a      	b.n	8005c82 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005c4c:	6839      	ldr	r1, [r7, #0]
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 f914 	bl	8006e7c <USBD_CtlError>
            ret = USBD_FAIL;
 8005c54:	2302      	movs	r3, #2
 8005c56:	75fb      	strb	r3, [r7, #23]
          break;
 8005c58:	e013      	b.n	8005c82 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d00d      	beq.n	8005c80 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005c64:	6839      	ldr	r1, [r7, #0]
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 f908 	bl	8006e7c <USBD_CtlError>
            ret = USBD_FAIL;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c70:	e006      	b.n	8005c80 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 f901 	bl	8006e7c <USBD_CtlError>
          ret = USBD_FAIL;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c7e:	e000      	b.n	8005c82 <USBD_CDC_Setup+0x126>
          break;
 8005c80:	bf00      	nop
      }
      break;
 8005c82:	e006      	b.n	8005c92 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 f8f8 	bl	8006e7c <USBD_CtlError>
      ret = USBD_FAIL;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c90:	bf00      	nop
  }

  return ret;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cb6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d03a      	beq.n	8005d38 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cc2:	78fa      	ldrb	r2, [r7, #3]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	331c      	adds	r3, #28
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d029      	beq.n	8005d2c <USBD_CDC_DataIn+0x90>
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	331c      	adds	r3, #28
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	78f9      	ldrb	r1, [r7, #3]
 8005cec:	68b8      	ldr	r0, [r7, #8]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4403      	add	r3, r0
 8005cf8:	3338      	adds	r3, #56	; 0x38
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d00:	fb03 f301 	mul.w	r3, r3, r1
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d110      	bne.n	8005d2c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005d0a:	78fa      	ldrb	r2, [r7, #3]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	331c      	adds	r3, #28
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d1e:	78f9      	ldrb	r1, [r7, #3]
 8005d20:	2300      	movs	r3, #0
 8005d22:	2200      	movs	r2, #0
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 fd68 	bl	80077fa <USBD_LL_Transmit>
 8005d2a:	e003      	b.n	8005d34 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	e000      	b.n	8005d3a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d38:	2302      	movs	r3, #2
  }
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f001 fd93 	bl	8007886 <USBD_LL_GetRxDataSize>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00d      	beq.n	8005d8e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d86:	4611      	mov	r1, r2
 8005d88:	4798      	blx	r3

    return USBD_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e000      	b.n	8005d90 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d8e:	2302      	movs	r3, #2
  }
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d015      	beq.n	8005dde <USBD_CDC_EP0_RxReady+0x46>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005db8:	2bff      	cmp	r3, #255	; 0xff
 8005dba:	d010      	beq.n	8005dde <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005dca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dd2:	b292      	uxth	r2, r2
 8005dd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	22ff      	movs	r2, #255	; 0xff
 8005dda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2243      	movs	r2, #67	; 0x43
 8005df4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005df6:	4b03      	ldr	r3, [pc, #12]	; (8005e04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000094 	.word	0x20000094

08005e08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2243      	movs	r2, #67	; 0x43
 8005e14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005e16:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000050 	.word	0x20000050

08005e28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2243      	movs	r2, #67	; 0x43
 8005e34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e36:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	200000d8 	.word	0x200000d8

08005e48 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	220a      	movs	r2, #10
 8005e54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e56:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	2000000c 	.word	0x2000000c

08005e68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005e72:	2302      	movs	r3, #2
 8005e74:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr

08005eec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d017      	beq.n	8005f36 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7c1b      	ldrb	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f18:	2101      	movs	r1, #1
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fc90 	bl	8007840 <USBD_LL_PrepareReceive>
 8005f20:	e007      	b.n	8005f32 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f28:	2340      	movs	r3, #64	; 0x40
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 fc87 	bl	8007840 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e000      	b.n	8005f38 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f36:	2302      	movs	r3, #2
  }
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f54:	2302      	movs	r3, #2
 8005f56:	e01a      	b.n	8005f8e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	79fa      	ldrb	r2, [r7, #7]
 8005f84:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f001 faf4 	bl	8007574 <USBD_LL_Init>

  return USBD_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d006      	beq.n	8005fb8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]
 8005fb6:	e001      	b.n	8005fbc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr

08005fc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 fb29 	bl	8007628 <USBD_LL_Start>

  return USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006000:	2302      	movs	r3, #2
 8006002:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	4611      	mov	r1, r2
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	460b      	mov	r3, r1
 800603c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	78fa      	ldrb	r2, [r7, #3]
 8006048:	4611      	mov	r1, r2
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3

  return USBD_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 feca 	bl	8006e04 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	2b01      	cmp	r3, #1
 8006092:	d00c      	beq.n	80060ae <USBD_LL_SetupStage+0x56>
 8006094:	2b01      	cmp	r3, #1
 8006096:	d302      	bcc.n	800609e <USBD_LL_SetupStage+0x46>
 8006098:	2b02      	cmp	r3, #2
 800609a:	d010      	beq.n	80060be <USBD_LL_SetupStage+0x66>
 800609c:	e017      	b.n	80060ce <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f9ca 	bl	8006440 <USBD_StdDevReq>
      break;
 80060ac:	e01a      	b.n	80060e4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa2c 	bl	8006514 <USBD_StdItfReq>
      break;
 80060bc:	e012      	b.n	80060e4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa6a 	bl	80065a0 <USBD_StdEPReq>
      break;
 80060cc:	e00a      	b.n	80060e4 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 fb03 	bl	80076e8 <USBD_LL_StallEP>
      break;
 80060e2:	bf00      	nop
  }

  return USBD_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	460b      	mov	r3, r1
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d14b      	bne.n	800619a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006108:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006110:	2b03      	cmp	r3, #3
 8006112:	d134      	bne.n	800617e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	429a      	cmp	r2, r3
 800611e:	d919      	bls.n	8006154 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	1ad2      	subs	r2, r2, r3
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006136:	429a      	cmp	r2, r3
 8006138:	d203      	bcs.n	8006142 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800613e:	b29b      	uxth	r3, r3
 8006140:	e002      	b.n	8006148 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006146:	b29b      	uxth	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 ff4b 	bl	8006fe8 <USBD_CtlContinueRx>
 8006152:	e038      	b.n	80061c6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006166:	2b03      	cmp	r3, #3
 8006168:	d105      	bne.n	8006176 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 ff48 	bl	800700c <USBD_CtlSendStatus>
 800617c:	e023      	b.n	80061c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006184:	2b05      	cmp	r3, #5
 8006186:	d11e      	bne.n	80061c6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006190:	2100      	movs	r1, #0
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f001 faa8 	bl	80076e8 <USBD_LL_StallEP>
 8006198:	e015      	b.n	80061c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00d      	beq.n	80061c2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d108      	bne.n	80061c2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	7afa      	ldrb	r2, [r7, #11]
 80061ba:	4611      	mov	r1, r2
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	4798      	blx	r3
 80061c0:	e001      	b.n	80061c6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061c2:	2302      	movs	r3, #2
 80061c4:	e000      	b.n	80061c8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	460b      	mov	r3, r1
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80061de:	7afb      	ldrb	r3, [r7, #11]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d17f      	bne.n	80062e4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3314      	adds	r3, #20
 80061e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d15c      	bne.n	80062ae <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d915      	bls.n	800622c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	1ad2      	subs	r2, r2, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	b29b      	uxth	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 feb5 	bl	8006f88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800621e:	2300      	movs	r3, #0
 8006220:	2200      	movs	r2, #0
 8006222:	2100      	movs	r1, #0
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f001 fb0b 	bl	8007840 <USBD_LL_PrepareReceive>
 800622a:	e04e      	b.n	80062ca <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	6912      	ldr	r2, [r2, #16]
 8006234:	fbb3 f1f2 	udiv	r1, r3, r2
 8006238:	fb02 f201 	mul.w	r2, r2, r1
 800623c:	1a9b      	subs	r3, r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11c      	bne.n	800627c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800624a:	429a      	cmp	r2, r3
 800624c:	d316      	bcc.n	800627c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006258:	429a      	cmp	r2, r3
 800625a:	d20f      	bcs.n	800627c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800625c:	2200      	movs	r2, #0
 800625e:	2100      	movs	r1, #0
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 fe91 	bl	8006f88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800626e:	2300      	movs	r3, #0
 8006270:	2200      	movs	r2, #0
 8006272:	2100      	movs	r1, #0
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f001 fae3 	bl	8007840 <USBD_LL_PrepareReceive>
 800627a:	e026      	b.n	80062ca <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800628e:	2b03      	cmp	r3, #3
 8006290:	d105      	bne.n	800629e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800629e:	2180      	movs	r1, #128	; 0x80
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f001 fa21 	bl	80076e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fec3 	bl	8007032 <USBD_CtlReceiveStatus>
 80062ac:	e00d      	b.n	80062ca <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d004      	beq.n	80062c2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80062c2:	2180      	movs	r1, #128	; 0x80
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f001 fa0f 	bl	80076e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d11d      	bne.n	8006310 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff fe83 	bl	8005fe0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062e2:	e015      	b.n	8006310 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00d      	beq.n	800630c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d108      	bne.n	800630c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	7afa      	ldrb	r2, [r7, #11]
 8006304:	4611      	mov	r1, r2
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	4798      	blx	r3
 800630a:	e001      	b.n	8006310 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800630c:	2302      	movs	r3, #2
 800630e:	e000      	b.n	8006312 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006322:	2340      	movs	r3, #64	; 0x40
 8006324:	2200      	movs	r2, #0
 8006326:	2100      	movs	r1, #0
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 f998 	bl	800765e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2240      	movs	r2, #64	; 0x40
 800633a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800633e:	2340      	movs	r3, #64	; 0x40
 8006340:	2200      	movs	r2, #0
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 f98a 	bl	800765e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2240      	movs	r2, #64	; 0x40
 8006354:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d009      	beq.n	8006392 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6852      	ldr	r2, [r2, #4]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	4611      	mov	r1, r2
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
  }

  return USBD_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr

080063ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2204      	movs	r2, #4
 80063d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr

080063e2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d105      	bne.n	8006400 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr

0800640c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800641a:	2b03      	cmp	r3, #3
 800641c:	d10b      	bne.n	8006436 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006456:	2b20      	cmp	r3, #32
 8006458:	d004      	beq.n	8006464 <USBD_StdDevReq+0x24>
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d002      	beq.n	8006464 <USBD_StdDevReq+0x24>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d008      	beq.n	8006474 <USBD_StdDevReq+0x34>
 8006462:	e04c      	b.n	80064fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	4798      	blx	r3
      break;
 8006472:	e049      	b.n	8006508 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b09      	cmp	r3, #9
 800647a:	d83a      	bhi.n	80064f2 <USBD_StdDevReq+0xb2>
 800647c:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <USBD_StdDevReq+0x44>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	080064d5 	.word	0x080064d5
 8006488:	080064e9 	.word	0x080064e9
 800648c:	080064f3 	.word	0x080064f3
 8006490:	080064df 	.word	0x080064df
 8006494:	080064f3 	.word	0x080064f3
 8006498:	080064b7 	.word	0x080064b7
 800649c:	080064ad 	.word	0x080064ad
 80064a0:	080064f3 	.word	0x080064f3
 80064a4:	080064cb 	.word	0x080064cb
 80064a8:	080064c1 	.word	0x080064c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9d4 	bl	800685c <USBD_GetDescriptor>
          break;
 80064b4:	e022      	b.n	80064fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fb37 	bl	8006b2c <USBD_SetAddress>
          break;
 80064be:	e01d      	b.n	80064fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fb74 	bl	8006bb0 <USBD_SetConfig>
          break;
 80064c8:	e018      	b.n	80064fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fbfd 	bl	8006ccc <USBD_GetConfig>
          break;
 80064d2:	e013      	b.n	80064fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fc2c 	bl	8006d34 <USBD_GetStatus>
          break;
 80064dc:	e00e      	b.n	80064fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fc5a 	bl	8006d9a <USBD_SetFeature>
          break;
 80064e6:	e009      	b.n	80064fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fc69 	bl	8006dc2 <USBD_ClrFeature>
          break;
 80064f0:	e004      	b.n	80064fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fcc1 	bl	8006e7c <USBD_CtlError>
          break;
 80064fa:	bf00      	nop
      }
      break;
 80064fc:	e004      	b.n	8006508 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fcbb 	bl	8006e7c <USBD_CtlError>
      break;
 8006506:	bf00      	nop
  }

  return ret;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop

08006514 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800652a:	2b20      	cmp	r3, #32
 800652c:	d003      	beq.n	8006536 <USBD_StdItfReq+0x22>
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	d001      	beq.n	8006536 <USBD_StdItfReq+0x22>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d12a      	bne.n	800658c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653c:	3b01      	subs	r3, #1
 800653e:	2b02      	cmp	r3, #2
 8006540:	d81d      	bhi.n	800657e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	889b      	ldrh	r3, [r3, #4]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d813      	bhi.n	8006574 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	4798      	blx	r3
 800655a:	4603      	mov	r3, r0
 800655c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	88db      	ldrh	r3, [r3, #6]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d110      	bne.n	8006588 <USBD_StdItfReq+0x74>
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10d      	bne.n	8006588 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fd4d 	bl	800700c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006572:	e009      	b.n	8006588 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fc80 	bl	8006e7c <USBD_CtlError>
          break;
 800657c:	e004      	b.n	8006588 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fc7b 	bl	8006e7c <USBD_CtlError>
          break;
 8006586:	e000      	b.n	800658a <USBD_StdItfReq+0x76>
          break;
 8006588:	bf00      	nop
      }
      break;
 800658a:	e004      	b.n	8006596 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fc74 	bl	8006e7c <USBD_CtlError>
      break;
 8006594:	bf00      	nop
  }

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	889b      	ldrh	r3, [r3, #4]
 80065b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d004      	beq.n	80065ca <USBD_StdEPReq+0x2a>
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d002      	beq.n	80065ca <USBD_StdEPReq+0x2a>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d008      	beq.n	80065da <USBD_StdEPReq+0x3a>
 80065c8:	e13d      	b.n	8006846 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
      break;
 80065d8:	e13a      	b.n	8006850 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d10a      	bne.n	80065fc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	e12a      	b.n	8006852 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	785b      	ldrb	r3, [r3, #1]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d03e      	beq.n	8006682 <USBD_StdEPReq+0xe2>
 8006604:	2b03      	cmp	r3, #3
 8006606:	d002      	beq.n	800660e <USBD_StdEPReq+0x6e>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d070      	beq.n	80066ee <USBD_StdEPReq+0x14e>
 800660c:	e115      	b.n	800683a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006614:	2b02      	cmp	r3, #2
 8006616:	d002      	beq.n	800661e <USBD_StdEPReq+0x7e>
 8006618:	2b03      	cmp	r3, #3
 800661a:	d015      	beq.n	8006648 <USBD_StdEPReq+0xa8>
 800661c:	e02b      	b.n	8006676 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00c      	beq.n	800663e <USBD_StdEPReq+0x9e>
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	2b80      	cmp	r3, #128	; 0x80
 8006628:	d009      	beq.n	800663e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 f85a 	bl	80076e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006634:	2180      	movs	r1, #128	; 0x80
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 f856 	bl	80076e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800663c:	e020      	b.n	8006680 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fc1b 	bl	8006e7c <USBD_CtlError>
              break;
 8006646:	e01b      	b.n	8006680 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	885b      	ldrh	r3, [r3, #2]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10e      	bne.n	800666e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006650:	7bbb      	ldrb	r3, [r7, #14]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <USBD_StdEPReq+0xce>
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	2b80      	cmp	r3, #128	; 0x80
 800665a:	d008      	beq.n	800666e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	88db      	ldrh	r3, [r3, #6]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 f83d 	bl	80076e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fccc 	bl	800700c <USBD_CtlSendStatus>

              break;
 8006674:	e004      	b.n	8006680 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fbff 	bl	8006e7c <USBD_CtlError>
              break;
 800667e:	bf00      	nop
          }
          break;
 8006680:	e0e0      	b.n	8006844 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006688:	2b02      	cmp	r3, #2
 800668a:	d002      	beq.n	8006692 <USBD_StdEPReq+0xf2>
 800668c:	2b03      	cmp	r3, #3
 800668e:	d015      	beq.n	80066bc <USBD_StdEPReq+0x11c>
 8006690:	e026      	b.n	80066e0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006692:	7bbb      	ldrb	r3, [r7, #14]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00c      	beq.n	80066b2 <USBD_StdEPReq+0x112>
 8006698:	7bbb      	ldrb	r3, [r7, #14]
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d009      	beq.n	80066b2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 f820 	bl	80076e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80066a8:	2180      	movs	r1, #128	; 0x80
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 f81c 	bl	80076e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066b0:	e01c      	b.n	80066ec <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fbe1 	bl	8006e7c <USBD_CtlError>
              break;
 80066ba:	e017      	b.n	80066ec <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	885b      	ldrh	r3, [r3, #2]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d112      	bne.n	80066ea <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 f827 	bl	8007726 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fc97 	bl	800700c <USBD_CtlSendStatus>
              }
              break;
 80066de:	e004      	b.n	80066ea <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fbca 	bl	8006e7c <USBD_CtlError>
              break;
 80066e8:	e000      	b.n	80066ec <USBD_StdEPReq+0x14c>
              break;
 80066ea:	bf00      	nop
          }
          break;
 80066ec:	e0aa      	b.n	8006844 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d002      	beq.n	80066fe <USBD_StdEPReq+0x15e>
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d032      	beq.n	8006762 <USBD_StdEPReq+0x1c2>
 80066fc:	e097      	b.n	800682e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <USBD_StdEPReq+0x174>
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	2b80      	cmp	r3, #128	; 0x80
 8006708:	d004      	beq.n	8006714 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fbb5 	bl	8006e7c <USBD_CtlError>
                break;
 8006712:	e091      	b.n	8006838 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006718:	2b00      	cmp	r3, #0
 800671a:	da0b      	bge.n	8006734 <USBD_StdEPReq+0x194>
 800671c:	7bbb      	ldrb	r3, [r7, #14]
 800671e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	3310      	adds	r3, #16
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	4413      	add	r3, r2
 8006730:	3304      	adds	r3, #4
 8006732:	e00b      	b.n	800674c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	4413      	add	r3, r2
 800674a:	3304      	adds	r3, #4
 800674c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2202      	movs	r2, #2
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fbf8 	bl	8006f50 <USBD_CtlSendData>
              break;
 8006760:	e06a      	b.n	8006838 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006762:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006766:	2b00      	cmp	r3, #0
 8006768:	da11      	bge.n	800678e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	3318      	adds	r3, #24
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d117      	bne.n	80067b4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fb78 	bl	8006e7c <USBD_CtlError>
                  break;
 800678c:	e054      	b.n	8006838 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	f003 020f 	and.w	r2, r3, #15
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d104      	bne.n	80067b4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fb65 	bl	8006e7c <USBD_CtlError>
                  break;
 80067b2:	e041      	b.n	8006838 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	da0b      	bge.n	80067d4 <USBD_StdEPReq+0x234>
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	3310      	adds	r3, #16
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	4413      	add	r3, r2
 80067d0:	3304      	adds	r3, #4
 80067d2:	e00b      	b.n	80067ec <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4413      	add	r3, r2
 80067ea:	3304      	adds	r3, #4
 80067ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <USBD_StdEPReq+0x25a>
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	2b80      	cmp	r3, #128	; 0x80
 80067f8:	d103      	bne.n	8006802 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e00e      	b.n	8006820 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 ffac 	bl	8007764 <USBD_LL_IsStallEP>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2201      	movs	r2, #1
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	e002      	b.n	8006820 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2202      	movs	r2, #2
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fb92 	bl	8006f50 <USBD_CtlSendData>
              break;
 800682c:	e004      	b.n	8006838 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fb23 	bl	8006e7c <USBD_CtlError>
              break;
 8006836:	bf00      	nop
          }
          break;
 8006838:	e004      	b.n	8006844 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fb1d 	bl	8006e7c <USBD_CtlError>
          break;
 8006842:	bf00      	nop
      }
      break;
 8006844:	e004      	b.n	8006850 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb17 	bl	8006e7c <USBD_CtlError>
      break;
 800684e:	bf00      	nop
  }

  return ret;
 8006850:	7bfb      	ldrb	r3, [r7, #15]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	885b      	ldrh	r3, [r3, #2]
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	2b06      	cmp	r3, #6
 800687e:	f200 8128 	bhi.w	8006ad2 <USBD_GetDescriptor+0x276>
 8006882:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <USBD_GetDescriptor+0x2c>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068a5 	.word	0x080068a5
 800688c:	080068bd 	.word	0x080068bd
 8006890:	080068fd 	.word	0x080068fd
 8006894:	08006ad3 	.word	0x08006ad3
 8006898:	08006ad3 	.word	0x08006ad3
 800689c:	08006a73 	.word	0x08006a73
 80068a0:	08006a9f 	.word	0x08006a9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	7c12      	ldrb	r2, [r2, #16]
 80068b0:	f107 0108 	add.w	r1, r7, #8
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
 80068b8:	60f8      	str	r0, [r7, #12]
      break;
 80068ba:	e112      	b.n	8006ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	7c1b      	ldrb	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10d      	bne.n	80068e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	f107 0208 	add.w	r2, r7, #8
 80068d0:	4610      	mov	r0, r2
 80068d2:	4798      	blx	r3
 80068d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3301      	adds	r3, #1
 80068da:	2202      	movs	r2, #2
 80068dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068de:	e100      	b.n	8006ae2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	f107 0208 	add.w	r2, r7, #8
 80068ec:	4610      	mov	r0, r2
 80068ee:	4798      	blx	r3
 80068f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3301      	adds	r3, #1
 80068f6:	2202      	movs	r2, #2
 80068f8:	701a      	strb	r2, [r3, #0]
      break;
 80068fa:	e0f2      	b.n	8006ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	885b      	ldrh	r3, [r3, #2]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b05      	cmp	r3, #5
 8006904:	f200 80ac 	bhi.w	8006a60 <USBD_GetDescriptor+0x204>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <USBD_GetDescriptor+0xb4>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006929 	.word	0x08006929
 8006914:	0800695d 	.word	0x0800695d
 8006918:	08006991 	.word	0x08006991
 800691c:	080069c5 	.word	0x080069c5
 8006920:	080069f9 	.word	0x080069f9
 8006924:	08006a2d 	.word	0x08006a2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00b      	beq.n	800694c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	7c12      	ldrb	r2, [r2, #16]
 8006940:	f107 0108 	add.w	r1, r7, #8
 8006944:	4610      	mov	r0, r2
 8006946:	4798      	blx	r3
 8006948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800694a:	e091      	b.n	8006a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa94 	bl	8006e7c <USBD_CtlError>
            err++;
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	3301      	adds	r3, #1
 8006958:	72fb      	strb	r3, [r7, #11]
          break;
 800695a:	e089      	b.n	8006a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7c12      	ldrb	r2, [r2, #16]
 8006974:	f107 0108 	add.w	r1, r7, #8
 8006978:	4610      	mov	r0, r2
 800697a:	4798      	blx	r3
 800697c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697e:	e077      	b.n	8006a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fa7a 	bl	8006e7c <USBD_CtlError>
            err++;
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	3301      	adds	r3, #1
 800698c:	72fb      	strb	r3, [r7, #11]
          break;
 800698e:	e06f      	b.n	8006a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	7c12      	ldrb	r2, [r2, #16]
 80069a8:	f107 0108 	add.w	r1, r7, #8
 80069ac:	4610      	mov	r0, r2
 80069ae:	4798      	blx	r3
 80069b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069b2:	e05d      	b.n	8006a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa60 	bl	8006e7c <USBD_CtlError>
            err++;
 80069bc:	7afb      	ldrb	r3, [r7, #11]
 80069be:	3301      	adds	r3, #1
 80069c0:	72fb      	strb	r3, [r7, #11]
          break;
 80069c2:	e055      	b.n	8006a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00b      	beq.n	80069e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	7c12      	ldrb	r2, [r2, #16]
 80069dc:	f107 0108 	add.w	r1, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e6:	e043      	b.n	8006a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa46 	bl	8006e7c <USBD_CtlError>
            err++;
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	3301      	adds	r3, #1
 80069f4:	72fb      	strb	r3, [r7, #11]
          break;
 80069f6:	e03b      	b.n	8006a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	7c12      	ldrb	r2, [r2, #16]
 8006a10:	f107 0108 	add.w	r1, r7, #8
 8006a14:	4610      	mov	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a1a:	e029      	b.n	8006a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fa2c 	bl	8006e7c <USBD_CtlError>
            err++;
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	3301      	adds	r3, #1
 8006a28:	72fb      	strb	r3, [r7, #11]
          break;
 8006a2a:	e021      	b.n	8006a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	7c12      	ldrb	r2, [r2, #16]
 8006a44:	f107 0108 	add.w	r1, r7, #8
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4e:	e00f      	b.n	8006a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa12 	bl	8006e7c <USBD_CtlError>
            err++;
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5e:	e007      	b.n	8006a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa0a 	bl	8006e7c <USBD_CtlError>
          err++;
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a6e:	e038      	b.n	8006ae2 <USBD_GetDescriptor+0x286>
 8006a70:	e037      	b.n	8006ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	7c1b      	ldrb	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d109      	bne.n	8006a8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a82:	f107 0208 	add.w	r2, r7, #8
 8006a86:	4610      	mov	r0, r2
 8006a88:	4798      	blx	r3
 8006a8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a8c:	e029      	b.n	8006ae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f9f3 	bl	8006e7c <USBD_CtlError>
        err++;
 8006a96:	7afb      	ldrb	r3, [r7, #11]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a9c:	e021      	b.n	8006ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	7c1b      	ldrb	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10d      	bne.n	8006ac2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	f107 0208 	add.w	r2, r7, #8
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	4798      	blx	r3
 8006ab6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	2207      	movs	r2, #7
 8006abe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ac0:	e00f      	b.n	8006ae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f9d9 	bl	8006e7c <USBD_CtlError>
        err++;
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	3301      	adds	r3, #1
 8006ace:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad0:	e007      	b.n	8006ae2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f9d1 	bl	8006e7c <USBD_CtlError>
      err++;
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	3301      	adds	r3, #1
 8006ade:	72fb      	strb	r3, [r7, #11]
      break;
 8006ae0:	bf00      	nop
  }

  if (err != 0U)
 8006ae2:	7afb      	ldrb	r3, [r7, #11]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11c      	bne.n	8006b22 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ae8:	893b      	ldrh	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d011      	beq.n	8006b12 <USBD_GetDescriptor+0x2b6>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	88db      	ldrh	r3, [r3, #6]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00d      	beq.n	8006b12 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	88da      	ldrh	r2, [r3, #6]
 8006afa:	893b      	ldrh	r3, [r7, #8]
 8006afc:	4293      	cmp	r3, r2
 8006afe:	bf28      	it	cs
 8006b00:	4613      	movcs	r3, r2
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b06:	893b      	ldrh	r3, [r7, #8]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68f9      	ldr	r1, [r7, #12]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fa1f 	bl	8006f50 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	88db      	ldrh	r3, [r3, #6]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa76 	bl	800700c <USBD_CtlSendStatus>
 8006b20:	e000      	b.n	8006b24 <USBD_GetDescriptor+0x2c8>
    return;
 8006b22:	bf00      	nop
    }
  }
}
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop

08006b2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	889b      	ldrh	r3, [r3, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d130      	bne.n	8006ba0 <USBD_SetAddress+0x74>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	88db      	ldrh	r3, [r3, #6]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d12c      	bne.n	8006ba0 <USBD_SetAddress+0x74>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b4c:	d828      	bhi.n	8006ba0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	885b      	ldrh	r3, [r3, #2]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d104      	bne.n	8006b6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f988 	bl	8006e7c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6c:	e01c      	b.n	8006ba8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	7bfa      	ldrb	r2, [r7, #15]
 8006b72:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fe1e 	bl	80077bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fa43 	bl	800700c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d004      	beq.n	8006b96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b94:	e008      	b.n	8006ba8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9e:	e003      	b.n	8006ba8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f96a 	bl	8006e7c <USBD_CtlError>
  }
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	885b      	ldrh	r3, [r3, #2]
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	4b41      	ldr	r3, [pc, #260]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006bc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bc4:	4b40      	ldr	r3, [pc, #256]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d904      	bls.n	8006bd6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f954 	bl	8006e7c <USBD_CtlError>
 8006bd4:	e075      	b.n	8006cc2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d002      	beq.n	8006be6 <USBD_SetConfig+0x36>
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d023      	beq.n	8006c2c <USBD_SetConfig+0x7c>
 8006be4:	e062      	b.n	8006cac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006be6:	4b38      	ldr	r3, [pc, #224]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01a      	beq.n	8006c24 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006bee:	4b36      	ldr	r3, [pc, #216]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c00:	4b31      	ldr	r3, [pc, #196]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff f9f4 	bl	8005ff4 <USBD_SetClassConfig>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d104      	bne.n	8006c1c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f931 	bl	8006e7c <USBD_CtlError>
            return;
 8006c1a:	e052      	b.n	8006cc2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f9f5 	bl	800700c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c22:	e04e      	b.n	8006cc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f9f1 	bl	800700c <USBD_CtlSendStatus>
        break;
 8006c2a:	e04a      	b.n	8006cc2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c2c:	4b26      	ldr	r3, [pc, #152]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d112      	bne.n	8006c5a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c3c:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c46:	4b20      	ldr	r3, [pc, #128]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff f9f0 	bl	8006032 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f9da 	bl	800700c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c58:	e033      	b.n	8006cc2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c5a:	4b1b      	ldr	r3, [pc, #108]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d01d      	beq.n	8006ca4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff f9de 	bl	8006032 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c80:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff f9b4 	bl	8005ff4 <USBD_SetClassConfig>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d104      	bne.n	8006c9c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f8f1 	bl	8006e7c <USBD_CtlError>
            return;
 8006c9a:	e012      	b.n	8006cc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f9b5 	bl	800700c <USBD_CtlSendStatus>
        break;
 8006ca2:	e00e      	b.n	8006cc2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f9b1 	bl	800700c <USBD_CtlSendStatus>
        break;
 8006caa:	e00a      	b.n	8006cc2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f8e4 	bl	8006e7c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006cb4:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <USBD_SetConfig+0x118>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff f9b9 	bl	8006032 <USBD_ClrClassConfig>
        break;
 8006cc0:	bf00      	nop
    }
  }
}
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	200001a0 	.word	0x200001a0

08006ccc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	88db      	ldrh	r3, [r3, #6]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d004      	beq.n	8006ce8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f8cb 	bl	8006e7c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ce6:	e021      	b.n	8006d2c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	db17      	blt.n	8006d22 <USBD_GetConfig+0x56>
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	dd02      	ble.n	8006cfc <USBD_GetConfig+0x30>
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d00b      	beq.n	8006d12 <USBD_GetConfig+0x46>
 8006cfa:	e012      	b.n	8006d22 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3308      	adds	r3, #8
 8006d06:	2201      	movs	r2, #1
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f920 	bl	8006f50 <USBD_CtlSendData>
        break;
 8006d10:	e00c      	b.n	8006d2c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3304      	adds	r3, #4
 8006d16:	2201      	movs	r2, #1
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f918 	bl	8006f50 <USBD_CtlSendData>
        break;
 8006d20:	e004      	b.n	8006d2c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f8a9 	bl	8006e7c <USBD_CtlError>
        break;
 8006d2a:	bf00      	nop
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d44:	3b01      	subs	r3, #1
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d81e      	bhi.n	8006d88 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	88db      	ldrh	r3, [r3, #6]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d004      	beq.n	8006d5c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f891 	bl	8006e7c <USBD_CtlError>
        break;
 8006d5a:	e01a      	b.n	8006d92 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f043 0202 	orr.w	r2, r3, #2
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f8e5 	bl	8006f50 <USBD_CtlSendData>
      break;
 8006d86:	e004      	b.n	8006d92 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f876 	bl	8006e7c <USBD_CtlError>
      break;
 8006d90:	bf00      	nop
  }
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	885b      	ldrh	r3, [r3, #2]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d106      	bne.n	8006dba <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f929 	bl	800700c <USBD_CtlSendStatus>
  }
}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d80b      	bhi.n	8006df0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	885b      	ldrh	r3, [r3, #2]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d10c      	bne.n	8006dfa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f90f 	bl	800700c <USBD_CtlSendStatus>
      }
      break;
 8006dee:	e004      	b.n	8006dfa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f842 	bl	8006e7c <USBD_CtlError>
      break;
 8006df8:	e000      	b.n	8006dfc <USBD_ClrFeature+0x3a>
      break;
 8006dfa:	bf00      	nop
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781a      	ldrb	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	785a      	ldrb	r2, [r3, #1]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	3302      	adds	r3, #2
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	3303      	adds	r3, #3
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	4413      	add	r3, r2
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	3305      	adds	r3, #5
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	021b      	lsls	r3, r3, #8
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4413      	add	r3, r2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	3306      	adds	r3, #6
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	3307      	adds	r3, #7
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	80da      	strh	r2, [r3, #6]

}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006e86:	2180      	movs	r1, #128	; 0x80
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc2d 	bl	80076e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006e8e:	2100      	movs	r1, #0
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fc29 	bl	80076e8 <USBD_LL_StallEP>
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d032      	beq.n	8006f1a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f834 	bl	8006f22 <USBD_GetLen>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	75fa      	strb	r2, [r7, #23]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	7812      	ldrb	r2, [r2, #0]
 8006ed8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	75fa      	strb	r2, [r7, #23]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	2203      	movs	r2, #3
 8006ee8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006eea:	e012      	b.n	8006f12 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	60fa      	str	r2, [r7, #12]
 8006ef2:	7dfa      	ldrb	r2, [r7, #23]
 8006ef4:	1c51      	adds	r1, r2, #1
 8006ef6:	75f9      	strb	r1, [r7, #23]
 8006ef8:	4611      	mov	r1, r2
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	440a      	add	r2, r1
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	75fa      	strb	r2, [r7, #23]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e8      	bne.n	8006eec <USBD_GetString+0x4e>
    }
  }
}
 8006f1a:	bf00      	nop
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b085      	sub	sp, #20
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f2e:	e005      	b.n	8006f3c <USBD_GetLen+0x1a>
  {
    len++;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	3301      	adds	r3, #1
 8006f34:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f5      	bne.n	8006f30 <USBD_GetLen+0xe>
  }

  return len;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr

08006f50 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2202      	movs	r2, #2
 8006f62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f6c:	88fa      	ldrh	r2, [r7, #6]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	2100      	movs	r1, #0
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 fc3e 	bl	80077fa <USBD_LL_Transmit>

  return USBD_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 fc2c 	bl	80077fa <USBD_LL_Transmit>

  return USBD_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2203      	movs	r2, #3
 8006fbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fc31 	bl	8007840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fc1f 	bl	8007840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2204      	movs	r2, #4
 8007018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800701c:	2300      	movs	r3, #0
 800701e:	2200      	movs	r2, #0
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fbe9 	bl	80077fa <USBD_LL_Transmit>

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2205      	movs	r2, #5
 800703e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007042:	2300      	movs	r3, #0
 8007044:	2200      	movs	r2, #0
 8007046:	2100      	movs	r1, #0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fbf9 	bl	8007840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800705c:	2200      	movs	r2, #0
 800705e:	4912      	ldr	r1, [pc, #72]	; (80070a8 <MX_USB_DEVICE_Init+0x50>)
 8007060:	4812      	ldr	r0, [pc, #72]	; (80070ac <MX_USB_DEVICE_Init+0x54>)
 8007062:	f7fe ff6d 	bl	8005f40 <USBD_Init>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800706c:	f7f9 fa8c 	bl	8000588 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007070:	490f      	ldr	r1, [pc, #60]	; (80070b0 <MX_USB_DEVICE_Init+0x58>)
 8007072:	480e      	ldr	r0, [pc, #56]	; (80070ac <MX_USB_DEVICE_Init+0x54>)
 8007074:	f7fe ff8f 	bl	8005f96 <USBD_RegisterClass>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800707e:	f7f9 fa83 	bl	8000588 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007082:	490c      	ldr	r1, [pc, #48]	; (80070b4 <MX_USB_DEVICE_Init+0x5c>)
 8007084:	4809      	ldr	r0, [pc, #36]	; (80070ac <MX_USB_DEVICE_Init+0x54>)
 8007086:	f7fe feef 	bl	8005e68 <USBD_CDC_RegisterInterface>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007090:	f7f9 fa7a 	bl	8000588 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007094:	4805      	ldr	r0, [pc, #20]	; (80070ac <MX_USB_DEVICE_Init+0x54>)
 8007096:	f7fe ff97 	bl	8005fc8 <USBD_Start>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070a0:	f7f9 fa72 	bl	8000588 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070a4:	bf00      	nop
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	2000012c 	.word	0x2000012c
 80070ac:	20000458 	.word	0x20000458
 80070b0:	20000018 	.word	0x20000018
 80070b4:	2000011c 	.word	0x2000011c

080070b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070bc:	2200      	movs	r2, #0
 80070be:	4905      	ldr	r1, [pc, #20]	; (80070d4 <CDC_Init_FS+0x1c>)
 80070c0:	4805      	ldr	r0, [pc, #20]	; (80070d8 <CDC_Init_FS+0x20>)
 80070c2:	f7fe fee7 	bl	8005e94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070c6:	4905      	ldr	r1, [pc, #20]	; (80070dc <CDC_Init_FS+0x24>)
 80070c8:	4803      	ldr	r0, [pc, #12]	; (80070d8 <CDC_Init_FS+0x20>)
 80070ca:	f7fe fefc 	bl	8005ec6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20000b04 	.word	0x20000b04
 80070d8:	20000458 	.word	0x20000458
 80070dc:	2000071c 	.word	0x2000071c

080070e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr
	...

080070f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	6039      	str	r1, [r7, #0]
 80070fa:	71fb      	strb	r3, [r7, #7]
 80070fc:	4613      	mov	r3, r2
 80070fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b23      	cmp	r3, #35	; 0x23
 8007104:	d84a      	bhi.n	800719c <CDC_Control_FS+0xac>
 8007106:	a201      	add	r2, pc, #4	; (adr r2, 800710c <CDC_Control_FS+0x1c>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	0800719d 	.word	0x0800719d
 8007110:	0800719d 	.word	0x0800719d
 8007114:	0800719d 	.word	0x0800719d
 8007118:	0800719d 	.word	0x0800719d
 800711c:	0800719d 	.word	0x0800719d
 8007120:	0800719d 	.word	0x0800719d
 8007124:	0800719d 	.word	0x0800719d
 8007128:	0800719d 	.word	0x0800719d
 800712c:	0800719d 	.word	0x0800719d
 8007130:	0800719d 	.word	0x0800719d
 8007134:	0800719d 	.word	0x0800719d
 8007138:	0800719d 	.word	0x0800719d
 800713c:	0800719d 	.word	0x0800719d
 8007140:	0800719d 	.word	0x0800719d
 8007144:	0800719d 	.word	0x0800719d
 8007148:	0800719d 	.word	0x0800719d
 800714c:	0800719d 	.word	0x0800719d
 8007150:	0800719d 	.word	0x0800719d
 8007154:	0800719d 	.word	0x0800719d
 8007158:	0800719d 	.word	0x0800719d
 800715c:	0800719d 	.word	0x0800719d
 8007160:	0800719d 	.word	0x0800719d
 8007164:	0800719d 	.word	0x0800719d
 8007168:	0800719d 	.word	0x0800719d
 800716c:	0800719d 	.word	0x0800719d
 8007170:	0800719d 	.word	0x0800719d
 8007174:	0800719d 	.word	0x0800719d
 8007178:	0800719d 	.word	0x0800719d
 800717c:	0800719d 	.word	0x0800719d
 8007180:	0800719d 	.word	0x0800719d
 8007184:	0800719d 	.word	0x0800719d
 8007188:	0800719d 	.word	0x0800719d
 800718c:	0800719d 	.word	0x0800719d
 8007190:	0800719d 	.word	0x0800719d
 8007194:	0800719d 	.word	0x0800719d
 8007198:	0800719d 	.word	0x0800719d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800719c:	bf00      	nop
  }

  return (USBD_OK);
 800719e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop

080071ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	4805      	ldr	r0, [pc, #20]	; (80071d0 <CDC_Receive_FS+0x24>)
 80071ba:	f7fe fe84 	bl	8005ec6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071be:	4804      	ldr	r0, [pc, #16]	; (80071d0 <CDC_Receive_FS+0x24>)
 80071c0:	f7fe fe94 	bl	8005eec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80071c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000458 	.word	0x20000458

080071d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	6039      	str	r1, [r7, #0]
 80071de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2212      	movs	r2, #18
 80071e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071e6:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000148 	.word	0x20000148

080071f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	6039      	str	r1, [r7, #0]
 8007202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2204      	movs	r2, #4
 8007208:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800720a:	4b03      	ldr	r3, [pc, #12]	; (8007218 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	2000015c 	.word	0x2000015c

0800721c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	6039      	str	r1, [r7, #0]
 8007226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d105      	bne.n	800723a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	4907      	ldr	r1, [pc, #28]	; (8007250 <USBD_FS_ProductStrDescriptor+0x34>)
 8007232:	4808      	ldr	r0, [pc, #32]	; (8007254 <USBD_FS_ProductStrDescriptor+0x38>)
 8007234:	f7ff fe33 	bl	8006e9e <USBD_GetString>
 8007238:	e004      	b.n	8007244 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4904      	ldr	r1, [pc, #16]	; (8007250 <USBD_FS_ProductStrDescriptor+0x34>)
 800723e:	4805      	ldr	r0, [pc, #20]	; (8007254 <USBD_FS_ProductStrDescriptor+0x38>)
 8007240:	f7ff fe2d 	bl	8006e9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007244:	4b02      	ldr	r3, [pc, #8]	; (8007250 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000eec 	.word	0x20000eec
 8007254:	080079c8 	.word	0x080079c8

08007258 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	6039      	str	r1, [r7, #0]
 8007262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	4904      	ldr	r1, [pc, #16]	; (8007278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007268:	4804      	ldr	r0, [pc, #16]	; (800727c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800726a:	f7ff fe18 	bl	8006e9e <USBD_GetString>
  return USBD_StrDesc;
 800726e:	4b02      	ldr	r3, [pc, #8]	; (8007278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	20000eec 	.word	0x20000eec
 800727c:	080079e0 	.word	0x080079e0

08007280 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	6039      	str	r1, [r7, #0]
 800728a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	221a      	movs	r2, #26
 8007290:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007292:	f000 f843 	bl	800731c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007296:	4b02      	ldr	r3, [pc, #8]	; (80072a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	20000160 	.word	0x20000160

080072a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	6039      	str	r1, [r7, #0]
 80072ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d105      	bne.n	80072c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	4907      	ldr	r1, [pc, #28]	; (80072d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072ba:	4808      	ldr	r0, [pc, #32]	; (80072dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80072bc:	f7ff fdef 	bl	8006e9e <USBD_GetString>
 80072c0:	e004      	b.n	80072cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	4904      	ldr	r1, [pc, #16]	; (80072d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072c6:	4805      	ldr	r0, [pc, #20]	; (80072dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80072c8:	f7ff fde9 	bl	8006e9e <USBD_GetString>
  }
  return USBD_StrDesc;
 80072cc:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000eec 	.word	0x20000eec
 80072dc:	080079f4 	.word	0x080079f4

080072e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	6039      	str	r1, [r7, #0]
 80072ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d105      	bne.n	80072fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	4907      	ldr	r1, [pc, #28]	; (8007314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072f6:	4808      	ldr	r0, [pc, #32]	; (8007318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072f8:	f7ff fdd1 	bl	8006e9e <USBD_GetString>
 80072fc:	e004      	b.n	8007308 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	4904      	ldr	r1, [pc, #16]	; (8007314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007302:	4805      	ldr	r0, [pc, #20]	; (8007318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007304:	f7ff fdcb 	bl	8006e9e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007308:	4b02      	ldr	r3, [pc, #8]	; (8007314 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000eec 	.word	0x20000eec
 8007318:	08007a00 	.word	0x08007a00

0800731c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007322:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <Get_SerialNum+0x44>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007328:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <Get_SerialNum+0x48>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800732e:	4b0e      	ldr	r3, [pc, #56]	; (8007368 <Get_SerialNum+0x4c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4413      	add	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007342:	2208      	movs	r2, #8
 8007344:	4909      	ldr	r1, [pc, #36]	; (800736c <Get_SerialNum+0x50>)
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f814 	bl	8007374 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800734c:	2204      	movs	r2, #4
 800734e:	4908      	ldr	r1, [pc, #32]	; (8007370 <Get_SerialNum+0x54>)
 8007350:	68b8      	ldr	r0, [r7, #8]
 8007352:	f000 f80f 	bl	8007374 <IntToUnicode>
  }
}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	1ffff7e8 	.word	0x1ffff7e8
 8007364:	1ffff7ec 	.word	0x1ffff7ec
 8007368:	1ffff7f0 	.word	0x1ffff7f0
 800736c:	20000162 	.word	0x20000162
 8007370:	20000172 	.word	0x20000172

08007374 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	4613      	mov	r3, r2
 8007380:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007386:	2300      	movs	r3, #0
 8007388:	75fb      	strb	r3, [r7, #23]
 800738a:	e027      	b.n	80073dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	0f1b      	lsrs	r3, r3, #28
 8007390:	2b09      	cmp	r3, #9
 8007392:	d80b      	bhi.n	80073ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	0f1b      	lsrs	r3, r3, #28
 8007398:	b2da      	uxtb	r2, r3
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	4619      	mov	r1, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	440b      	add	r3, r1
 80073a4:	3230      	adds	r2, #48	; 0x30
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	e00a      	b.n	80073c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	0f1b      	lsrs	r3, r3, #28
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	4619      	mov	r1, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	440b      	add	r3, r1
 80073bc:	3237      	adds	r2, #55	; 0x37
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	3301      	adds	r3, #1
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	4413      	add	r3, r2
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	3301      	adds	r3, #1
 80073da:	75fb      	strb	r3, [r7, #23]
 80073dc:	7dfa      	ldrb	r2, [r7, #23]
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d3d3      	bcc.n	800738c <IntToUnicode+0x18>
  }
}
 80073e4:	bf00      	nop
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc80      	pop	{r7}
 80073ec:	4770      	bx	lr
	...

080073f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a0d      	ldr	r2, [pc, #52]	; (8007434 <HAL_PCD_MspInit+0x44>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d113      	bne.n	800742a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007402:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <HAL_PCD_MspInit+0x48>)
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	4a0c      	ldr	r2, [pc, #48]	; (8007438 <HAL_PCD_MspInit+0x48>)
 8007408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800740c:	61d3      	str	r3, [r2, #28]
 800740e:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <HAL_PCD_MspInit+0x48>)
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800741a:	2200      	movs	r2, #0
 800741c:	2100      	movs	r1, #0
 800741e:	2014      	movs	r0, #20
 8007420:	f7fa f83b 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007424:	2014      	movs	r0, #20
 8007426:	f7fa f854 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800742a:	bf00      	nop
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	40005c00 	.word	0x40005c00
 8007438:	40021000 	.word	0x40021000

0800743c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f7fe fe00 	bl	8006058 <USBD_LL_SetupStage>
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	440b      	add	r3, r1
 8007480:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	4619      	mov	r1, r3
 800748a:	f7fe fe30 	bl	80060ee <USBD_LL_DataOutStage>
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	460b      	mov	r3, r1
 80074a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	440b      	add	r3, r1
 80074b6:	333c      	adds	r3, #60	; 0x3c
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	4619      	mov	r1, r3
 80074be:	f7fe fe87 	bl	80061d0 <USBD_LL_DataInStage>
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe ff97 	bl	800640c <USBD_LL_SOF>
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074ee:	2301      	movs	r3, #1
 80074f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d001      	beq.n	80074fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80074fa:	f7f9 f845 	bl	8000588 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007504:	7bfa      	ldrb	r2, [r7, #15]
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe ff47 	bl	800639c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007514:	4618      	mov	r0, r3
 8007516:	f7fe ff00 	bl	800631a <USBD_LL_Reset>
}
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe ff41 	bl	80063ba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007540:	4b04      	ldr	r3, [pc, #16]	; (8007554 <HAL_PCD_SuspendCallback+0x30>)
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	4a03      	ldr	r2, [pc, #12]	; (8007554 <HAL_PCD_SuspendCallback+0x30>)
 8007546:	f043 0306 	orr.w	r3, r3, #6
 800754a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	e000ed00 	.word	0xe000ed00

08007558 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe ff3b 	bl	80063e2 <USBD_LL_Resume>
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800757c:	4a28      	ldr	r2, [pc, #160]	; (8007620 <USBD_LL_Init+0xac>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a26      	ldr	r2, [pc, #152]	; (8007620 <USBD_LL_Init+0xac>)
 8007588:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800758c:	4b24      	ldr	r3, [pc, #144]	; (8007620 <USBD_LL_Init+0xac>)
 800758e:	4a25      	ldr	r2, [pc, #148]	; (8007624 <USBD_LL_Init+0xb0>)
 8007590:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007592:	4b23      	ldr	r3, [pc, #140]	; (8007620 <USBD_LL_Init+0xac>)
 8007594:	2208      	movs	r2, #8
 8007596:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007598:	4b21      	ldr	r3, [pc, #132]	; (8007620 <USBD_LL_Init+0xac>)
 800759a:	2202      	movs	r2, #2
 800759c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800759e:	4b20      	ldr	r3, [pc, #128]	; (8007620 <USBD_LL_Init+0xac>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80075a4:	4b1e      	ldr	r3, [pc, #120]	; (8007620 <USBD_LL_Init+0xac>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80075aa:	4b1d      	ldr	r3, [pc, #116]	; (8007620 <USBD_LL_Init+0xac>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80075b0:	481b      	ldr	r0, [pc, #108]	; (8007620 <USBD_LL_Init+0xac>)
 80075b2:	f7fa f94b 	bl	800184c <HAL_PCD_Init>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80075bc:	f7f8 ffe4 	bl	8000588 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075c6:	2318      	movs	r3, #24
 80075c8:	2200      	movs	r2, #0
 80075ca:	2100      	movs	r1, #0
 80075cc:	f7fb fc7f 	bl	8002ece <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075d6:	2358      	movs	r3, #88	; 0x58
 80075d8:	2200      	movs	r2, #0
 80075da:	2180      	movs	r1, #128	; 0x80
 80075dc:	f7fb fc77 	bl	8002ece <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075e6:	23c0      	movs	r3, #192	; 0xc0
 80075e8:	2200      	movs	r2, #0
 80075ea:	2181      	movs	r1, #129	; 0x81
 80075ec:	f7fb fc6f 	bl	8002ece <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80075fa:	2200      	movs	r2, #0
 80075fc:	2101      	movs	r1, #1
 80075fe:	f7fb fc66 	bl	8002ece <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800760c:	2200      	movs	r2, #0
 800760e:	2182      	movs	r1, #130	; 0x82
 8007610:	f7fb fc5d 	bl	8002ece <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200010ec 	.word	0x200010ec
 8007624:	40005c00 	.word	0x40005c00

08007628 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800763e:	4618      	mov	r0, r3
 8007640:	f7fa fa0f 	bl	8001a62 <HAL_PCD_Start>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f94e 	bl	80078ec <USBD_Get_USB_Status>
 8007650:	4603      	mov	r3, r0
 8007652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007654:	7bbb      	ldrb	r3, [r7, #14]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	4608      	mov	r0, r1
 8007668:	4611      	mov	r1, r2
 800766a:	461a      	mov	r2, r3
 800766c:	4603      	mov	r3, r0
 800766e:	70fb      	strb	r3, [r7, #3]
 8007670:	460b      	mov	r3, r1
 8007672:	70bb      	strb	r3, [r7, #2]
 8007674:	4613      	mov	r3, r2
 8007676:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007686:	78bb      	ldrb	r3, [r7, #2]
 8007688:	883a      	ldrh	r2, [r7, #0]
 800768a:	78f9      	ldrb	r1, [r7, #3]
 800768c:	f7fa fb89 	bl	8001da2 <HAL_PCD_EP_Open>
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	4618      	mov	r0, r3
 8007698:	f000 f928 	bl	80078ec <USBD_Get_USB_Status>
 800769c:	4603      	mov	r3, r0
 800769e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	4611      	mov	r1, r2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fa fbd0 	bl	8001e6e <HAL_PCD_EP_Close>
 80076ce:	4603      	mov	r3, r0
 80076d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 f909 	bl	80078ec <USBD_Get_USB_Status>
 80076da:	4603      	mov	r3, r0
 80076dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076de:	7bbb      	ldrb	r3, [r7, #14]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	4611      	mov	r1, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f7fa fc90 	bl	800202c <HAL_PCD_EP_SetStall>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f8ea 	bl	80078ec <USBD_Get_USB_Status>
 8007718:	4603      	mov	r3, r0
 800771a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800771c:	7bbb      	ldrb	r3, [r7, #14]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007740:	78fa      	ldrb	r2, [r7, #3]
 8007742:	4611      	mov	r1, r2
 8007744:	4618      	mov	r0, r3
 8007746:	f7fa fcd1 	bl	80020ec <HAL_PCD_EP_ClrStall>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	4618      	mov	r0, r3
 8007752:	f000 f8cb 	bl	80078ec <USBD_Get_USB_Status>
 8007756:	4603      	mov	r3, r0
 8007758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800775a:	7bbb      	ldrb	r3, [r7, #14]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007776:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800777c:	2b00      	cmp	r3, #0
 800777e:	da0c      	bge.n	800779a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	440b      	add	r3, r1
 8007794:	3302      	adds	r3, #2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	e00b      	b.n	80077b2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a0:	68f9      	ldr	r1, [r7, #12]
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	440b      	add	r3, r1
 80077ac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80077b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr

080077bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	4611      	mov	r1, r2
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fa fabc 	bl	8001d58 <HAL_PCD_SetAddress>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 f880 	bl	80078ec <USBD_Get_USB_Status>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	461a      	mov	r2, r3
 8007806:	460b      	mov	r3, r1
 8007808:	72fb      	strb	r3, [r7, #11]
 800780a:	4613      	mov	r3, r2
 800780c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800781c:	893b      	ldrh	r3, [r7, #8]
 800781e:	7af9      	ldrb	r1, [r7, #11]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	f7fa fbc0 	bl	8001fa6 <HAL_PCD_EP_Transmit>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800782a:	7dfb      	ldrb	r3, [r7, #23]
 800782c:	4618      	mov	r0, r3
 800782e:	f000 f85d 	bl	80078ec <USBD_Get_USB_Status>
 8007832:	4603      	mov	r3, r0
 8007834:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007836:	7dbb      	ldrb	r3, [r7, #22]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	607a      	str	r2, [r7, #4]
 800784a:	461a      	mov	r2, r3
 800784c:	460b      	mov	r3, r1
 800784e:	72fb      	strb	r3, [r7, #11]
 8007850:	4613      	mov	r3, r2
 8007852:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	7af9      	ldrb	r1, [r7, #11]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	f7fa fb49 	bl	8001efe <HAL_PCD_EP_Receive>
 800786c:	4603      	mov	r3, r0
 800786e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 f83a 	bl	80078ec <USBD_Get_USB_Status>
 8007878:	4603      	mov	r3, r0
 800787a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800787c:	7dbb      	ldrb	r3, [r7, #22]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	460b      	mov	r3, r1
 8007890:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007898:	78fa      	ldrb	r2, [r7, #3]
 800789a:	4611      	mov	r1, r2
 800789c:	4618      	mov	r0, r3
 800789e:	f7fa fb6b 	bl	8001f78 <HAL_PCD_EP_GetRxCount>
 80078a2:	4603      	mov	r3, r0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078b4:	4b02      	ldr	r3, [pc, #8]	; (80078c0 <USBD_static_malloc+0x14>)
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr
 80078c0:	200001a4 	.word	0x200001a4

080078c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]

}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr

080078d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr

080078ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078fa:	79fb      	ldrb	r3, [r7, #7]
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d817      	bhi.n	8007930 <USBD_Get_USB_Status+0x44>
 8007900:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <USBD_Get_USB_Status+0x1c>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	08007919 	.word	0x08007919
 800790c:	0800791f 	.word	0x0800791f
 8007910:	08007925 	.word	0x08007925
 8007914:	0800792b 	.word	0x0800792b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
    break;
 800791c:	e00b      	b.n	8007936 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800791e:	2302      	movs	r3, #2
 8007920:	73fb      	strb	r3, [r7, #15]
    break;
 8007922:	e008      	b.n	8007936 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007924:	2301      	movs	r3, #1
 8007926:	73fb      	strb	r3, [r7, #15]
    break;
 8007928:	e005      	b.n	8007936 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800792a:	2302      	movs	r3, #2
 800792c:	73fb      	strb	r3, [r7, #15]
    break;
 800792e:	e002      	b.n	8007936 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007930:	2302      	movs	r3, #2
 8007932:	73fb      	strb	r3, [r7, #15]
    break;
 8007934:	bf00      	nop
  }
  return usb_status;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop

08007944 <__libc_init_array>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	2500      	movs	r5, #0
 8007948:	4e0c      	ldr	r6, [pc, #48]	; (800797c <__libc_init_array+0x38>)
 800794a:	4c0d      	ldr	r4, [pc, #52]	; (8007980 <__libc_init_array+0x3c>)
 800794c:	1ba4      	subs	r4, r4, r6
 800794e:	10a4      	asrs	r4, r4, #2
 8007950:	42a5      	cmp	r5, r4
 8007952:	d109      	bne.n	8007968 <__libc_init_array+0x24>
 8007954:	f000 f822 	bl	800799c <_init>
 8007958:	2500      	movs	r5, #0
 800795a:	4e0a      	ldr	r6, [pc, #40]	; (8007984 <__libc_init_array+0x40>)
 800795c:	4c0a      	ldr	r4, [pc, #40]	; (8007988 <__libc_init_array+0x44>)
 800795e:	1ba4      	subs	r4, r4, r6
 8007960:	10a4      	asrs	r4, r4, #2
 8007962:	42a5      	cmp	r5, r4
 8007964:	d105      	bne.n	8007972 <__libc_init_array+0x2e>
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800796c:	4798      	blx	r3
 800796e:	3501      	adds	r5, #1
 8007970:	e7ee      	b.n	8007950 <__libc_init_array+0xc>
 8007972:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007976:	4798      	blx	r3
 8007978:	3501      	adds	r5, #1
 800797a:	e7f2      	b.n	8007962 <__libc_init_array+0x1e>
 800797c:	08007a20 	.word	0x08007a20
 8007980:	08007a20 	.word	0x08007a20
 8007984:	08007a20 	.word	0x08007a20
 8007988:	08007a24 	.word	0x08007a24

0800798c <memset>:
 800798c:	4603      	mov	r3, r0
 800798e:	4402      	add	r2, r0
 8007990:	4293      	cmp	r3, r2
 8007992:	d100      	bne.n	8007996 <memset+0xa>
 8007994:	4770      	bx	lr
 8007996:	f803 1b01 	strb.w	r1, [r3], #1
 800799a:	e7f9      	b.n	8007990 <memset+0x4>

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
