
Nucleo_CanBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000966c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08009778  08009778  00019778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009850  08009850  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  08009850  08009850  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009850  08009850  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009850  08009850  00019850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009854  08009854  00019854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08009858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001344  20000188  080099e0  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014cc  080099e0  000214cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3c1  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039b3  00000000  00000000  0003b572  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b8  00000000  00000000  0003ef28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  000403e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005473  00000000  00000000  000416e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014048  00000000  00000000  00046b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000969b1  00000000  00000000  0005ab9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f154c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f8  00000000  00000000  000f15c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08009760 	.word	0x08009760

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08009760 	.word	0x08009760

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd0d 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f86f 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9df 	bl	800051c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015e:	f000 f9b3 	bl	80004c8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000162:	f008 fe5b 	bl	8008e1c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000166:	f000 f8c5 	bl	80002f4 <MX_ADC1_Init>
  MX_TIM2_Init();
 800016a:	f000 f937 	bl	80003dc <MX_TIM2_Init>
  MX_CAN_Init();
 800016e:	f000 f8ff 	bl	8000370 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  extern uint8_t RX2_Char;
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000172:	2100      	movs	r1, #0
 8000174:	4829      	ldr	r0, [pc, #164]	; (800021c <main+0xd0>)
 8000176:	f004 f915 	bl	80043a4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &RX2_Char, 1);
 800017a:	2201      	movs	r2, #1
 800017c:	4928      	ldr	r1, [pc, #160]	; (8000220 <main+0xd4>)
 800017e:	4829      	ldr	r0, [pc, #164]	; (8000224 <main+0xd8>)
 8000180:	f004 ff09 	bl	8004f96 <HAL_UART_Receive_IT>

  /////////////////////CanBus Filter/////////
  canfil.FilterBank = 0;
 8000184:	4b28      	ldr	r3, [pc, #160]	; (8000228 <main+0xdc>)
 8000186:	2200      	movs	r2, #0
 8000188:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800018a:	4b27      	ldr	r3, [pc, #156]	; (8000228 <main+0xdc>)
 800018c:	2200      	movs	r2, #0
 800018e:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000190:	4b25      	ldr	r3, [pc, #148]	; (8000228 <main+0xdc>)
 8000192:	2200      	movs	r2, #0
 8000194:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0x030 << 5; //Datasheete göre hep 5 bit ötele
 8000196:	4b24      	ldr	r3, [pc, #144]	; (8000228 <main+0xdc>)
 8000198:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800019c:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 800019e:	4b22      	ldr	r3, [pc, #136]	; (8000228 <main+0xdc>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0xFFFF; // Her bir biti tek tek kontrol et
 80001a4:	4b20      	ldr	r3, [pc, #128]	; (8000228 <main+0xdc>)
 80001a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001aa:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 80001ac:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <main+0xdc>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT; //CAN_FILTERSCALE_16BIT;
 80001b2:	4b1d      	ldr	r3, [pc, #116]	; (8000228 <main+0xdc>)
 80001b4:	2201      	movs	r2, #1
 80001b6:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 80001b8:	4b1b      	ldr	r3, [pc, #108]	; (8000228 <main+0xdc>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 80001be:	4b1a      	ldr	r3, [pc, #104]	; (8000228 <main+0xdc>)
 80001c0:	220e      	movs	r2, #14
 80001c2:	625a      	str	r2, [r3, #36]	; 0x24
  //////////The device ID////////////////////
  txHeader.DLC = 8; // Number of bites to be transmitted max- 8
 80001c4:	4b19      	ldr	r3, [pc, #100]	; (800022c <main+0xe0>)
 80001c6:	2208      	movs	r2, #8
 80001c8:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD;
 80001ca:	4b18      	ldr	r3, [pc, #96]	; (800022c <main+0xe0>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 80001d0:	4b16      	ldr	r3, [pc, #88]	; (800022c <main+0xe0>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x0155;
 80001d6:	4b15      	ldr	r3, [pc, #84]	; (800022c <main+0xe0>)
 80001d8:	f240 1255 	movw	r2, #341	; 0x155
 80001dc:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = 0x02;
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <main+0xe0>)
 80001e0:	2202      	movs	r2, #2
 80001e2:	605a      	str	r2, [r3, #4]
  txHeader.TransmitGlobalTime = DISABLE;
 80001e4:	4b11      	ldr	r3, [pc, #68]	; (800022c <main+0xe0>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	751a      	strb	r2, [r3, #20]
  //////////initialize CAN Bus //////////////
  HAL_CAN_ConfigFilter(&hcan,&canfil); //Initialize CAN Filter
 80001ea:	490f      	ldr	r1, [pc, #60]	; (8000228 <main+0xdc>)
 80001ec:	4810      	ldr	r0, [pc, #64]	; (8000230 <main+0xe4>)
 80001ee:	f001 f848 	bl	8001282 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan); //Initialize CAN Bus
 80001f2:	480f      	ldr	r0, [pc, #60]	; (8000230 <main+0xe4>)
 80001f4:	f001 f90e 	bl	8001414 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);// Initialize CAN Bus Rx Interrupt
 80001f8:	2102      	movs	r1, #2
 80001fa:	480d      	ldr	r0, [pc, #52]	; (8000230 <main+0xe4>)
 80001fc:	f001 fa5f 	bl	80016be <HAL_CAN_ActivateNotification>

  uint8_t csend[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}; // Tx Buffer
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <main+0xe8>)
 8000202:	463b      	mov	r3, r7
 8000204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000208:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  serial_port_yaz();
 800020c:	f000 f9f4 	bl	80005f8 <serial_port_yaz>
	  HAL_Delay(1000);
 8000210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000214:	f000 fd0e 	bl	8000c34 <HAL_Delay>
	  serial_port_yaz();
 8000218:	e7f8      	b.n	800020c <main+0xc0>
 800021a:	bf00      	nop
 800021c:	200004c0 	.word	0x200004c0
 8000220:	200001a4 	.word	0x200001a4
 8000224:	20000508 	.word	0x20000508
 8000228:	20000464 	.word	0x20000464
 800022c:	200003c8 	.word	0x200003c8
 8000230:	20000434 	.word	0x20000434
 8000234:	080097d8 	.word	0x080097d8

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	; 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f009 fa82 	bl	8009750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800026c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000284:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000288:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fb0e 	bl	80038b0 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029a:	f000 fa89 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 fd78 	bl	8003db0 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002c6:	f000 fa73 	bl	80007b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80002ca:	2312      	movs	r3, #18
 80002cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002d4:	2300      	movs	r3, #0
 80002d6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 ff04 	bl	80040e8 <HAL_RCCEx_PeriphCLKConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002e6:	f000 fa63 	bl	80007b0 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3750      	adds	r7, #80	; 0x50
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_ADC1_Init+0x74>)
 8000306:	4a19      	ldr	r2, [pc, #100]	; (800036c <MX_ADC1_Init+0x78>)
 8000308:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030a:	4b17      	ldr	r3, [pc, #92]	; (8000368 <MX_ADC1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_ADC1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <MX_ADC1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_ADC1_Init+0x74>)
 800031e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000322:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <MX_ADC1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_ADC1_Init+0x74>)
 800032c:	2201      	movs	r2, #1
 800032e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <MX_ADC1_Init+0x74>)
 8000332:	f000 fca1 	bl	8000c78 <HAL_ADC_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800033c:	f000 fa38 	bl	80007b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000340:	230a      	movs	r3, #10
 8000342:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000344:	2301      	movs	r3, #1
 8000346:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4619      	mov	r1, r3
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_ADC1_Init+0x74>)
 8000352:	f000 fd69 	bl	8000e28 <HAL_ADC_ConfigChannel>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800035c:	f000 fa28 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	2000048c 	.word	0x2000048c
 800036c:	40012400 	.word	0x40012400

08000370 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_CAN_Init+0x64>)
 8000376:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <MX_CAN_Init+0x68>)
 8000378:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <MX_CAN_Init+0x64>)
 800037c:	2209      	movs	r2, #9
 800037e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_CAN_Init+0x64>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000386:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <MX_CAN_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 800038c:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_CAN_Init+0x64>)
 800038e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000392:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_CAN_Init+0x64>)
 8000396:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800039a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <MX_CAN_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_CAN_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <MX_CAN_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_CAN_Init+0x64>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <MX_CAN_Init+0x64>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_CAN_Init+0x64>)
 80003bc:	2200      	movs	r2, #0
 80003be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <MX_CAN_Init+0x64>)
 80003c2:	f000 fe63 	bl	800108c <HAL_CAN_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80003cc:	f000 f9f0 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000434 	.word	0x20000434
 80003d8:	40006400 	.word	0x40006400

080003dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08e      	sub	sp, #56	; 0x38
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	f107 0320 	add.w	r3, r7, #32
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800040c:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <MX_TIM2_Init+0xe8>)
 800040e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <MX_TIM2_Init+0xe8>)
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <MX_TIM2_Init+0xe8>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <MX_TIM2_Init+0xe8>)
 8000422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000426:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000428:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <MX_TIM2_Init+0xe8>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800042e:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <MX_TIM2_Init+0xe8>)
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000434:	4823      	ldr	r0, [pc, #140]	; (80004c4 <MX_TIM2_Init+0xe8>)
 8000436:	f003 ff0d 	bl	8004254 <HAL_TIM_Base_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000440:	f000 f9b6 	bl	80007b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000448:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800044a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044e:	4619      	mov	r1, r3
 8000450:	481c      	ldr	r0, [pc, #112]	; (80004c4 <MX_TIM2_Init+0xe8>)
 8000452:	f004 f907 	bl	8004664 <HAL_TIM_ConfigClockSource>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800045c:	f000 f9a8 	bl	80007b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000460:	4818      	ldr	r0, [pc, #96]	; (80004c4 <MX_TIM2_Init+0xe8>)
 8000462:	f003 ff46 	bl	80042f2 <HAL_TIM_PWM_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800046c:	f000 f9a0 	bl	80007b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000478:	f107 0320 	add.w	r3, r7, #32
 800047c:	4619      	mov	r1, r3
 800047e:	4811      	ldr	r0, [pc, #68]	; (80004c4 <MX_TIM2_Init+0xe8>)
 8000480:	f004 fc4c 	bl	8004d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800048a:	f000 f991 	bl	80007b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800048e:	2360      	movs	r3, #96	; 0x60
 8000490:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	4619      	mov	r1, r3
 80004a4:	4807      	ldr	r0, [pc, #28]	; (80004c4 <MX_TIM2_Init+0xe8>)
 80004a6:	f004 f81f 	bl	80044e8 <HAL_TIM_PWM_ConfigChannel>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80004b0:	f000 f97e 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <MX_TIM2_Init+0xe8>)
 80004b6:	f000 fa71 	bl	800099c <HAL_TIM_MspPostInit>

}
 80004ba:	bf00      	nop
 80004bc:	3738      	adds	r7, #56	; 0x38
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200004c0 	.word	0x200004c0

080004c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004ce:	4a12      	ldr	r2, [pc, #72]	; (8000518 <MX_USART2_UART_Init+0x50>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_USART2_UART_Init+0x4c>)
 8000500:	f004 fc6a 	bl	8004dd8 <HAL_UART_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800050a:	f000 f951 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000508 	.word	0x20000508
 8000518:	40004400 	.word	0x40004400

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000530:	4b2d      	ldr	r3, [pc, #180]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a2c      	ldr	r2, [pc, #176]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000536:	f043 0310 	orr.w	r3, r3, #16
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b2a      	ldr	r3, [pc, #168]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0310 	and.w	r3, r3, #16
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800054e:	f043 0320 	orr.w	r3, r3, #32
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0320 	and.w	r3, r3, #32
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0304 	and.w	r3, r3, #4
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <MX_GPIO_Init+0xcc>)
 800057e:	f043 0308 	orr.w	r3, r3, #8
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MX_GPIO_Init+0xcc>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0308 	and.w	r3, r3, #8
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	4815      	ldr	r0, [pc, #84]	; (80005ec <MX_GPIO_Init+0xd0>)
 8000596:	f001 fdb3 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800059a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_GPIO_Init+0xd4>)
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	4811      	ldr	r0, [pc, #68]	; (80005f4 <MX_GPIO_Init+0xd8>)
 80005b0:	f001 fc4c 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005b4:	2320      	movs	r3, #32
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	4619      	mov	r1, r3
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <MX_GPIO_Init+0xd0>)
 80005cc:	f001 fc3e 	bl	8001e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	2028      	movs	r0, #40	; 0x28
 80005d6:	f001 fb8c 	bl	8001cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005da:	2028      	movs	r0, #40	; 0x28
 80005dc:	f001 fba5 	bl	8001d2a <HAL_NVIC_EnableIRQ>

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800
 80005f0:	10110000 	.word	0x10110000
 80005f4:	40011000 	.word	0x40011000

080005f8 <serial_port_yaz>:

/* USER CODE BEGIN 4 */


//Serial porta yazma işlemi yapılır...
void serial_port_yaz(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0

	for (int i = 0; i < 6; i++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e080      	b.n	8000706 <serial_port_yaz+0x10e>
		for (int j = 0; j < 1; j++) {
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	e077      	b.n	80006fa <serial_port_yaz+0x102>
			bilgi2[i][j] =' ';
 800060a:	4957      	ldr	r1, [pc, #348]	; (8000768 <serial_port_yaz+0x170>)
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	4613      	mov	r3, r2
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	4413      	add	r3, r2
 8000614:	18ca      	adds	r2, r1, r3
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	4413      	add	r3, r2
 800061a:	2220      	movs	r2, #32
 800061c:	701a      	strb	r2, [r3, #0]
			bilgi2[i][j + 1] = ' ';
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	1c59      	adds	r1, r3, #1
 8000622:	4851      	ldr	r0, [pc, #324]	; (8000768 <serial_port_yaz+0x170>)
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4613      	mov	r3, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	4413      	add	r3, r2
 800062c:	4403      	add	r3, r0
 800062e:	440b      	add	r3, r1
 8000630:	2220      	movs	r2, #32
 8000632:	701a      	strb	r2, [r3, #0]
			bilgi2[i][j + 2] = ' ';
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1c99      	adds	r1, r3, #2
 8000638:	484b      	ldr	r0, [pc, #300]	; (8000768 <serial_port_yaz+0x170>)
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	4613      	mov	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	4413      	add	r3, r2
 8000642:	4403      	add	r3, r0
 8000644:	440b      	add	r3, r1
 8000646:	2220      	movs	r2, #32
 8000648:	701a      	strb	r2, [r3, #0]
			bilgi2[i][j + 3] = ' ';
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	1cd9      	adds	r1, r3, #3
 800064e:	4846      	ldr	r0, [pc, #280]	; (8000768 <serial_port_yaz+0x170>)
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	4613      	mov	r3, r2
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	4413      	add	r3, r2
 8000658:	4403      	add	r3, r0
 800065a:	440b      	add	r3, r1
 800065c:	2220      	movs	r2, #32
 800065e:	701a      	strb	r2, [r3, #0]
			if (!stateofinput[i]) {
 8000660:	4a42      	ldr	r2, [pc, #264]	; (800076c <serial_port_yaz+0x174>)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d10b      	bne.n	8000684 <serial_port_yaz+0x8c>
				bilgi2[i][j + 4] = '1';
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	1d19      	adds	r1, r3, #4
 8000670:	483d      	ldr	r0, [pc, #244]	; (8000768 <serial_port_yaz+0x170>)
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	4613      	mov	r3, r2
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	4413      	add	r3, r2
 800067a:	4403      	add	r3, r0
 800067c:	440b      	add	r3, r1
 800067e:	2231      	movs	r2, #49	; 0x31
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	e00a      	b.n	800069a <serial_port_yaz+0xa2>
			} else {
				bilgi2[i][j + 4] = '0';
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	1d19      	adds	r1, r3, #4
 8000688:	4837      	ldr	r0, [pc, #220]	; (8000768 <serial_port_yaz+0x170>)
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	4413      	add	r3, r2
 8000692:	4403      	add	r3, r0
 8000694:	440b      	add	r3, r1
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	701a      	strb	r2, [r3, #0]
			}
			bilgi2[i][j + 5] = ' ';
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1d59      	adds	r1, r3, #5
 800069e:	4832      	ldr	r0, [pc, #200]	; (8000768 <serial_port_yaz+0x170>)
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	4613      	mov	r3, r2
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	4413      	add	r3, r2
 80006a8:	4403      	add	r3, r0
 80006aa:	440b      	add	r3, r1
 80006ac:	2220      	movs	r2, #32
 80006ae:	701a      	strb	r2, [r3, #0]
			bilgi2[i][j + 6] = ' ';
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	1d99      	adds	r1, r3, #6
 80006b4:	482c      	ldr	r0, [pc, #176]	; (8000768 <serial_port_yaz+0x170>)
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	4613      	mov	r3, r2
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	4413      	add	r3, r2
 80006be:	4403      	add	r3, r0
 80006c0:	440b      	add	r3, r1
 80006c2:	2220      	movs	r2, #32
 80006c4:	701a      	strb	r2, [r3, #0]
			bilgi2[i][j + 7] = ' ';
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	1dd9      	adds	r1, r3, #7
 80006ca:	4827      	ldr	r0, [pc, #156]	; (8000768 <serial_port_yaz+0x170>)
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	4613      	mov	r3, r2
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	4413      	add	r3, r2
 80006d4:	4403      	add	r3, r0
 80006d6:	440b      	add	r3, r1
 80006d8:	2220      	movs	r2, #32
 80006da:	701a      	strb	r2, [r3, #0]
			bilgi2[i][j + 8] = ' ';
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	f103 0108 	add.w	r1, r3, #8
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <serial_port_yaz+0x170>)
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	4613      	mov	r3, r2
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	4413      	add	r3, r2
 80006ec:	4403      	add	r3, r0
 80006ee:	440b      	add	r3, r1
 80006f0:	2220      	movs	r2, #32
 80006f2:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 1; j++) {
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	dd84      	ble.n	800060a <serial_port_yaz+0x12>
	for (int i = 0; i < 6; i++) {
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3301      	adds	r3, #1
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b05      	cmp	r3, #5
 800070a:	f77f af7b 	ble.w	8000604 <serial_port_yaz+0xc>
		}

	}
	HAL_UART_Transmit(&huart2, (uint8_t*)bilgi, 33, 100);
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <serial_port_yaz+0x178>)
 8000710:	6819      	ldr	r1, [r3, #0]
 8000712:	2364      	movs	r3, #100	; 0x64
 8000714:	2221      	movs	r2, #33	; 0x21
 8000716:	4817      	ldr	r0, [pc, #92]	; (8000774 <serial_port_yaz+0x17c>)
 8000718:	f004 fbab 	bl	8004e72 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)bilgi1, 54, 100);
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <serial_port_yaz+0x180>)
 800071e:	6819      	ldr	r1, [r3, #0]
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	2236      	movs	r2, #54	; 0x36
 8000724:	4813      	ldr	r0, [pc, #76]	; (8000774 <serial_port_yaz+0x17c>)
 8000726:	f004 fba4 	bl	8004e72 <HAL_UART_Transmit>
	for (int k=0;k<6;k++){
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	e00d      	b.n	800074c <serial_port_yaz+0x154>
		HAL_UART_Transmit(&huart2, (uint8_t*)bilgi2[k], 9, 100);
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	4413      	add	r3, r2
 8000738:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <serial_port_yaz+0x170>)
 800073a:	1899      	adds	r1, r3, r2
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	2209      	movs	r2, #9
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <serial_port_yaz+0x17c>)
 8000742:	f004 fb96 	bl	8004e72 <HAL_UART_Transmit>
	for (int k=0;k<6;k++){
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3301      	adds	r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b05      	cmp	r3, #5
 8000750:	ddee      	ble.n	8000730 <serial_port_yaz+0x138>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*)satir_sonu, 1, 100);
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <serial_port_yaz+0x184>)
 8000754:	6819      	ldr	r1, [r3, #0]
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2201      	movs	r2, #1
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <serial_port_yaz+0x17c>)
 800075c:	f004 fb89 	bl	8004e72 <HAL_UART_Transmit>
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200003fc 	.word	0x200003fc
 800076c:	2000045c 	.word	0x2000045c
 8000770:	20000000 	.word	0x20000000
 8000774:	20000508 	.word	0x20000508
 8000778:	20000004 	.word	0x20000004
 800077c:	20000008 	.word	0x20000008

08000780 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, stateofinput);
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800078a:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800078c:	2100      	movs	r1, #0
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 fe84 	bl	800149c <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000794:	2120      	movs	r1, #32
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000798:	f001 fcca 	bl	8002130 <HAL_GPIO_TogglePin>

}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000045c 	.word	0x2000045c
 80007a8:	200003e0 	.word	0x200003e0
 80007ac:	40010800 	.word	0x40010800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <Error_Handler+0x6>

080007b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_MspInit+0x5c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <HAL_MspInit+0x5c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_MspInit+0x5c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <HAL_MspInit+0x5c>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_MspInit+0x5c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_MspInit+0x5c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_MspInit+0x60>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_MspInit+0x60>)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40021000 	.word	0x40021000
 8000818:	40010000 	.word	0x40010000

0800081c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <HAL_ADC_MspInit+0x6c>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d121      	bne.n	8000880 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <HAL_ADC_MspInit+0x70>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a12      	ldr	r2, [pc, #72]	; (800088c <HAL_ADC_MspInit+0x70>)
 8000842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_ADC_MspInit+0x70>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_ADC_MspInit+0x70>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <HAL_ADC_MspInit+0x70>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_ADC_MspInit+0x70>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0310 	and.w	r3, r3, #16
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086c:	2301      	movs	r3, #1
 800086e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000870:	2303      	movs	r3, #3
 8000872:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <HAL_ADC_MspInit+0x74>)
 800087c:	f001 fae6 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40012400 	.word	0x40012400
 800088c:	40021000 	.word	0x40021000
 8000890:	40011000 	.word	0x40011000

08000894 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a29      	ldr	r2, [pc, #164]	; (8000954 <HAL_CAN_MspInit+0xc0>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d14b      	bne.n	800094c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <HAL_CAN_MspInit+0xc4>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	4a27      	ldr	r2, [pc, #156]	; (8000958 <HAL_CAN_MspInit+0xc4>)
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008be:	61d3      	str	r3, [r2, #28]
 80008c0:	4b25      	ldr	r3, [pc, #148]	; (8000958 <HAL_CAN_MspInit+0xc4>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <HAL_CAN_MspInit+0xc4>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a21      	ldr	r2, [pc, #132]	; (8000958 <HAL_CAN_MspInit+0xc4>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <HAL_CAN_MspInit+0xc4>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0308 	and.w	r3, r3, #8
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4818      	ldr	r0, [pc, #96]	; (800095c <HAL_CAN_MspInit+0xc8>)
 80008fa:	f001 faa7 	bl	8001e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <HAL_CAN_MspInit+0xc8>)
 8000914:	f001 fa9a 	bl	8001e4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_CAN_MspInit+0xcc>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_CAN_MspInit+0xcc>)
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2014      	movs	r0, #20
 8000942:	f001 f9d6 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000946:	2014      	movs	r0, #20
 8000948:	f001 f9ef 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40006400 	.word	0x40006400
 8000958:	40021000 	.word	0x40021000
 800095c:	40010c00 	.word	0x40010c00
 8000960:	40010000 	.word	0x40010000

08000964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000974:	d10b      	bne.n	800098e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_TIM_Base_MspInit+0x34>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_TIM_Base_MspInit+0x34>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_TIM_Base_MspInit+0x34>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ba:	d117      	bne.n	80009ec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_TIM_MspPostInit+0x58>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <HAL_TIM_MspPostInit+0x58>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_TIM_MspPostInit+0x58>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d4:	2301      	movs	r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2302      	movs	r3, #2
 80009de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4619      	mov	r1, r3
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <HAL_TIM_MspPostInit+0x5c>)
 80009e8:	f001 fa30 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010800 	.word	0x40010800

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <HAL_UART_MspInit+0x80>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d12b      	bne.n	8000a74 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_UART_MspInit+0x84>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <HAL_UART_MspInit+0x84>)
 8000a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a26:	61d3      	str	r3, [r2, #28]
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_UART_MspInit+0x84>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_UART_MspInit+0x84>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <HAL_UART_MspInit+0x84>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_UART_MspInit+0x84>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4809      	ldr	r0, [pc, #36]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a60:	f001 f9f4 	bl	8001e4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2026      	movs	r0, #38	; 0x26
 8000a6a:	f001 f942 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a6e:	2026      	movs	r0, #38	; 0x26
 8000a70:	f001 f95b 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40004400 	.word	0x40004400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010800 	.word	0x40010800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f895 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8000ade:	f000 fe13 	bl	8001708 <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8000ae4:	f001 fc91 	bl	800240a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000434 	.word	0x20000434
 8000af0:	200011e0 	.word	0x200011e0

08000af4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <USART2_IRQHandler+0x10>)
 8000afa:	f004 faa1 	bl	8005040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000508 	.word	0x20000508

08000b08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	//adc_okuma();

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b10:	f001 fb28 	bl	8002164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b26:	e003      	b.n	8000b30 <LoopCopyDataInit>

08000b28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b2e:	3104      	adds	r1, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b38:	d3f6      	bcc.n	8000b28 <CopyDataInit>
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b3c:	e002      	b.n	8000b44 <LoopFillZerobss>

08000b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b40:	f842 3b04 	str.w	r3, [r2], #4

08000b44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b48:	d3f9      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b4a:	f7ff ffe5 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f008 fddb 	bl	8009708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b52:	f7ff fafb 	bl	800014c <main>
  bx lr
 8000b56:	4770      	bx	lr
  ldr r3, =_sidata
 8000b58:	08009858 	.word	0x08009858
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b60:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 8000b64:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 8000b68:	200014cc 	.word	0x200014cc

08000b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_2_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x28>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x28>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f001 f8ab 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fe14 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f8c3 	bl	8001d46 <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f001 f88b 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000000c 	.word	0x2000000c
 8000bf4:	20000014 	.word	0x20000014
 8000bf8:	20000010 	.word	0x20000010

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x20>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <HAL_IncTick+0x20>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	20000014 	.word	0x20000014
 8000c1c:	20000548 	.word	0x20000548

08000c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <HAL_GetTick+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000548 	.word	0x20000548

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff fff0 	bl	8000c20 <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_Delay+0x40>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffe0 	bl	8000c20 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000014 	.word	0x20000014

08000c78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e0be      	b.n	8000e18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fdb0 	bl	800081c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f9ab 	bl	8001018 <ADC_ConversionStop_Disable>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 8099 	bne.w	8000e06 <HAL_ADC_Init+0x18e>
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8095 	bne.w	8000e06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ce4:	f023 0302 	bic.w	r3, r3, #2
 8000ce8:	f043 0202 	orr.w	r2, r3, #2
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cf8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7b1b      	ldrb	r3, [r3, #12]
 8000cfe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d10:	d003      	beq.n	8000d1a <HAL_ADC_Init+0xa2>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d102      	bne.n	8000d20 <HAL_ADC_Init+0xa8>
 8000d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1e:	e000      	b.n	8000d22 <HAL_ADC_Init+0xaa>
 8000d20:	2300      	movs	r3, #0
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7d1b      	ldrb	r3, [r3, #20]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d119      	bne.n	8000d64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7b1b      	ldrb	r3, [r3, #12]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d109      	bne.n	8000d4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	035a      	lsls	r2, r3, #13
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	e00b      	b.n	8000d64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	f043 0220 	orr.w	r2, r3, #32
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	f043 0201 	orr.w	r2, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	430a      	orrs	r2, r1
 8000d76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_ADC_Init+0x1a8>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d94:	d003      	beq.n	8000d9e <HAL_ADC_Init+0x126>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d104      	bne.n	8000da8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	051b      	lsls	r3, r3, #20
 8000da6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_ADC_Init+0x1ac>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d10b      	bne.n	8000de4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd6:	f023 0303 	bic.w	r3, r3, #3
 8000dda:	f043 0201 	orr.w	r2, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000de2:	e018      	b.n	8000e16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	f023 0312 	bic.w	r3, r3, #18
 8000dec:	f043 0210 	orr.w	r2, r3, #16
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df8:	f043 0201 	orr.w	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e04:	e007      	b.n	8000e16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f043 0210 	orr.w	r2, r3, #16
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	ffe1f7fd 	.word	0xffe1f7fd
 8000e24:	ff1f0efe 	.word	0xff1f0efe

08000e28 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <HAL_ADC_ConfigChannel+0x20>
 8000e44:	2302      	movs	r3, #2
 8000e46:	e0dc      	b.n	8001002 <HAL_ADC_ConfigChannel+0x1da>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b06      	cmp	r3, #6
 8000e56:	d81c      	bhi.n	8000e92 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	3b05      	subs	r3, #5
 8000e6a:	221f      	movs	r2, #31
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4019      	ands	r1, r3
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	3b05      	subs	r3, #5
 8000e84:	fa00 f203 	lsl.w	r2, r0, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e90:	e03c      	b.n	8000f0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b0c      	cmp	r3, #12
 8000e98:	d81c      	bhi.n	8000ed4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	3b23      	subs	r3, #35	; 0x23
 8000eac:	221f      	movs	r2, #31
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	4019      	ands	r1, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3b23      	subs	r3, #35	; 0x23
 8000ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ed2:	e01b      	b.n	8000f0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3b41      	subs	r3, #65	; 0x41
 8000ee6:	221f      	movs	r2, #31
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4019      	ands	r1, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	3b41      	subs	r3, #65	; 0x41
 8000f00:	fa00 f203 	lsl.w	r2, r0, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b09      	cmp	r3, #9
 8000f12:	d91c      	bls.n	8000f4e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68d9      	ldr	r1, [r3, #12]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	3b1e      	subs	r3, #30
 8000f26:	2207      	movs	r2, #7
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	4019      	ands	r1, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	6898      	ldr	r0, [r3, #8]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3b1e      	subs	r3, #30
 8000f40:	fa00 f203 	lsl.w	r2, r0, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	e019      	b.n	8000f82 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6919      	ldr	r1, [r3, #16]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	2207      	movs	r2, #7
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4019      	ands	r1, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	6898      	ldr	r0, [r3, #8]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	fa00 f203 	lsl.w	r2, r0, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b10      	cmp	r3, #16
 8000f88:	d003      	beq.n	8000f92 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f8e:	2b11      	cmp	r3, #17
 8000f90:	d132      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_ADC_ConfigChannel+0x1e4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d125      	bne.n	8000fe8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d126      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fb8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b10      	cmp	r3, #16
 8000fc0:	d11a      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	0c9a      	lsrs	r2, r3, #18
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fd8:	e002      	b.n	8000fe0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f9      	bne.n	8000fda <HAL_ADC_ConfigChannel+0x1b2>
 8000fe6:	e007      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	f043 0220 	orr.w	r2, r3, #32
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	40012400 	.word	0x40012400
 8001010:	2000000c 	.word	0x2000000c
 8001014:	431bde83 	.word	0x431bde83

08001018 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b01      	cmp	r3, #1
 8001030:	d127      	bne.n	8001082 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0201 	bic.w	r2, r2, #1
 8001040:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001042:	f7ff fded 	bl	8000c20 <HAL_GetTick>
 8001046:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001048:	e014      	b.n	8001074 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800104a:	f7ff fde9 	bl	8000c20 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d90d      	bls.n	8001074 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	f043 0210 	orr.w	r2, r3, #16
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	f043 0201 	orr.w	r2, r3, #1
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e007      	b.n	8001084 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b01      	cmp	r3, #1
 8001080:	d0e3      	beq.n	800104a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e0ed      	b.n	800127a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fbf2 	bl	8000894 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0202 	bic.w	r2, r2, #2
 80010be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c0:	f7ff fdae 	bl	8000c20 <HAL_GetTick>
 80010c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010c6:	e012      	b.n	80010ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c8:	f7ff fdaa 	bl	8000c20 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	d90b      	bls.n	80010ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2205      	movs	r2, #5
 80010e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0c5      	b.n	800127a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e5      	bne.n	80010c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800110c:	f7ff fd88 	bl	8000c20 <HAL_GetTick>
 8001110:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001112:	e012      	b.n	800113a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001114:	f7ff fd84 	bl	8000c20 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b0a      	cmp	r3, #10
 8001120:	d90b      	bls.n	800113a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2205      	movs	r2, #5
 8001132:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e09f      	b.n	800127a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0e5      	beq.n	8001114 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7e1b      	ldrb	r3, [r3, #24]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d108      	bne.n	8001162 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e007      	b.n	8001172 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7e5b      	ldrb	r3, [r3, #25]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e007      	b.n	800119c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800119a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7e9b      	ldrb	r3, [r3, #26]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d108      	bne.n	80011b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0220 	orr.w	r2, r2, #32
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e007      	b.n	80011c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0220 	bic.w	r2, r2, #32
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7edb      	ldrb	r3, [r3, #27]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d108      	bne.n	80011e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0210 	bic.w	r2, r2, #16
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e007      	b.n	80011f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0210 	orr.w	r2, r2, #16
 80011ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7f1b      	ldrb	r3, [r3, #28]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0208 	orr.w	r2, r2, #8
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e007      	b.n	800121a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0208 	bic.w	r2, r2, #8
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7f5b      	ldrb	r3, [r3, #29]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0204 	orr.w	r2, r2, #4
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e007      	b.n	8001244 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0204 	bic.w	r2, r2, #4
 8001242:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	ea42 0103 	orr.w	r1, r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001282:	b480      	push	{r7}
 8001284:	b087      	sub	sp, #28
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001298:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800129a:	7cfb      	ldrb	r3, [r7, #19]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d003      	beq.n	80012a8 <HAL_CAN_ConfigFilter+0x26>
 80012a0:	7cfb      	ldrb	r3, [r7, #19]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	f040 80aa 	bne.w	80013fc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	2201      	movs	r2, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d123      	bne.n	800132a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	401a      	ands	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001304:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3248      	adds	r2, #72	; 0x48
 800130a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800131e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	3348      	adds	r3, #72	; 0x48
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d122      	bne.n	8001378 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	431a      	orrs	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001352:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3248      	adds	r2, #72	; 0x48
 8001358:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800136c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800136e:	6979      	ldr	r1, [r7, #20]
 8001370:	3348      	adds	r3, #72	; 0x48
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001392:	e007      	b.n	80013a4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	431a      	orrs	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013be:	e007      	b.n	80013d0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013ee:	f023 0201 	bic.w	r2, r3, #1
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e006      	b.n	800140a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
  }
}
 800140a:	4618      	mov	r0, r3
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d12e      	bne.n	8001486 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001440:	f7ff fbee 	bl	8000c20 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001446:	e012      	b.n	800146e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001448:	f7ff fbea 	bl	8000c20 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b0a      	cmp	r3, #10
 8001454:	d90b      	bls.n	800146e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2205      	movs	r2, #5
 8001466:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e012      	b.n	8001494 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e5      	bne.n	8001448 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e006      	b.n	8001494 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
  }
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d003      	beq.n	80014c0 <HAL_CAN_GetRxMessage+0x24>
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	f040 80f3 	bne.w	80016a6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10e      	bne.n	80014e4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d116      	bne.n	8001502 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0e7      	b.n	80016b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d107      	bne.n	8001502 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0d8      	b.n	80016b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	331b      	adds	r3, #27
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0204 	and.w	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10c      	bne.n	800153a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	331b      	adds	r3, #27
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	4413      	add	r3, r2
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0d5b      	lsrs	r3, r3, #21
 8001530:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e00b      	b.n	8001552 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	331b      	adds	r3, #27
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	08db      	lsrs	r3, r3, #3
 800154a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	331b      	adds	r3, #27
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	4413      	add	r3, r2
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0202 	and.w	r2, r3, #2
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	331b      	adds	r3, #27
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	4413      	add	r3, r2
 8001574:	3304      	adds	r3, #4
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 020f 	and.w	r2, r3, #15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	331b      	adds	r3, #27
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	4413      	add	r3, r2
 800158c:	3304      	adds	r3, #4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	b2da      	uxtb	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	331b      	adds	r3, #27
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	4413      	add	r3, r2
 80015a4:	3304      	adds	r3, #4
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0c1b      	lsrs	r3, r3, #16
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0a1a      	lsrs	r2, r3, #8
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0c1a      	lsrs	r2, r3, #16
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3302      	adds	r3, #2
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0e1a      	lsrs	r2, r3, #24
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3303      	adds	r3, #3
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3304      	adds	r3, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0a1a      	lsrs	r2, r3, #8
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3305      	adds	r3, #5
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	4413      	add	r3, r2
 8001650:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	0c1a      	lsrs	r2, r3, #16
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3306      	adds	r3, #6
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	4413      	add	r3, r2
 800166a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0e1a      	lsrs	r2, r3, #24
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3307      	adds	r3, #7
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d108      	bne.n	8001692 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0220 	orr.w	r2, r2, #32
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	e007      	b.n	80016a2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0220 	orr.w	r2, r2, #32
 80016a0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e006      	b.n	80016b4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
  }
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016be:	b480      	push	{r7}
 80016c0:	b085      	sub	sp, #20
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d002      	beq.n	80016dc <HAL_CAN_ActivateNotification+0x1e>
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d109      	bne.n	80016f0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6959      	ldr	r1, [r3, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e006      	b.n	80016fe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
  }
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d07c      	beq.n	8001848 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d023      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f97d 	bl	8001a6a <HAL_CAN_TxMailbox0CompleteCallback>
 8001770:	e016      	b.n	80017a0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
 8001784:	e00c      	b.n	80017a0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
 8001798:	e002      	b.n	80017a0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f980 	bl	8001aa0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d024      	beq.n	80017f4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f95c 	bl	8001a7c <HAL_CAN_TxMailbox1CompleteCallback>
 80017c4:	e016      	b.n	80017f4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
 80017d8:	e00c      	b.n	80017f4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
 80017ec:	e002      	b.n	80017f4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f95f 	bl	8001ab2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d024      	beq.n	8001848 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001806:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f93b 	bl	8001a8e <HAL_CAN_TxMailbox2CompleteCallback>
 8001818:	e016      	b.n	8001848 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	e00c      	b.n	8001848 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
 8001840:	e002      	b.n	8001848 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f93e 	bl	8001ac4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00c      	beq.n	800186c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001862:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2210      	movs	r2, #16
 800186a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2208      	movs	r2, #8
 8001886:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f924 	bl	8001ad6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d009      	beq.n	80018ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe ff6a 	bl	8000780 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00c      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2210      	movs	r2, #16
 80018ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2208      	movs	r2, #8
 80018ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f904 	bl	8001afa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d009      	beq.n	8001910 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f8ec 	bl	8001ae8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2210      	movs	r2, #16
 800192a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f8ed 	bl	8001b0c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00b      	beq.n	8001954 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2208      	movs	r2, #8
 800194c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f8e5 	bl	8001b1e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d075      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d06c      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800198a:	2b00      	cmp	r3, #0
 800198c:	d008      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	f043 0302 	orr.w	r3, r3, #2
 800199e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d03d      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d038      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019d6:	2b30      	cmp	r3, #48	; 0x30
 80019d8:	d017      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x302>
 80019da:	2b30      	cmp	r3, #48	; 0x30
 80019dc:	d804      	bhi.n	80019e8 <HAL_CAN_IRQHandler+0x2e0>
 80019de:	2b10      	cmp	r3, #16
 80019e0:	d009      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x2ee>
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	d00c      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019e6:	e024      	b.n	8001a32 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80019e8:	2b50      	cmp	r3, #80	; 0x50
 80019ea:	d018      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x316>
 80019ec:	2b60      	cmp	r3, #96	; 0x60
 80019ee:	d01b      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x320>
 80019f0:	2b40      	cmp	r3, #64	; 0x40
 80019f2:	d00f      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x30c>
            break;
 80019f4:	e01d      	b.n	8001a32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019fe:	e018      	b.n	8001a32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	f043 0310 	orr.w	r3, r3, #16
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a08:	e013      	b.n	8001a32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f043 0320 	orr.w	r3, r3, #32
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a12:	e00e      	b.n	8001a32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a1c:	e009      	b.n	8001a32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a26:	e004      	b.n	8001a32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a30:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699a      	ldr	r2, [r3, #24]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a40:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2204      	movs	r2, #4
 8001a48:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f867 	bl	8001b30 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
	...

08001b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	60d3      	str	r3, [r2, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	f003 0307 	and.w	r3, r3, #7
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db0b      	blt.n	8001bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	4906      	ldr	r1, [pc, #24]	; (8001bdc <__NVIC_EnableIRQ+0x34>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	2001      	movs	r0, #1
 8001bca:	fa00 f202 	lsl.w	r2, r0, r2
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	; (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	; (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f7ff ff90 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff2d 	bl	8001b44 <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff42 	bl	8001b8c <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff90 	bl	8001c34 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5f 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff35 	bl	8001ba8 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa2 	bl	8001c98 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d005      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e051      	b.n	8001e26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 020e 	bic.w	r2, r2, #14
 8001d90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0201 	bic.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <HAL_DMA_Abort_IT+0xd0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d029      	beq.n	8001e00 <HAL_DMA_Abort_IT+0xa0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <HAL_DMA_Abort_IT+0xd4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d022      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x9c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_DMA_Abort_IT+0xd8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d01a      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x96>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_DMA_Abort_IT+0xdc>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d012      	beq.n	8001df0 <HAL_DMA_Abort_IT+0x90>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <HAL_DMA_Abort_IT+0xe0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00a      	beq.n	8001dea <HAL_DMA_Abort_IT+0x8a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1a      	ldr	r2, [pc, #104]	; (8001e44 <HAL_DMA_Abort_IT+0xe4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d102      	bne.n	8001de4 <HAL_DMA_Abort_IT+0x84>
 8001dde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001de2:	e00e      	b.n	8001e02 <HAL_DMA_Abort_IT+0xa2>
 8001de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001de8:	e00b      	b.n	8001e02 <HAL_DMA_Abort_IT+0xa2>
 8001dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dee:	e008      	b.n	8001e02 <HAL_DMA_Abort_IT+0xa2>
 8001df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df4:	e005      	b.n	8001e02 <HAL_DMA_Abort_IT+0xa2>
 8001df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dfa:	e002      	b.n	8001e02 <HAL_DMA_Abort_IT+0xa2>
 8001dfc:	2310      	movs	r3, #16
 8001dfe:	e000      	b.n	8001e02 <HAL_DMA_Abort_IT+0xa2>
 8001e00:	2301      	movs	r3, #1
 8001e02:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_DMA_Abort_IT+0xe8>)
 8001e04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
    } 
  }
  return status;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020008 	.word	0x40020008
 8001e34:	4002001c 	.word	0x4002001c
 8001e38:	40020030 	.word	0x40020030
 8001e3c:	40020044 	.word	0x40020044
 8001e40:	40020058 	.word	0x40020058
 8001e44:	4002006c 	.word	0x4002006c
 8001e48:	40020000 	.word	0x40020000

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b08b      	sub	sp, #44	; 0x2c
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	e127      	b.n	80020b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e60:	2201      	movs	r2, #1
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 8116 	bne.w	80020aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d034      	beq.n	8001ef0 <HAL_GPIO_Init+0xa4>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d80d      	bhi.n	8001ea6 <HAL_GPIO_Init+0x5a>
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d02b      	beq.n	8001ee6 <HAL_GPIO_Init+0x9a>
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d804      	bhi.n	8001e9c <HAL_GPIO_Init+0x50>
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d031      	beq.n	8001efa <HAL_GPIO_Init+0xae>
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d01c      	beq.n	8001ed4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e9a:	e048      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d043      	beq.n	8001f28 <HAL_GPIO_Init+0xdc>
 8001ea0:	2b11      	cmp	r3, #17
 8001ea2:	d01b      	beq.n	8001edc <HAL_GPIO_Init+0x90>
          break;
 8001ea4:	e043      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ea6:	4a89      	ldr	r2, [pc, #548]	; (80020cc <HAL_GPIO_Init+0x280>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d026      	beq.n	8001efa <HAL_GPIO_Init+0xae>
 8001eac:	4a87      	ldr	r2, [pc, #540]	; (80020cc <HAL_GPIO_Init+0x280>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d806      	bhi.n	8001ec0 <HAL_GPIO_Init+0x74>
 8001eb2:	4a87      	ldr	r2, [pc, #540]	; (80020d0 <HAL_GPIO_Init+0x284>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d020      	beq.n	8001efa <HAL_GPIO_Init+0xae>
 8001eb8:	4a86      	ldr	r2, [pc, #536]	; (80020d4 <HAL_GPIO_Init+0x288>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01d      	beq.n	8001efa <HAL_GPIO_Init+0xae>
          break;
 8001ebe:	e036      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ec0:	4a85      	ldr	r2, [pc, #532]	; (80020d8 <HAL_GPIO_Init+0x28c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d019      	beq.n	8001efa <HAL_GPIO_Init+0xae>
 8001ec6:	4a85      	ldr	r2, [pc, #532]	; (80020dc <HAL_GPIO_Init+0x290>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d016      	beq.n	8001efa <HAL_GPIO_Init+0xae>
 8001ecc:	4a84      	ldr	r2, [pc, #528]	; (80020e0 <HAL_GPIO_Init+0x294>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0xae>
          break;
 8001ed2:	e02c      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e028      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	623b      	str	r3, [r7, #32]
          break;
 8001ee4:	e023      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	3308      	adds	r3, #8
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e01e      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	330c      	adds	r3, #12
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e019      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f02:	2304      	movs	r3, #4
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e012      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f10:	2308      	movs	r3, #8
 8001f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	611a      	str	r2, [r3, #16]
          break;
 8001f1a:	e008      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	615a      	str	r2, [r3, #20]
          break;
 8001f26:	e002      	b.n	8001f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2bff      	cmp	r3, #255	; 0xff
 8001f32:	d801      	bhi.n	8001f38 <HAL_GPIO_Init+0xec>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	e001      	b.n	8001f3c <HAL_GPIO_Init+0xf0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2bff      	cmp	r3, #255	; 0xff
 8001f42:	d802      	bhi.n	8001f4a <HAL_GPIO_Init+0xfe>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_Init+0x104>
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	3b08      	subs	r3, #8
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	210f      	movs	r1, #15
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	401a      	ands	r2, r3
 8001f62:	6a39      	ldr	r1, [r7, #32]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8096 	beq.w	80020aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f7e:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <HAL_GPIO_Init+0x298>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_GPIO_Init+0x298>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6193      	str	r3, [r2, #24]
 8001f8a:	4b56      	ldr	r3, [pc, #344]	; (80020e4 <HAL_GPIO_Init+0x298>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f96:	4a54      	ldr	r2, [pc, #336]	; (80020e8 <HAL_GPIO_Init+0x29c>)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	; (80020ec <HAL_GPIO_Init+0x2a0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x19e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4a      	ldr	r2, [pc, #296]	; (80020f0 <HAL_GPIO_Init+0x2a4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x19a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a49      	ldr	r2, [pc, #292]	; (80020f4 <HAL_GPIO_Init+0x2a8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x196>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_GPIO_Init+0x2ac>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x192>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x1a0>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e004      	b.n	8001fec <HAL_GPIO_Init+0x1a0>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_Init+0x1a0>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x1a0>
 8001fea:	2300      	movs	r3, #0
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	f002 0203 	and.w	r2, r2, #3
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ffc:	493a      	ldr	r1, [pc, #232]	; (80020e8 <HAL_GPIO_Init+0x29c>)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4938      	ldr	r1, [pc, #224]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
 8002022:	e006      	b.n	8002032 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	43db      	mvns	r3, r3
 800202c:	4933      	ldr	r1, [pc, #204]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800202e:	4013      	ands	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	492e      	ldr	r1, [pc, #184]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
 800204a:	e006      	b.n	800205a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	43db      	mvns	r3, r3
 8002054:	4929      	ldr	r1, [pc, #164]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002056:	4013      	ands	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	4924      	ldr	r1, [pc, #144]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
 8002072:	e006      	b.n	8002082 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	43db      	mvns	r3, r3
 800207c:	491f      	ldr	r1, [pc, #124]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800207e:	4013      	ands	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	491a      	ldr	r1, [pc, #104]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	60cb      	str	r3, [r1, #12]
 800209a:	e006      	b.n	80020aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4915      	ldr	r1, [pc, #84]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	3301      	adds	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f47f aed0 	bne.w	8001e60 <HAL_GPIO_Init+0x14>
  }
}
 80020c0:	bf00      	nop
 80020c2:	372c      	adds	r7, #44	; 0x2c
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	10210000 	.word	0x10210000
 80020d0:	10110000 	.word	0x10110000
 80020d4:	10120000 	.word	0x10120000
 80020d8:	10310000 	.word	0x10310000
 80020dc:	10320000 	.word	0x10320000
 80020e0:	10220000 	.word	0x10220000
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40010800 	.word	0x40010800
 80020f0:	40010c00 	.word	0x40010c00
 80020f4:	40011000 	.word	0x40011000
 80020f8:	40011400 	.word	0x40011400
 80020fc:	40010400 	.word	0x40010400

08002100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
 800210c:	4613      	mov	r3, r2
 800210e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002110:	787b      	ldrb	r3, [r7, #1]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800211c:	e003      	b.n	8002126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	041a      	lsls	r2, r3, #16
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	611a      	str	r2, [r3, #16]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	041a      	lsls	r2, r3, #16
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	43d9      	mvns	r1, r3
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	400b      	ands	r3, r1
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
	...

08002164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f806 	bl	8002194 <HAL_GPIO_EXTI_Callback>
  }
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40010400 	.word	0x40010400

08002194 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021aa:	b08b      	sub	sp, #44	; 0x2c
 80021ac:	af06      	add	r7, sp, #24
 80021ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0fd      	b.n	80023b6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f006 fff0 	bl	80091b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2203      	movs	r2, #3
 80021d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fa5f 	bl	80056a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	687e      	ldr	r6, [r7, #4]
 80021ee:	466d      	mov	r5, sp
 80021f0:	f106 0410 	add.w	r4, r6, #16
 80021f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	602b      	str	r3, [r5, #0]
 80021fc:	1d33      	adds	r3, r6, #4
 80021fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002200:	6838      	ldr	r0, [r7, #0]
 8002202:	f003 fa29 	bl	8005658 <USB_CoreInit>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0ce      	b.n	80023b6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fa5a 	bl	80056d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e04c      	b.n	80022c4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	3301      	adds	r3, #1
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	b298      	uxth	r0, r3
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	3336      	adds	r3, #54	; 0x36
 8002268:	4602      	mov	r2, r0
 800226a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	3303      	adds	r3, #3
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	3338      	adds	r3, #56	; 0x38
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	333c      	adds	r3, #60	; 0x3c
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	3340      	adds	r3, #64	; 0x40
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	3301      	adds	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d3ad      	bcc.n	800222a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	e044      	b.n	800235e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	3301      	adds	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d3b5      	bcc.n	80022d4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	687e      	ldr	r6, [r7, #4]
 8002370:	466d      	mov	r5, sp
 8002372:	f106 0410 	add.w	r4, r6, #16
 8002376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	602b      	str	r3, [r5, #0]
 800237e:	1d33      	adds	r3, r6, #4
 8002380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	f003 f9b4 	bl	80056f0 <USB_DevInit>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e00d      	b.n	80023b6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f005 f94e 	bl	8007650 <USB_DevDisconnect>

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_PCD_Start+0x16>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e016      	b.n	8002402 <HAL_PCD_Start+0x44>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f003 f949 	bl	8005678 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80023e6:	2101      	movs	r1, #1
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f007 f956 	bl	800969a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f005 f922 	bl	800763c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b088      	sub	sp, #32
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f005 f924 	bl	8007664 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002426:	d102      	bne.n	800242e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fb61 	bl	8002af0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f005 f916 	bl	8007664 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002442:	d112      	bne.n	800246a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800244c:	b29a      	uxth	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002456:	b292      	uxth	r2, r2
 8002458:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f006 ff24 	bl	80092aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002462:	2100      	movs	r1, #0
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f925 	bl	80026b4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f005 f8f8 	bl	8007664 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800247e:	d10b      	bne.n	8002498 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002488:	b29a      	uxth	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002492:	b292      	uxth	r2, r2
 8002494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f005 f8e1 	bl	8007664 <USB_ReadInterrupts>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ac:	d10b      	bne.n	80024c6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c0:	b292      	uxth	r2, r2
 80024c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f005 f8ca 	bl	8007664 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024da:	d126      	bne.n	800252a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0204 	bic.w	r2, r2, #4
 80024ee:	b292      	uxth	r2, r2
 80024f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0208 	bic.w	r2, r2, #8
 8002506:	b292      	uxth	r2, r2
 8002508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f006 ff05 	bl	800931c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002524:	b292      	uxth	r2, r2
 8002526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f005 f898 	bl	8007664 <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800253a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800253e:	f040 8084 	bne.w	800264a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	77fb      	strb	r3, [r7, #31]
 8002546:	e011      	b.n	800256c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	7ffb      	ldrb	r3, [r7, #31]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	441a      	add	r2, r3
 8002554:	7ffb      	ldrb	r3, [r7, #31]
 8002556:	8812      	ldrh	r2, [r2, #0]
 8002558:	b292      	uxth	r2, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	f107 0120 	add.w	r1, r7, #32
 8002560:	440b      	add	r3, r1
 8002562:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002566:	7ffb      	ldrb	r3, [r7, #31]
 8002568:	3301      	adds	r3, #1
 800256a:	77fb      	strb	r3, [r7, #31]
 800256c:	7ffb      	ldrb	r3, [r7, #31]
 800256e:	2b07      	cmp	r3, #7
 8002570:	d9ea      	bls.n	8002548 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800257a:	b29a      	uxth	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	b292      	uxth	r2, r2
 8002586:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002592:	b29a      	uxth	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	b292      	uxth	r2, r2
 800259e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80025a2:	bf00      	nop
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f6      	beq.n	80025a4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c8:	b292      	uxth	r2, r2
 80025ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	77fb      	strb	r3, [r7, #31]
 80025d2:	e010      	b.n	80025f6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80025d4:	7ffb      	ldrb	r3, [r7, #31]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	4611      	mov	r1, r2
 80025dc:	7ffa      	ldrb	r2, [r7, #31]
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	440a      	add	r2, r1
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	f107 0120 	add.w	r1, r7, #32
 80025e8:	440b      	add	r3, r1
 80025ea:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80025ee:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80025f0:	7ffb      	ldrb	r3, [r7, #31]
 80025f2:	3301      	adds	r3, #1
 80025f4:	77fb      	strb	r3, [r7, #31]
 80025f6:	7ffb      	ldrb	r3, [r7, #31]
 80025f8:	2b07      	cmp	r3, #7
 80025fa:	d9eb      	bls.n	80025d4 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0208 	orr.w	r2, r2, #8
 800260e:	b292      	uxth	r2, r2
 8002610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002626:	b292      	uxth	r2, r2
 8002628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0204 	orr.w	r2, r2, #4
 800263e:	b292      	uxth	r2, r2
 8002640:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f006 fe4f 	bl	80092e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f005 f808 	bl	8007664 <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265e:	d10e      	bne.n	800267e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002672:	b292      	uxth	r2, r2
 8002674:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f006 fe08 	bl	800928e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f004 ffee 	bl	8007664 <USB_ReadInterrupts>
 8002688:	4603      	mov	r3, r0
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002692:	d10b      	bne.n	80026ac <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a6:	b292      	uxth	r2, r2
 80026a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_PCD_SetAddress+0x1a>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e013      	b.n	80026f6 <HAL_PCD_SetAddress+0x42>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 ff95 	bl	8007616 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	4608      	mov	r0, r1
 8002708:	4611      	mov	r1, r2
 800270a:	461a      	mov	r2, r3
 800270c:	4603      	mov	r3, r0
 800270e:	70fb      	strb	r3, [r7, #3]
 8002710:	460b      	mov	r3, r1
 8002712:	803b      	strh	r3, [r7, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800271c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002720:	2b00      	cmp	r3, #0
 8002722:	da0e      	bge.n	8002742 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	705a      	strb	r2, [r3, #1]
 8002740:	e00e      	b.n	8002760 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	f003 0207 	and.w	r2, r3, #7
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	b2da      	uxtb	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800276c:	883a      	ldrh	r2, [r7, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	78ba      	ldrb	r2, [r7, #2]
 8002776:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	785b      	ldrb	r3, [r3, #1]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800278a:	78bb      	ldrb	r3, [r7, #2]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d102      	bne.n	8002796 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_PCD_EP_Open+0xa6>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e00e      	b.n	80027c2 <HAL_PCD_EP_Open+0xc4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 ffbc 	bl	8005730 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80027c0:	7afb      	ldrb	r3, [r7, #11]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da0e      	bge.n	80027fc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	705a      	strb	r2, [r3, #1]
 80027fa:	e00e      	b.n	800281a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	f003 0207 	and.w	r2, r3, #7
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_PCD_EP_Close+0x6a>
 8002830:	2302      	movs	r3, #2
 8002832:	e00e      	b.n	8002852 <HAL_PCD_EP_Close+0x88>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68f9      	ldr	r1, [r7, #12]
 8002842:	4618      	mov	r0, r3
 8002844:	f003 fade 	bl	8005e04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	460b      	mov	r3, r1
 8002868:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800286a:	7afb      	ldrb	r3, [r7, #11]
 800286c:	f003 0207 	and.w	r2, r3, #7
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2200      	movs	r2, #0
 8002898:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289a:	7afb      	ldrb	r3, [r7, #11]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028a6:	7afb      	ldrb	r3, [r7, #11]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6979      	ldr	r1, [r7, #20]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 fc90 	bl	80061dc <USB_EPStartXfer>
 80028bc:	e005      	b.n	80028ca <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6979      	ldr	r1, [r7, #20]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fc89 	bl	80061dc <USB_EPStartXfer>
  }

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 0207 	and.w	r2, r3, #7
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	460b      	mov	r3, r1
 8002910:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4413      	add	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2200      	movs	r2, #0
 8002946:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2201      	movs	r2, #1
 800294c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800294e:	7afb      	ldrb	r3, [r7, #11]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	b2da      	uxtb	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800295a:	7afb      	ldrb	r3, [r7, #11]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6979      	ldr	r1, [r7, #20]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 fc36 	bl	80061dc <USB_EPStartXfer>
 8002970:	e005      	b.n	800297e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6979      	ldr	r1, [r7, #20]
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fc2f 	bl	80061dc <USB_EPStartXfer>
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 0207 	and.w	r2, r3, #7
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d901      	bls.n	80029a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e04c      	b.n	8002a40 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da0e      	bge.n	80029cc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	705a      	strb	r2, [r3, #1]
 80029ca:	e00c      	b.n	80029e6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_PCD_EP_SetStall+0x7e>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e01c      	b.n	8002a40 <HAL_PCD_EP_SetStall+0xb8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68f9      	ldr	r1, [r7, #12]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f004 fd01 	bl	800741c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d108      	bne.n	8002a36 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f004 fe26 	bl	8007682 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	f003 020f 	and.w	r2, r3, #15
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d901      	bls.n	8002a66 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e040      	b.n	8002ae8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da0e      	bge.n	8002a8c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	705a      	strb	r2, [r3, #1]
 8002a8a:	e00e      	b.n	8002aaa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	f003 0207 	and.w	r2, r3, #7
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_PCD_EP_ClrStall+0x82>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e00e      	b.n	8002ae8 <HAL_PCD_EP_ClrStall+0xa0>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68f9      	ldr	r1, [r7, #12]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f004 fcef 	bl	80074bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08e      	sub	sp, #56	; 0x38
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002af8:	e2df      	b.n	80030ba <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b02:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002b10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 8158 	bne.w	8002dca <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d152      	bne.n	8002bca <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b34:	81fb      	strh	r3, [r7, #14]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	89fb      	ldrh	r3, [r7, #14]
 8002b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3328      	adds	r3, #40	; 0x28
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	3302      	adds	r3, #2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	441a      	add	r2, r3
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b88:	2100      	movs	r1, #0
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f006 fb65 	bl	800925a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 828e 	beq.w	80030ba <PCD_EP_ISR_Handler+0x5ca>
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 8289 	bne.w	80030ba <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b292      	uxth	r2, r2
 8002bbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bc8:	e277      	b.n	80030ba <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d034      	beq.n	8002c4e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3306      	adds	r3, #6
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f004 fd7c 	bl	8007720 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c34:	4013      	ands	r3, r2
 8002c36:	823b      	strh	r3, [r7, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	8a3a      	ldrh	r2, [r7, #16]
 8002c3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c42:	b292      	uxth	r2, r2
 8002c44:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f006 fada 	bl	8009200 <HAL_PCD_SetupStageCallback>
 8002c4c:	e235      	b.n	80030ba <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c4e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f280 8231 	bge.w	80030ba <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c64:	4013      	ands	r3, r2
 8002c66:	83bb      	strh	r3, [r7, #28]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	8bba      	ldrh	r2, [r7, #28]
 8002c6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c72:	b292      	uxth	r2, r2
 8002c74:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3306      	adds	r3, #6
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d019      	beq.n	8002cde <PCD_EP_ISR_Handler+0x1ee>
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d015      	beq.n	8002cde <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	6959      	ldr	r1, [r3, #20]
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f004 fd2c 	bl	8007720 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f006 faa3 	bl	8009224 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	61bb      	str	r3, [r7, #24]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d112      	bne.n	8002d2c <PCD_EP_ISR_Handler+0x23c>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	801a      	strh	r2, [r3, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	e02f      	b.n	8002d8c <PCD_EP_ISR_Handler+0x29c>
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b3e      	cmp	r3, #62	; 0x3e
 8002d32:	d813      	bhi.n	8002d5c <PCD_EP_ISR_Handler+0x26c>
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <PCD_EP_ISR_Handler+0x25e>
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	029b      	lsls	r3, r3, #10
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e017      	b.n	8002d8c <PCD_EP_ISR_Handler+0x29c>
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <PCD_EP_ISR_Handler+0x286>
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	3b01      	subs	r3, #1
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	029b      	lsls	r3, r3, #10
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9c:	827b      	strh	r3, [r7, #18]
 8002d9e:	8a7b      	ldrh	r3, [r7, #18]
 8002da0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002da4:	827b      	strh	r3, [r7, #18]
 8002da6:	8a7b      	ldrh	r3, [r7, #18]
 8002da8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002dac:	827b      	strh	r3, [r7, #18]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	8a7b      	ldrh	r3, [r7, #18]
 8002db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	8013      	strh	r3, [r2, #0]
 8002dc8:	e177      	b.n	80030ba <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ddc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f280 80ea 	bge.w	8002fba <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	853b      	strh	r3, [r7, #40]	; 0x28
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e14:	b292      	uxth	r2, r2
 8002e16:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e18:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	7b1b      	ldrb	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d122      	bne.n	8002e7c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3306      	adds	r3, #6
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002e60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8087 	beq.w	8002f76 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	6959      	ldr	r1, [r3, #20]
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	88da      	ldrh	r2, [r3, #6]
 8002e74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e76:	f004 fc53 	bl	8007720 <USB_ReadPMA>
 8002e7a:	e07c      	b.n	8002f76 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	78db      	ldrb	r3, [r3, #3]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d108      	bne.n	8002e96 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e86:	461a      	mov	r2, r3
 8002e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f923 	bl	80030d6 <HAL_PCD_EP_DB_Receive>
 8002e90:	4603      	mov	r3, r0
 8002e92:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002e94:	e06f      	b.n	8002f76 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb0:	847b      	strh	r3, [r7, #34]	; 0x22
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	441a      	add	r2, r3
 8002ec0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ece:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d021      	beq.n	8002f34 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	3302      	adds	r3, #2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f18:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02a      	beq.n	8002f76 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	6959      	ldr	r1, [r3, #20]
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	891a      	ldrh	r2, [r3, #8]
 8002f2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f2e:	f004 fbf7 	bl	8007720 <USB_ReadPMA>
 8002f32:	e020      	b.n	8002f76 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	3306      	adds	r3, #6
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	6959      	ldr	r1, [r3, #20]
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	895a      	ldrh	r2, [r3, #10]
 8002f70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f72:	f004 fbd5 	bl	8007720 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f7c:	441a      	add	r2, r3
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f88:	441a      	add	r2, r3
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <PCD_EP_ISR_Handler+0x4b0>
 8002f96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d206      	bcs.n	8002fae <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f006 f93c 	bl	8009224 <HAL_PCD_DataOutStageCallback>
 8002fac:	e005      	b.n	8002fba <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 f911 	bl	80061dc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002fba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d07a      	beq.n	80030ba <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002fc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	843b      	strh	r3, [r7, #32]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	8c3b      	ldrh	r3, [r7, #32]
 8003004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800300c:	b29b      	uxth	r3, r3
 800300e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	78db      	ldrb	r3, [r3, #3]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d108      	bne.n	800302a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800301c:	2b02      	cmp	r3, #2
 800301e:	d146      	bne.n	80030ae <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003020:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d141      	bne.n	80030ae <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	3302      	adds	r3, #2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003052:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	8bfb      	ldrh	r3, [r7, #30]
 800305a:	429a      	cmp	r2, r3
 800305c:	d906      	bls.n	800306c <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	8bfb      	ldrh	r3, [r7, #30]
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	619a      	str	r2, [r3, #24]
 800306a:	e002      	b.n	8003072 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f006 f8ea 	bl	800925a <HAL_PCD_DataInStageCallback>
 8003086:	e018      	b.n	80030ba <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	8bfb      	ldrh	r3, [r7, #30]
 800308e:	441a      	add	r2, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	8bfb      	ldrh	r3, [r7, #30]
 800309a:	441a      	add	r2, r3
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 f898 	bl	80061dc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80030ac:	e005      	b.n	80030ba <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030b0:	461a      	mov	r2, r3
 80030b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f91b 	bl	80032f0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f6ff ad17 	blt.w	8002afa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3738      	adds	r7, #56	; 0x38
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b088      	sub	sp, #32
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	4613      	mov	r3, r2
 80030e2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d07e      	beq.n	80031ec <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	3302      	adds	r3, #2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003116:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	8b7b      	ldrh	r3, [r7, #26]
 800311e:	429a      	cmp	r2, r3
 8003120:	d306      	bcc.n	8003130 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	8b7b      	ldrh	r3, [r7, #26]
 8003128:	1ad2      	subs	r2, r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	619a      	str	r2, [r3, #24]
 800312e:	e002      	b.n	8003136 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d123      	bne.n	8003186 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003158:	833b      	strh	r3, [r7, #24]
 800315a:	8b3b      	ldrh	r3, [r7, #24]
 800315c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003160:	833b      	strh	r3, [r7, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	441a      	add	r2, r3
 8003170:	8b3b      	ldrh	r3, [r7, #24]
 8003172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800317a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003182:	b29b      	uxth	r3, r3
 8003184:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01f      	beq.n	80031d0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	82fb      	strh	r3, [r7, #22]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	8afb      	ldrh	r3, [r7, #22]
 80031bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031d0:	8b7b      	ldrh	r3, [r7, #26]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8087 	beq.w	80032e6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6959      	ldr	r1, [r3, #20]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	891a      	ldrh	r2, [r3, #8]
 80031e4:	8b7b      	ldrh	r3, [r7, #26]
 80031e6:	f004 fa9b 	bl	8007720 <USB_ReadPMA>
 80031ea:	e07c      	b.n	80032e6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	3306      	adds	r3, #6
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003214:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	8b7b      	ldrh	r3, [r7, #26]
 800321c:	429a      	cmp	r2, r3
 800321e:	d306      	bcc.n	800322e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	8b7b      	ldrh	r3, [r7, #26]
 8003226:	1ad2      	subs	r2, r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	619a      	str	r2, [r3, #24]
 800322c:	e002      	b.n	8003234 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d123      	bne.n	8003284 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	83fb      	strh	r3, [r7, #30]
 8003258:	8bfb      	ldrh	r3, [r7, #30]
 800325a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800325e:	83fb      	strh	r3, [r7, #30]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	8bfb      	ldrh	r3, [r7, #30]
 8003270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003280:	b29b      	uxth	r3, r3
 8003282:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11f      	bne.n	80032ce <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a8:	83bb      	strh	r3, [r7, #28]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	441a      	add	r2, r3
 80032b8:	8bbb      	ldrh	r3, [r7, #28]
 80032ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032ce:	8b7b      	ldrh	r3, [r7, #26]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6959      	ldr	r1, [r3, #20]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	895a      	ldrh	r2, [r3, #10]
 80032e0:	8b7b      	ldrh	r3, [r7, #26]
 80032e2:	f004 fa1d 	bl	8007720 <USB_ReadPMA>
    }
  }

  return count;
 80032e6:	8b7b      	ldrh	r3, [r7, #26]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b092      	sub	sp, #72	; 0x48
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8132 	beq.w	800356e <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	3302      	adds	r3, #2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003332:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800333a:	429a      	cmp	r2, r3
 800333c:	d906      	bls.n	800334c <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003344:	1ad2      	subs	r2, r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	619a      	str	r2, [r3, #24]
 800334a:	e002      	b.n	8003352 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d12c      	bne.n	80033b4 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	4619      	mov	r1, r3
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f005 ff7a 	bl	800925a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 822f 	beq.w	80037d0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338c:	827b      	strh	r3, [r7, #18]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	441a      	add	r2, r3
 800339c:	8a7b      	ldrh	r3, [r7, #18]
 800339e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	8013      	strh	r3, [r2, #0]
 80033b2:	e20d      	b.n	80037d0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01f      	beq.n	80033fe <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	441a      	add	r2, r3
 80033e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003404:	2b01      	cmp	r3, #1
 8003406:	f040 81e3 	bne.w	80037d0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003410:	441a      	add	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800341c:	441a      	add	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	429a      	cmp	r2, r3
 800342c:	d309      	bcc.n	8003442 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	1ad2      	subs	r2, r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	621a      	str	r2, [r3, #32]
 8003440:	e014      	b.n	800346c <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800344a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800344c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003456:	e009      	b.n	800346c <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2200      	movs	r2, #0
 800346a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d155      	bne.n	8003520 <HAL_PCD_EP_DB_Transmit+0x230>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003482:	b29b      	uxth	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	4413      	add	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	011a      	lsls	r2, r3, #4
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	4413      	add	r3, r2
 8003496:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d112      	bne.n	80034c8 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	801a      	strh	r2, [r3, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	801a      	strh	r2, [r3, #0]
 80034c6:	e047      	b.n	8003558 <HAL_PCD_EP_DB_Transmit+0x268>
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	2b3e      	cmp	r3, #62	; 0x3e
 80034cc:	d811      	bhi.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x202>
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	3301      	adds	r3, #1
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	029b      	lsls	r3, r3, #10
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	801a      	strh	r2, [r3, #0]
 80034f0:	e032      	b.n	8003558 <HAL_PCD_EP_DB_Transmit+0x268>
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <HAL_PCD_EP_DB_Transmit+0x218>
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003504:	3b01      	subs	r3, #1
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	b29b      	uxth	r3, r3
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	b29b      	uxth	r3, r3
 8003510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003518:	b29a      	uxth	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	e01b      	b.n	8003558 <HAL_PCD_EP_DB_Transmit+0x268>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d117      	bne.n	8003558 <HAL_PCD_EP_DB_Transmit+0x268>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	4413      	add	r3, r2
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	011a      	lsls	r2, r3, #4
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	4413      	add	r3, r2
 800354a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	b29a      	uxth	r2, r3
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6959      	ldr	r1, [r3, #20]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	891a      	ldrh	r2, [r3, #8]
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	b29b      	uxth	r3, r3
 8003568:	f004 f896 	bl	8007698 <USB_WritePMA>
 800356c:	e130      	b.n	80037d0 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	3306      	adds	r3, #6
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003596:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800359e:	429a      	cmp	r2, r3
 80035a0:	d306      	bcc.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	619a      	str	r2, [r3, #24]
 80035ae:	e002      	b.n	80035b6 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2200      	movs	r2, #0
 80035b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d12c      	bne.n	8003618 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	4619      	mov	r1, r3
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f005 fe48 	bl	800925a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 80fd 	bne.w	80037d0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	441a      	add	r2, r3
 8003600:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800360a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800360e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003612:	b29b      	uxth	r3, r3
 8003614:	8013      	strh	r3, [r2, #0]
 8003616:	e0db      	b.n	80037d0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11f      	bne.n	8003662 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	441a      	add	r2, r3
 800364c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800364e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800365a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365e:	b29b      	uxth	r3, r3
 8003660:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003668:	2b01      	cmp	r3, #1
 800366a:	f040 80b1 	bne.w	80037d0 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003674:	441a      	add	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003680:	441a      	add	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6a1a      	ldr	r2, [r3, #32]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	429a      	cmp	r2, r3
 8003690:	d309      	bcc.n	80036a6 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	1ad2      	subs	r2, r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	621a      	str	r2, [r3, #32]
 80036a4:	e014      	b.n	80036d0 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80036ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036b0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036ba:	e009      	b.n	80036d0 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	785b      	ldrb	r3, [r3, #1]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d155      	bne.n	800378a <HAL_PCD_EP_DB_Transmit+0x49a>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	647b      	str	r3, [r7, #68]	; 0x44
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f2:	4413      	add	r3, r2
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	011a      	lsls	r2, r3, #4
 80036fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fe:	4413      	add	r3, r2
 8003700:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003704:	643b      	str	r3, [r7, #64]	; 0x40
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b00      	cmp	r3, #0
 800370a:	d112      	bne.n	8003732 <HAL_PCD_EP_DB_Transmit+0x442>
 800370c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003716:	b29a      	uxth	r2, r3
 8003718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371a:	801a      	strh	r2, [r3, #0]
 800371c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	b29b      	uxth	r3, r3
 8003722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800372a:	b29a      	uxth	r2, r3
 800372c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372e:	801a      	strh	r2, [r3, #0]
 8003730:	e044      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003734:	2b3e      	cmp	r3, #62	; 0x3e
 8003736:	d811      	bhi.n	800375c <HAL_PCD_EP_DB_Transmit+0x46c>
 8003738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_PCD_EP_DB_Transmit+0x45e>
 8003748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374a:	3301      	adds	r3, #1
 800374c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003750:	b29b      	uxth	r3, r3
 8003752:	029b      	lsls	r3, r3, #10
 8003754:	b29a      	uxth	r2, r3
 8003756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	e02f      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x4cc>
 800375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <HAL_PCD_EP_DB_Transmit+0x482>
 800376c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376e:	3b01      	subs	r3, #1
 8003770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003774:	b29b      	uxth	r3, r3
 8003776:	029b      	lsls	r3, r3, #10
 8003778:	b29b      	uxth	r3, r3
 800377a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800377e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003782:	b29a      	uxth	r2, r3
 8003784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003786:	801a      	strh	r2, [r3, #0]
 8003788:	e018      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x4cc>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d114      	bne.n	80037bc <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379a:	b29b      	uxth	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a0:	4413      	add	r3, r2
 80037a2:	637b      	str	r3, [r7, #52]	; 0x34
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	011a      	lsls	r2, r3, #4
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	4413      	add	r3, r2
 80037ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6959      	ldr	r1, [r3, #20]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	895a      	ldrh	r2, [r3, #10]
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f003 ff64 	bl	8007698 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ea:	823b      	strh	r3, [r7, #16]
 80037ec:	8a3b      	ldrh	r3, [r7, #16]
 80037ee:	f083 0310 	eor.w	r3, r3, #16
 80037f2:	823b      	strh	r3, [r7, #16]
 80037f4:	8a3b      	ldrh	r3, [r7, #16]
 80037f6:	f083 0320 	eor.w	r3, r3, #32
 80037fa:	823b      	strh	r3, [r7, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	441a      	add	r2, r3
 800380a:	8a3b      	ldrh	r3, [r7, #16]
 800380c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381c:	b29b      	uxth	r3, r3
 800381e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3748      	adds	r7, #72	; 0x48
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800382a:	b480      	push	{r7}
 800382c:	b087      	sub	sp, #28
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	817b      	strh	r3, [r7, #10]
 8003838:	4613      	mov	r3, r2
 800383a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800383c:	897b      	ldrh	r3, [r7, #10]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00b      	beq.n	8003860 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003848:	897b      	ldrh	r3, [r7, #10]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e009      	b.n	8003874 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003860:	897a      	ldrh	r2, [r7, #10]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4413      	add	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003874:	893b      	ldrh	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d107      	bne.n	800388a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	b29a      	uxth	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	80da      	strh	r2, [r3, #6]
 8003888:	e00b      	b.n	80038a2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2201      	movs	r2, #1
 800388e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	b29a      	uxth	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	0c1b      	lsrs	r3, r3, #16
 800389c:	b29a      	uxth	r2, r3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e26c      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8087 	beq.w	80039de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038d0:	4b92      	ldr	r3, [pc, #584]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d00c      	beq.n	80038f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038dc:	4b8f      	ldr	r3, [pc, #572]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d112      	bne.n	800390e <HAL_RCC_OscConfig+0x5e>
 80038e8:	4b8c      	ldr	r3, [pc, #560]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d10b      	bne.n	800390e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f6:	4b89      	ldr	r3, [pc, #548]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d06c      	beq.n	80039dc <HAL_RCC_OscConfig+0x12c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d168      	bne.n	80039dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e246      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003916:	d106      	bne.n	8003926 <HAL_RCC_OscConfig+0x76>
 8003918:	4b80      	ldr	r3, [pc, #512]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a7f      	ldr	r2, [pc, #508]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800391e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e02e      	b.n	8003984 <HAL_RCC_OscConfig+0xd4>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0x98>
 800392e:	4b7b      	ldr	r3, [pc, #492]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7a      	ldr	r2, [pc, #488]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b78      	ldr	r3, [pc, #480]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a77      	ldr	r2, [pc, #476]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e01d      	b.n	8003984 <HAL_RCC_OscConfig+0xd4>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003950:	d10c      	bne.n	800396c <HAL_RCC_OscConfig+0xbc>
 8003952:	4b72      	ldr	r3, [pc, #456]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a71      	ldr	r2, [pc, #452]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b6f      	ldr	r3, [pc, #444]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a6e      	ldr	r2, [pc, #440]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e00b      	b.n	8003984 <HAL_RCC_OscConfig+0xd4>
 800396c:	4b6b      	ldr	r3, [pc, #428]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a6a      	ldr	r2, [pc, #424]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b68      	ldr	r3, [pc, #416]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a67      	ldr	r2, [pc, #412]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800397e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003982:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fd f948 	bl	8000c20 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003994:	f7fd f944 	bl	8000c20 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e1fa      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0xe4>
 80039b2:	e014      	b.n	80039de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fd f934 	bl	8000c20 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fd f930 	bl	8000c20 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e1e6      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x10c>
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d063      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ea:	4b4c      	ldr	r3, [pc, #304]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039f6:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d11c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x18c>
 8003a02:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d116      	bne.n	8003a3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_RCC_OscConfig+0x176>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e1ba      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a26:	4b3d      	ldr	r3, [pc, #244]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4939      	ldr	r1, [pc, #228]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	e03a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a44:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fd f8e9 	bl	8000c20 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a52:	f7fd f8e5 	bl	8000c20 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e19b      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a64:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a70:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4927      	ldr	r1, [pc, #156]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	600b      	str	r3, [r1, #0]
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd f8c8 	bl	8000c20 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a94:	f7fd f8c4 	bl	8000c20 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e17a      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d03a      	beq.n	8003b34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d019      	beq.n	8003afa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac6:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003acc:	f7fd f8a8 	bl	8000c20 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad4:	f7fd f8a4 	bl	8000c20 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e15a      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003af2:	2001      	movs	r0, #1
 8003af4:	f000 fada 	bl	80040ac <RCC_Delay>
 8003af8:	e01c      	b.n	8003b34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_RCC_OscConfig+0x274>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b00:	f7fd f88e 	bl	8000c20 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b06:	e00f      	b.n	8003b28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fd f88a 	bl	8000c20 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d908      	bls.n	8003b28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e140      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	42420000 	.word	0x42420000
 8003b24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b28:	4b9e      	ldr	r3, [pc, #632]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e9      	bne.n	8003b08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80a6 	beq.w	8003c8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b46:	4b97      	ldr	r3, [pc, #604]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b52:	4b94      	ldr	r3, [pc, #592]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	4a93      	ldr	r2, [pc, #588]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	61d3      	str	r3, [r2, #28]
 8003b5e:	4b91      	ldr	r3, [pc, #580]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4b8e      	ldr	r3, [pc, #568]	; (8003da8 <HAL_RCC_OscConfig+0x4f8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d118      	bne.n	8003bac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7a:	4b8b      	ldr	r3, [pc, #556]	; (8003da8 <HAL_RCC_OscConfig+0x4f8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a8a      	ldr	r2, [pc, #552]	; (8003da8 <HAL_RCC_OscConfig+0x4f8>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b86:	f7fd f84b 	bl	8000c20 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8e:	f7fd f847 	bl	8000c20 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b64      	cmp	r3, #100	; 0x64
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e0fd      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	4b81      	ldr	r3, [pc, #516]	; (8003da8 <HAL_RCC_OscConfig+0x4f8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x312>
 8003bb4:	4b7b      	ldr	r3, [pc, #492]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4a7a      	ldr	r2, [pc, #488]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6213      	str	r3, [r2, #32]
 8003bc0:	e02d      	b.n	8003c1e <HAL_RCC_OscConfig+0x36e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x334>
 8003bca:	4b76      	ldr	r3, [pc, #472]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4a75      	ldr	r2, [pc, #468]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6213      	str	r3, [r2, #32]
 8003bd6:	4b73      	ldr	r3, [pc, #460]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4a72      	ldr	r2, [pc, #456]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	6213      	str	r3, [r2, #32]
 8003be2:	e01c      	b.n	8003c1e <HAL_RCC_OscConfig+0x36e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCC_OscConfig+0x356>
 8003bec:	4b6d      	ldr	r3, [pc, #436]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4a6c      	ldr	r2, [pc, #432]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	6213      	str	r3, [r2, #32]
 8003bf8:	4b6a      	ldr	r3, [pc, #424]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a69      	ldr	r2, [pc, #420]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	e00b      	b.n	8003c1e <HAL_RCC_OscConfig+0x36e>
 8003c06:	4b67      	ldr	r3, [pc, #412]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4a66      	ldr	r2, [pc, #408]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6213      	str	r3, [r2, #32]
 8003c12:	4b64      	ldr	r3, [pc, #400]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a63      	ldr	r2, [pc, #396]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d015      	beq.n	8003c52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c26:	f7fc fffb 	bl	8000c20 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fc fff7 	bl	8000c20 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e0ab      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	4b57      	ldr	r3, [pc, #348]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ee      	beq.n	8003c2e <HAL_RCC_OscConfig+0x37e>
 8003c50:	e014      	b.n	8003c7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c52:	f7fc ffe5 	bl	8000c20 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fc ffe1 	bl	8000c20 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e095      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c70:	4b4c      	ldr	r3, [pc, #304]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ee      	bne.n	8003c5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d105      	bne.n	8003c8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b48      	ldr	r3, [pc, #288]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4a47      	ldr	r2, [pc, #284]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8081 	beq.w	8003d9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c98:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d061      	beq.n	8003d68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d146      	bne.n	8003d3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_RCC_OscConfig+0x4fc>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fc ffb5 	bl	8000c20 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fc ffb1 	bl	8000c20 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e067      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ccc:	4b35      	ldr	r3, [pc, #212]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d108      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ce2:	4b30      	ldr	r3, [pc, #192]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	492d      	ldr	r1, [pc, #180]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a19      	ldr	r1, [r3, #32]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	430b      	orrs	r3, r1
 8003d06:	4927      	ldr	r1, [pc, #156]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0c:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_OscConfig+0x4fc>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fc ff85 	bl	8000c20 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fc ff81 	bl	8000c20 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e037      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x46a>
 8003d38:	e02f      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <HAL_RCC_OscConfig+0x4fc>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fc ff6e 	bl	8000c20 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fc ff6a 	bl	8000c20 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e020      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5a:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x498>
 8003d66:	e018      	b.n	8003d9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e013      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_OscConfig+0x4f4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d106      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40007000 	.word	0x40007000
 8003dac:	42420060 	.word	0x42420060

08003db0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0d0      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d910      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 0207 	bic.w	r2, r3, #7
 8003dda:	4965      	ldr	r1, [pc, #404]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0b8      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e24:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4a52      	ldr	r2, [pc, #328]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	494d      	ldr	r1, [pc, #308]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d040      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d115      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6e:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e073      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e06b      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8e:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f023 0203 	bic.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4936      	ldr	r1, [pc, #216]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea0:	f7fc febe 	bl	8000c20 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea8:	f7fc feba 	bl	8000c20 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e053      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebe:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 020c 	and.w	r2, r3, #12
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d1eb      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d210      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 0207 	bic.w	r2, r3, #7
 8003ee6:	4922      	ldr	r1, [pc, #136]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e032      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4916      	ldr	r1, [pc, #88]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	490e      	ldr	r1, [pc, #56]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f3e:	f000 f821 	bl	8003f84 <HAL_RCC_GetSysClockFreq>
 8003f42:	4601      	mov	r1, r0
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003f50:	5cd3      	ldrb	r3, [r2, r3]
 8003f52:	fa21 f303 	lsr.w	r3, r1, r3
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1cc>)
 8003f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1d0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fc fe1c 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40022000 	.word	0x40022000
 8003f74:	40021000 	.word	0x40021000
 8003f78:	08009838 	.word	0x08009838
 8003f7c:	2000000c 	.word	0x2000000c
 8003f80:	20000010 	.word	0x20000010

08003f84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f84:	b490      	push	{r4, r7}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f8a:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f8c:	1d3c      	adds	r4, r7, #4
 8003f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f94:	4b28      	ldr	r3, [pc, #160]	; (8004038 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fae:	4b23      	ldr	r3, [pc, #140]	; (800403c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d002      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d003      	beq.n	8003fca <HAL_RCC_GetSysClockFreq+0x46>
 8003fc2:	e02d      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fc4:	4b1e      	ldr	r3, [pc, #120]	; (8004040 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fc6:	623b      	str	r3, [r7, #32]
      break;
 8003fc8:	e02d      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	0c9b      	lsrs	r3, r3, #18
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fdc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	0c5b      	lsrs	r3, r3, #17
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ffc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004002:	fb02 f203 	mul.w	r2, r2, r3
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	e004      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	4a0c      	ldr	r2, [pc, #48]	; (8004044 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	623b      	str	r3, [r7, #32]
      break;
 800401e:	e002      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004022:	623b      	str	r3, [r7, #32]
      break;
 8004024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004026:	6a3b      	ldr	r3, [r7, #32]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3728      	adds	r7, #40	; 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	bc90      	pop	{r4, r7}
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	080097e0 	.word	0x080097e0
 8004038:	080097f0 	.word	0x080097f0
 800403c:	40021000 	.word	0x40021000
 8004040:	007a1200 	.word	0x007a1200
 8004044:	003d0900 	.word	0x003d0900

08004048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800404c:	4b02      	ldr	r3, [pc, #8]	; (8004058 <HAL_RCC_GetHCLKFreq+0x10>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	2000000c 	.word	0x2000000c

0800405c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004060:	f7ff fff2 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 8004064:	4601      	mov	r1, r0
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4a03      	ldr	r2, [pc, #12]	; (8004080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004072:	5cd3      	ldrb	r3, [r2, r3]
 8004074:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	08009848 	.word	0x08009848

08004084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004088:	f7ff ffde 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 800408c:	4601      	mov	r1, r0
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	0adb      	lsrs	r3, r3, #11
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4a03      	ldr	r2, [pc, #12]	; (80040a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800409a:	5cd3      	ldrb	r3, [r2, r3]
 800409c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	08009848 	.word	0x08009848

080040ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <RCC_Delay+0x34>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <RCC_Delay+0x38>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0a5b      	lsrs	r3, r3, #9
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040c8:	bf00      	nop
  }
  while (Delay --);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1e5a      	subs	r2, r3, #1
 80040ce:	60fa      	str	r2, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f9      	bne.n	80040c8 <RCC_Delay+0x1c>
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	2000000c 	.word	0x2000000c
 80040e4:	10624dd3 	.word	0x10624dd3

080040e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d07d      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004104:	2300      	movs	r3, #0
 8004106:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004108:	4b4f      	ldr	r3, [pc, #316]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004114:	4b4c      	ldr	r3, [pc, #304]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	4a4b      	ldr	r2, [pc, #300]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	61d3      	str	r3, [r2, #28]
 8004120:	4b49      	ldr	r3, [pc, #292]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412c:	2301      	movs	r3, #1
 800412e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004130:	4b46      	ldr	r3, [pc, #280]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d118      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413c:	4b43      	ldr	r3, [pc, #268]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a42      	ldr	r2, [pc, #264]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004148:	f7fc fd6a 	bl	8000c20 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414e:	e008      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004150:	f7fc fd66 	bl	8000c20 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e06d      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004162:	4b3a      	ldr	r3, [pc, #232]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800416e:	4b36      	ldr	r3, [pc, #216]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d02e      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	429a      	cmp	r2, r3
 800418a:	d027      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800418c:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004194:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004196:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800419c:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041a2:	4a29      	ldr	r2, [pc, #164]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d014      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fc fd35 	bl	8000c20 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	e00a      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fc fd31 	bl	8000c20 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e036      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d0:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ee      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4917      	ldr	r1, [pc, #92]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d105      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	4a13      	ldr	r2, [pc, #76]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	490b      	ldr	r1, [pc, #44]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	4904      	ldr	r1, [pc, #16]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	40007000 	.word	0x40007000
 8004250:	42420440 	.word	0x42420440

08004254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e041      	b.n	80042ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fc fb72 	bl	8000964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f000 fa9e 	bl	80047d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e041      	b.n	8004388 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f839 	bl	8004390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	4619      	mov	r1, r3
 8004330:	4610      	mov	r0, r2
 8004332:	f000 fa4f 	bl	80047d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr
	...

080043a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d109      	bne.n	80043c8 <HAL_TIM_PWM_Start+0x24>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e022      	b.n	800440e <HAL_TIM_PWM_Start+0x6a>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d109      	bne.n	80043e2 <HAL_TIM_PWM_Start+0x3e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	bf14      	ite	ne
 80043da:	2301      	movne	r3, #1
 80043dc:	2300      	moveq	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e015      	b.n	800440e <HAL_TIM_PWM_Start+0x6a>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d109      	bne.n	80043fc <HAL_TIM_PWM_Start+0x58>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e008      	b.n	800440e <HAL_TIM_PWM_Start+0x6a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e05e      	b.n	80044d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0x82>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004424:	e013      	b.n	800444e <HAL_TIM_PWM_Start+0xaa>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Start+0x92>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004434:	e00b      	b.n	800444e <HAL_TIM_PWM_Start+0xaa>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Start+0xa2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004444:	e003      	b.n	800444e <HAL_TIM_PWM_Start+0xaa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2201      	movs	r2, #1
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fc3c 	bl	8004cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <HAL_TIM_PWM_Start+0x138>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d107      	bne.n	8004476 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a18      	ldr	r2, [pc, #96]	; (80044dc <HAL_TIM_PWM_Start+0x138>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_TIM_PWM_Start+0xfa>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d009      	beq.n	800449e <HAL_TIM_PWM_Start+0xfa>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <HAL_TIM_PWM_Start+0x13c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIM_PWM_Start+0xfa>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <HAL_TIM_PWM_Start+0x140>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d111      	bne.n	80044c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d010      	beq.n	80044d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c0:	e007      	b.n	80044d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40000800 	.word	0x40000800

080044e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e0ac      	b.n	800465c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b0c      	cmp	r3, #12
 800450e:	f200 809f 	bhi.w	8004650 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	0800454d 	.word	0x0800454d
 800451c:	08004651 	.word	0x08004651
 8004520:	08004651 	.word	0x08004651
 8004524:	08004651 	.word	0x08004651
 8004528:	0800458d 	.word	0x0800458d
 800452c:	08004651 	.word	0x08004651
 8004530:	08004651 	.word	0x08004651
 8004534:	08004651 	.word	0x08004651
 8004538:	080045cf 	.word	0x080045cf
 800453c:	08004651 	.word	0x08004651
 8004540:	08004651 	.word	0x08004651
 8004544:	08004651 	.word	0x08004651
 8004548:	0800460f 	.word	0x0800460f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f9a0 	bl	8004898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0208 	orr.w	r2, r2, #8
 8004566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0204 	bic.w	r2, r2, #4
 8004576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6999      	ldr	r1, [r3, #24]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	619a      	str	r2, [r3, #24]
      break;
 800458a:	e062      	b.n	8004652 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f9e6 	bl	8004964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6999      	ldr	r1, [r3, #24]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	021a      	lsls	r2, r3, #8
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	619a      	str	r2, [r3, #24]
      break;
 80045cc:	e041      	b.n	8004652 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fa2f 	bl	8004a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0208 	orr.w	r2, r2, #8
 80045e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0204 	bic.w	r2, r2, #4
 80045f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69d9      	ldr	r1, [r3, #28]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	61da      	str	r2, [r3, #28]
      break;
 800460c:	e021      	b.n	8004652 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fa79 	bl	8004b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	021a      	lsls	r2, r3, #8
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	61da      	str	r2, [r3, #28]
      break;
 800464e:	e000      	b.n	8004652 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004650:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_TIM_ConfigClockSource+0x18>
 8004678:	2302      	movs	r3, #2
 800467a:	e0a6      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x166>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800469a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d067      	beq.n	8004784 <HAL_TIM_ConfigClockSource+0x120>
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d80b      	bhi.n	80046d0 <HAL_TIM_ConfigClockSource+0x6c>
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d073      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0x140>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d802      	bhi.n	80046c6 <HAL_TIM_ConfigClockSource+0x62>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d06f      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046c4:	e078      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d06c      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0x140>
 80046ca:	2b30      	cmp	r3, #48	; 0x30
 80046cc:	d06a      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80046ce:	e073      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046d0:	2b70      	cmp	r3, #112	; 0x70
 80046d2:	d00d      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0x8c>
 80046d4:	2b70      	cmp	r3, #112	; 0x70
 80046d6:	d804      	bhi.n	80046e2 <HAL_TIM_ConfigClockSource+0x7e>
 80046d8:	2b50      	cmp	r3, #80	; 0x50
 80046da:	d033      	beq.n	8004744 <HAL_TIM_ConfigClockSource+0xe0>
 80046dc:	2b60      	cmp	r3, #96	; 0x60
 80046de:	d041      	beq.n	8004764 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80046e0:	e06a      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e6:	d066      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x152>
 80046e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ec:	d017      	beq.n	800471e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80046ee:	e063      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6899      	ldr	r1, [r3, #8]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f000 fac9 	bl	8004c96 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004712:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	609a      	str	r2, [r3, #8]
      break;
 800471c:	e04c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6899      	ldr	r1, [r3, #8]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f000 fab2 	bl	8004c96 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004740:	609a      	str	r2, [r3, #8]
      break;
 8004742:	e039      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	461a      	mov	r2, r3
 8004752:	f000 fa29 	bl	8004ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2150      	movs	r1, #80	; 0x50
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fa80 	bl	8004c62 <TIM_ITRx_SetConfig>
      break;
 8004762:	e029      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6859      	ldr	r1, [r3, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	461a      	mov	r2, r3
 8004772:	f000 fa47 	bl	8004c04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2160      	movs	r1, #96	; 0x60
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fa70 	bl	8004c62 <TIM_ITRx_SetConfig>
      break;
 8004782:	e019      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	461a      	mov	r2, r3
 8004792:	f000 fa09 	bl	8004ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2140      	movs	r1, #64	; 0x40
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fa60 	bl	8004c62 <TIM_ITRx_SetConfig>
      break;
 80047a2:	e009      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f000 fa57 	bl	8004c62 <TIM_ITRx_SetConfig>
        break;
 80047b4:	e000      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80047b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a29      	ldr	r2, [pc, #164]	; (800488c <TIM_Base_SetConfig+0xb8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x30>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x30>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a26      	ldr	r2, [pc, #152]	; (8004890 <TIM_Base_SetConfig+0xbc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x30>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a25      	ldr	r2, [pc, #148]	; (8004894 <TIM_Base_SetConfig+0xc0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <TIM_Base_SetConfig+0xb8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00b      	beq.n	8004836 <TIM_Base_SetConfig+0x62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d007      	beq.n	8004836 <TIM_Base_SetConfig+0x62>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a19      	ldr	r2, [pc, #100]	; (8004890 <TIM_Base_SetConfig+0xbc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_Base_SetConfig+0x62>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a18      	ldr	r2, [pc, #96]	; (8004894 <TIM_Base_SetConfig+0xc0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a07      	ldr	r2, [pc, #28]	; (800488c <TIM_Base_SetConfig+0xb8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d103      	bne.n	800487c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	615a      	str	r2, [r3, #20]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800

08004898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f023 0201 	bic.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 0302 	bic.w	r3, r3, #2
 80048e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <TIM_OC1_SetConfig+0xc8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d10c      	bne.n	800490e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f023 0308 	bic.w	r3, r3, #8
 80048fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f023 0304 	bic.w	r3, r3, #4
 800490c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a13      	ldr	r2, [pc, #76]	; (8004960 <TIM_OC1_SetConfig+0xc8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d111      	bne.n	800493a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800491c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40012c00 	.word	0x40012c00

08004964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f023 0320 	bic.w	r3, r3, #32
 80049ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <TIM_OC2_SetConfig+0xd0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d10d      	bne.n	80049e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <TIM_OC2_SetConfig+0xd0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d113      	bne.n	8004a10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr
 8004a34:	40012c00 	.word	0x40012c00

08004a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0303 	bic.w	r3, r3, #3
 8004a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	021b      	lsls	r3, r3, #8
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <TIM_OC3_SetConfig+0xd0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d10d      	bne.n	8004ab2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <TIM_OC3_SetConfig+0xd0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d113      	bne.n	8004ae2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	621a      	str	r2, [r3, #32]
}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40012c00 	.word	0x40012c00

08004b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	031b      	lsls	r3, r3, #12
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a0f      	ldr	r2, [pc, #60]	; (8004ba4 <TIM_OC4_SetConfig+0x98>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d109      	bne.n	8004b80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	019b      	lsls	r3, r3, #6
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	40012c00 	.word	0x40012c00

08004ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f023 0201 	bic.w	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f023 030a 	bic.w	r3, r3, #10
 8004be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	621a      	str	r2, [r3, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f023 0210 	bic.w	r2, r3, #16
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	031b      	lsls	r3, r3, #12
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	621a      	str	r2, [r3, #32]
}
 8004c58:	bf00      	nop
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f043 0307 	orr.w	r3, r3, #7
 8004c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	609a      	str	r2, [r3, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b087      	sub	sp, #28
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	021a      	lsls	r2, r3, #8
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	609a      	str	r2, [r3, #8]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a1a      	ldr	r2, [r3, #32]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a1a      	ldr	r2, [r3, #32]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr

08004d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e046      	b.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d80:	d009      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a10      	ldr	r2, [pc, #64]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10c      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800

08004dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e03f      	b.n	8004e6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fb fdfc 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fb8d 	bl	800553c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b08a      	sub	sp, #40	; 0x28
 8004e76:	af02      	add	r7, sp, #8
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d17c      	bne.n	8004f8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_UART_Transmit+0x2c>
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e075      	b.n	8004f8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UART_Transmit+0x3e>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e06e      	b.n	8004f8e <HAL_UART_Transmit+0x11c>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2221      	movs	r2, #33	; 0x21
 8004ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004ec6:	f7fb feab 	bl	8000c20 <HAL_GetTick>
 8004eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	88fa      	ldrh	r2, [r7, #6]
 8004ed0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	88fa      	ldrh	r2, [r7, #6]
 8004ed6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee0:	d108      	bne.n	8004ef4 <HAL_UART_Transmit+0x82>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	e003      	b.n	8004efc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004f04:	e02a      	b.n	8004f5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2180      	movs	r1, #128	; 0x80
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f9b0 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e036      	b.n	8004f8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10b      	bne.n	8004f3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	3302      	adds	r3, #2
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	e007      	b.n	8004f4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	781a      	ldrb	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1cf      	bne.n	8004f06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2140      	movs	r1, #64	; 0x40
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f980 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d140      	bne.n	8005032 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_UART_Receive_IT+0x26>
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e039      	b.n	8005034 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Receive_IT+0x38>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e032      	b.n	8005034 <HAL_UART_Receive_IT+0x9e>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	88fa      	ldrh	r2, [r7, #6]
 8004fe0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	88fa      	ldrh	r2, [r7, #6]
 8004fe6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2222      	movs	r2, #34	; 0x22
 8004ff2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800500c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0220 	orr.w	r2, r2, #32
 800502c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005032:	2302      	movs	r3, #2
  }
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
	...

08005040 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10d      	bne.n	8005092 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_UART_IRQHandler+0x52>
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f9d5 	bl	800543a <UART_Receive_IT>
      return;
 8005090:	e0d1      	b.n	8005236 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80b0 	beq.w	80051fa <HAL_UART_IRQHandler+0x1ba>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <HAL_UART_IRQHandler+0x70>
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 80a5 	beq.w	80051fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_UART_IRQHandler+0x90>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c8:	f043 0201 	orr.w	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_UART_IRQHandler+0xb0>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	f043 0202 	orr.w	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_UART_IRQHandler+0xd0>
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	f043 0204 	orr.w	r2, r3, #4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00f      	beq.n	800513a <HAL_UART_IRQHandler+0xfa>
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <HAL_UART_IRQHandler+0xee>
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	f043 0208 	orr.w	r2, r3, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d078      	beq.n	8005234 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_UART_IRQHandler+0x11c>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f96f 	bl	800543a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf14      	ite	ne
 800516a:	2301      	movne	r3, #1
 800516c:	2300      	moveq	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <HAL_UART_IRQHandler+0x144>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d031      	beq.n	80051e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f8c0 	bl	800530a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d023      	beq.n	80051e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d013      	beq.n	80051d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b4:	4a21      	ldr	r2, [pc, #132]	; (800523c <HAL_UART_IRQHandler+0x1fc>)
 80051b6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fc fdcf 	bl	8001d60 <HAL_DMA_Abort_IT>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d016      	beq.n	80051f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051d2:	4610      	mov	r0, r2
 80051d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d6:	e00e      	b.n	80051f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f843 	bl	8005264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051de:	e00a      	b.n	80051f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f83f 	bl	8005264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e6:	e006      	b.n	80051f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f83b 	bl	8005264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80051f4:	e01e      	b.n	8005234 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f6:	bf00      	nop
    return;
 80051f8:	e01c      	b.n	8005234 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_UART_IRQHandler+0x1d6>
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8ac 	bl	800536c <UART_Transmit_IT>
    return;
 8005214:	e00f      	b.n	8005236 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_UART_IRQHandler+0x1f6>
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8ed 	bl	800540a <UART_EndTransmit_IT>
    return;
 8005230:	bf00      	nop
 8005232:	e000      	b.n	8005236 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005234:	bf00      	nop
  }
}
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	08005345 	.word	0x08005345

08005240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr

08005276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005286:	e02c      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d028      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005296:	f7fb fcc3 	bl	8000c20 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d21d      	bcs.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e00f      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	bf0c      	ite	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	2300      	movne	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d0c3      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005320:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0201 	bic.w	r2, r2, #1
 8005330:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff ff80 	bl	8005264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b21      	cmp	r3, #33	; 0x21
 800537e:	d13e      	bne.n	80053fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005388:	d114      	bne.n	80053b4 <UART_Transmit_IT+0x48>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d110      	bne.n	80053b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	1c9a      	adds	r2, r3, #2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	621a      	str	r2, [r3, #32]
 80053b2:	e008      	b.n	80053c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	1c59      	adds	r1, r3, #1
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6211      	str	r1, [r2, #32]
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4619      	mov	r1, r3
 80053d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10f      	bne.n	80053fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr

0800540a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005420:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff ff08 	bl	8005240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b22      	cmp	r3, #34	; 0x22
 800544c:	d170      	bne.n	8005530 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005456:	d117      	bne.n	8005488 <UART_Receive_IT+0x4e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d113      	bne.n	8005488 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005476:	b29a      	uxth	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	1c9a      	adds	r2, r3, #2
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	629a      	str	r2, [r3, #40]	; 0x28
 8005486:	e026      	b.n	80054d6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549a:	d007      	beq.n	80054ac <UART_Receive_IT+0x72>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <UART_Receive_IT+0x80>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	e008      	b.n	80054cc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29b      	uxth	r3, r3
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4619      	mov	r1, r3
 80054e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d120      	bne.n	800552c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0220 	bic.w	r2, r2, #32
 80054f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005508:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff fe95 	bl	8005252 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	e002      	b.n	8005532 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	e000      	b.n	8005532 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8005530:	2302      	movs	r3, #2
  }
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005576:	f023 030c 	bic.w	r3, r3, #12
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	430b      	orrs	r3, r1
 8005582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a2c      	ldr	r2, [pc, #176]	; (8005650 <UART_SetConfig+0x114>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d103      	bne.n	80055ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055a4:	f7fe fd6e 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	e002      	b.n	80055b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055ac:	f7fe fd56 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 80055b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009a      	lsls	r2, r3, #2
 80055bc:	441a      	add	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	4a22      	ldr	r2, [pc, #136]	; (8005654 <UART_SetConfig+0x118>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	0119      	lsls	r1, r3, #4
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009a      	lsls	r2, r3, #2
 80055dc:	441a      	add	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80055e8:	4b1a      	ldr	r3, [pc, #104]	; (8005654 <UART_SetConfig+0x118>)
 80055ea:	fba3 0302 	umull	r0, r3, r3, r2
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	2064      	movs	r0, #100	; 0x64
 80055f2:	fb00 f303 	mul.w	r3, r0, r3
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	3332      	adds	r3, #50	; 0x32
 80055fc:	4a15      	ldr	r2, [pc, #84]	; (8005654 <UART_SetConfig+0x118>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005608:	4419      	add	r1, r3
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009a      	lsls	r2, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005620:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <UART_SetConfig+0x118>)
 8005622:	fba3 0302 	umull	r0, r3, r3, r2
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	2064      	movs	r0, #100	; 0x64
 800562a:	fb00 f303 	mul.w	r3, r0, r3
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	3332      	adds	r3, #50	; 0x32
 8005634:	4a07      	ldr	r2, [pc, #28]	; (8005654 <UART_SetConfig+0x118>)
 8005636:	fba2 2303 	umull	r2, r3, r2, r3
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	f003 020f 	and.w	r2, r3, #15
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	440a      	add	r2, r1
 8005646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40013800 	.word	0x40013800
 8005654:	51eb851f 	.word	0x51eb851f

08005658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005658:	b084      	sub	sp, #16
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	f107 0014 	add.w	r0, r7, #20
 8005666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	b004      	add	sp, #16
 8005676:	4770      	bx	lr

08005678 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005688:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800568c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	b29a      	uxth	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr

080056a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80056b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	43db      	mvns	r3, r3
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	4013      	ands	r3, r2
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056f0:	b084      	sub	sp, #16
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	f107 0014 	add.w	r0, r7, #20
 80056fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	b004      	add	sp, #16
 800572e:	4770      	bx	lr

08005730 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005730:	b480      	push	{r7}
 8005732:	b09b      	sub	sp, #108	; 0x6c
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	78db      	ldrb	r3, [r3, #3]
 800575e:	2b03      	cmp	r3, #3
 8005760:	d81f      	bhi.n	80057a2 <USB_ActivateEndpoint+0x72>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <USB_ActivateEndpoint+0x38>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005779 	.word	0x08005779
 800576c:	08005795 	.word	0x08005795
 8005770:	080057ab 	.word	0x080057ab
 8005774:	08005787 	.word	0x08005787
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005778:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800577c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005780:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005784:	e012      	b.n	80057ac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005786:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800578a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800578e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005792:	e00b      	b.n	80057ac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005794:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005798:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800579c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80057a0:	e004      	b.n	80057ac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80057a8:	e000      	b.n	80057ac <USB_ActivateEndpoint+0x7c>
      break;
 80057aa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	441a      	add	r2, r3
 80057b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80057ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	441a      	add	r2, r3
 80057fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	b29b      	uxth	r3, r3
 8005812:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	7b1b      	ldrb	r3, [r3, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f040 8149 	bne.w	8005ab0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 8084 	beq.w	8005930 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005832:	b29b      	uxth	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4413      	add	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	011a      	lsls	r2, r3, #4
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	88db      	ldrh	r3, [r3, #6]
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	b29b      	uxth	r3, r3
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	81fb      	strh	r3, [r7, #14]
 800586a:	89fb      	ldrh	r3, [r7, #14]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <USB_ActivateEndpoint+0x17c>
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	81bb      	strh	r3, [r7, #12]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	441a      	add	r2, r3
 8005896:	89bb      	ldrh	r3, [r7, #12]
 8005898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	78db      	ldrb	r3, [r3, #3]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d020      	beq.n	80058f6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ca:	813b      	strh	r3, [r7, #8]
 80058cc:	893b      	ldrh	r3, [r7, #8]
 80058ce:	f083 0320 	eor.w	r3, r3, #32
 80058d2:	813b      	strh	r3, [r7, #8]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	441a      	add	r2, r3
 80058de:	893b      	ldrh	r3, [r7, #8]
 80058e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8013      	strh	r3, [r2, #0]
 80058f4:	e27f      	b.n	8005df6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800590c:	817b      	strh	r3, [r7, #10]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	897b      	ldrh	r3, [r7, #10]
 800591a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]
 800592e:	e262      	b.n	8005df6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593a:	b29b      	uxth	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	4413      	add	r3, r2
 8005942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	011a      	lsls	r2, r3, #4
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	4413      	add	r3, r2
 800594e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005952:	62bb      	str	r3, [r7, #40]	; 0x28
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	88db      	ldrh	r3, [r3, #6]
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	b29b      	uxth	r3, r3
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596e:	b29b      	uxth	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	4413      	add	r3, r2
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	011a      	lsls	r2, r3, #4
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	4413      	add	r3, r2
 8005982:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005986:	623b      	str	r3, [r7, #32]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d112      	bne.n	80059b6 <USB_ActivateEndpoint+0x286>
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800599a:	b29a      	uxth	r2, r3
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	801a      	strh	r2, [r3, #0]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	e02f      	b.n	8005a16 <USB_ActivateEndpoint+0x2e6>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b3e      	cmp	r3, #62	; 0x3e
 80059bc:	d813      	bhi.n	80059e6 <USB_ActivateEndpoint+0x2b6>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	663b      	str	r3, [r7, #96]	; 0x60
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <USB_ActivateEndpoint+0x2a8>
 80059d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059d4:	3301      	adds	r3, #1
 80059d6:	663b      	str	r3, [r7, #96]	; 0x60
 80059d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059da:	b29b      	uxth	r3, r3
 80059dc:	029b      	lsls	r3, r3, #10
 80059de:	b29a      	uxth	r2, r3
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	801a      	strh	r2, [r3, #0]
 80059e4:	e017      	b.n	8005a16 <USB_ActivateEndpoint+0x2e6>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	663b      	str	r3, [r7, #96]	; 0x60
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <USB_ActivateEndpoint+0x2d0>
 80059fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059fc:	3b01      	subs	r3, #1
 80059fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005a00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	029b      	lsls	r3, r3, #10
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	83fb      	strh	r3, [r7, #30]
 8005a24:	8bfb      	ldrh	r3, [r7, #30]
 8005a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01b      	beq.n	8005a66 <USB_ActivateEndpoint+0x336>
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a44:	83bb      	strh	r3, [r7, #28]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	441a      	add	r2, r3
 8005a50:	8bbb      	ldrh	r3, [r7, #28]
 8005a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	837b      	strh	r3, [r7, #26]
 8005a7e:	8b7b      	ldrh	r3, [r7, #26]
 8005a80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a84:	837b      	strh	r3, [r7, #26]
 8005a86:	8b7b      	ldrh	r3, [r7, #26]
 8005a88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a8c:	837b      	strh	r3, [r7, #26]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	8b7b      	ldrh	r3, [r7, #26]
 8005a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	8013      	strh	r3, [r2, #0]
 8005aae:	e1a2      	b.n	8005df6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	441a      	add	r2, r3
 8005ad4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005afc:	4413      	add	r3, r2
 8005afe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	011a      	lsls	r2, r3, #4
 8005b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	891b      	ldrh	r3, [r3, #8]
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	653b      	str	r3, [r7, #80]	; 0x50
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b30:	4413      	add	r3, r2
 8005b32:	653b      	str	r3, [r7, #80]	; 0x50
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	011a      	lsls	r2, r3, #4
 8005b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	895b      	ldrh	r3, [r3, #10]
 8005b48:	085b      	lsrs	r3, r3, #1
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b52:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f040 8091 	bne.w	8005c80 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005b6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01b      	beq.n	8005bae <USB_ActivateEndpoint+0x47e>
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	441a      	add	r2, r3
 8005b98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	873b      	strh	r3, [r7, #56]	; 0x38
 8005bbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01b      	beq.n	8005bfe <USB_ActivateEndpoint+0x4ce>
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bdc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	441a      	add	r2, r3
 8005be8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	441a      	add	r2, r3
 8005c68:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	8013      	strh	r3, [r2, #0]
 8005c7e:	e0ba      	b.n	8005df6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005c90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01d      	beq.n	8005cd8 <USB_ActivateEndpoint+0x5a8>
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	441a      	add	r2, r3
 8005cc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005ce8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01d      	beq.n	8005d30 <USB_ActivateEndpoint+0x600>
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	78db      	ldrb	r3, [r3, #3]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d024      	beq.n	8005d82 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d56:	f083 0320 	eor.w	r3, r3, #32
 8005d5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	441a      	add	r2, r3
 8005d68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
 8005d80:	e01d      	b.n	8005dbe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	441a      	add	r2, r3
 8005da6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	441a      	add	r2, r3
 8005de0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005df6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	376c      	adds	r7, #108	; 0x6c
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr

08005e04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b08d      	sub	sp, #52	; 0x34
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	7b1b      	ldrb	r3, [r3, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f040 808e 	bne.w	8005f34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d044      	beq.n	8005eaa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	81bb      	strh	r3, [r7, #12]
 8005e2e:	89bb      	ldrh	r3, [r7, #12]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01b      	beq.n	8005e70 <USB_DeactivateEndpoint+0x6c>
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	817b      	strh	r3, [r7, #10]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	441a      	add	r2, r3
 8005e5a:	897b      	ldrh	r3, [r7, #10]
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e86:	813b      	strh	r3, [r7, #8]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	893b      	ldrh	r3, [r7, #8]
 8005e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	8013      	strh	r3, [r2, #0]
 8005ea8:	e192      	b.n	80061d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	827b      	strh	r3, [r7, #18]
 8005eb8:	8a7b      	ldrh	r3, [r7, #18]
 8005eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01b      	beq.n	8005efa <USB_DeactivateEndpoint+0xf6>
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed8:	823b      	strh	r3, [r7, #16]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	441a      	add	r2, r3
 8005ee4:	8a3b      	ldrh	r3, [r7, #16]
 8005ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f10:	81fb      	strh	r3, [r7, #14]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	441a      	add	r2, r3
 8005f1c:	89fb      	ldrh	r3, [r7, #14]
 8005f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	8013      	strh	r3, [r2, #0]
 8005f32:	e14d      	b.n	80061d0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f040 80a5 	bne.w	8006088 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	843b      	strh	r3, [r7, #32]
 8005f4c:	8c3b      	ldrh	r3, [r7, #32]
 8005f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01b      	beq.n	8005f8e <USB_DeactivateEndpoint+0x18a>
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6c:	83fb      	strh	r3, [r7, #30]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	8bfb      	ldrh	r3, [r7, #30]
 8005f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	83bb      	strh	r3, [r7, #28]
 8005f9c:	8bbb      	ldrh	r3, [r7, #28]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d01b      	beq.n	8005fde <USB_DeactivateEndpoint+0x1da>
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbc:	837b      	strh	r3, [r7, #26]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	8b7b      	ldrh	r3, [r7, #26]
 8005fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff4:	833b      	strh	r3, [r7, #24]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	441a      	add	r2, r3
 8006000:	8b3b      	ldrh	r3, [r7, #24]
 8006002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006012:	b29b      	uxth	r3, r3
 8006014:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602c:	82fb      	strh	r3, [r7, #22]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	441a      	add	r2, r3
 8006038:	8afb      	ldrh	r3, [r7, #22]
 800603a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604a:	b29b      	uxth	r3, r3
 800604c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006064:	82bb      	strh	r3, [r7, #20]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	441a      	add	r2, r3
 8006070:	8abb      	ldrh	r3, [r7, #20]
 8006072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]
 8006086:	e0a3      	b.n	80061d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006096:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01b      	beq.n	80060d8 <USB_DeactivateEndpoint+0x2d4>
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80060c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80060e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01b      	beq.n	8006128 <USB_DeactivateEndpoint+0x324>
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	853b      	strh	r3, [r7, #40]	; 0x28
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006120:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006124:	b29b      	uxth	r3, r3
 8006126:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	441a      	add	r2, r3
 800614a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800614c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615c:	b29b      	uxth	r3, r3
 800615e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006176:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	441a      	add	r2, r3
 8006182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006194:	b29b      	uxth	r3, r3
 8006196:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	441a      	add	r2, r3
 80061ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3734      	adds	r7, #52	; 0x34
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b0c4      	sub	sp, #272	; 0x110
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	1d3b      	adds	r3, r7, #4
 80061e4:	6018      	str	r0, [r3, #0]
 80061e6:	463b      	mov	r3, r7
 80061e8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061ea:	463b      	mov	r3, r7
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	f040 8557 	bne.w	8006ca4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	429a      	cmp	r2, r3
 8006204:	d905      	bls.n	8006212 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006210:	e004      	b.n	800621c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006212:	463b      	mov	r3, r7
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800621c:	463b      	mov	r3, r7
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	7b1b      	ldrb	r3, [r3, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d12c      	bne.n	8006280 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6959      	ldr	r1, [r3, #20]
 800622c:	463b      	mov	r3, r7
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	88da      	ldrh	r2, [r3, #6]
 8006232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006236:	b29b      	uxth	r3, r3
 8006238:	1d38      	adds	r0, r7, #4
 800623a:	6800      	ldr	r0, [r0, #0]
 800623c:	f001 fa2c 	bl	8007698 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006240:	1d3b      	adds	r3, r7, #4
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624e:	b29b      	uxth	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	4413      	add	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	463b      	mov	r3, r7
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	011a      	lsls	r2, r3, #4
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4413      	add	r3, r2
 8006264:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006268:	f107 0310 	add.w	r3, r7, #16
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006272:	b29a      	uxth	r2, r3
 8006274:	f107 0310 	add.w	r3, r7, #16
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	801a      	strh	r2, [r3, #0]
 800627c:	f000 bcdd 	b.w	8006c3a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006280:	463b      	mov	r3, r7
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	78db      	ldrb	r3, [r3, #3]
 8006286:	2b02      	cmp	r3, #2
 8006288:	f040 8347 	bne.w	800691a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800628c:	463b      	mov	r3, r7
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	463b      	mov	r3, r7
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	429a      	cmp	r2, r3
 800629a:	f240 82eb 	bls.w	8006874 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800629e:	1d3b      	adds	r3, r7, #4
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	463b      	mov	r3, r7
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80062bc:	1d3b      	adds	r3, r7, #4
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	463b      	mov	r3, r7
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062e2:	463b      	mov	r3, r7
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ec:	1ad2      	subs	r2, r2, r3
 80062ee:	463b      	mov	r3, r7
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	463b      	mov	r3, r7
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 8159 	beq.w	80065c2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006310:	1d3b      	adds	r3, r7, #4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	637b      	str	r3, [r7, #52]	; 0x34
 8006316:	463b      	mov	r3, r7
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d164      	bne.n	80063ea <USB_EPStartXfer+0x20e>
 8006320:	1d3b      	adds	r3, r7, #4
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	4413      	add	r3, r2
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006338:	463b      	mov	r3, r7
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	011a      	lsls	r2, r3, #4
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	4413      	add	r3, r2
 8006344:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28
 800634a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d112      	bne.n	8006378 <USB_EPStartXfer+0x19c>
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800635c:	b29a      	uxth	r2, r3
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006370:	b29a      	uxth	r2, r3
 8006372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e054      	b.n	8006422 <USB_EPStartXfer+0x246>
 8006378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800637c:	2b3e      	cmp	r3, #62	; 0x3e
 800637e:	d817      	bhi.n	80063b0 <USB_EPStartXfer+0x1d4>
 8006380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800638a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <USB_EPStartXfer+0x1c4>
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639a:	3301      	adds	r3, #1
 800639c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	029b      	lsls	r3, r3, #10
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	e038      	b.n	8006422 <USB_EPStartXfer+0x246>
 80063b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d104      	bne.n	80063d0 <USB_EPStartXfer+0x1f4>
 80063c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ca:	3b01      	subs	r3, #1
 80063cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	029b      	lsls	r3, r3, #10
 80063d8:	b29b      	uxth	r3, r3
 80063da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	e01b      	b.n	8006422 <USB_EPStartXfer+0x246>
 80063ea:	463b      	mov	r3, r7
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d116      	bne.n	8006422 <USB_EPStartXfer+0x246>
 80063f4:	1d3b      	adds	r3, r7, #4
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006402:	4413      	add	r3, r2
 8006404:	637b      	str	r3, [r7, #52]	; 0x34
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	011a      	lsls	r2, r3, #4
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	4413      	add	r3, r2
 8006412:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006416:	633b      	str	r3, [r7, #48]	; 0x30
 8006418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800641c:	b29a      	uxth	r2, r3
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	895b      	ldrh	r3, [r3, #10]
 8006428:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6959      	ldr	r1, [r3, #20]
 8006432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006436:	b29b      	uxth	r3, r3
 8006438:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800643c:	1d38      	adds	r0, r7, #4
 800643e:	6800      	ldr	r0, [r0, #0]
 8006440:	f001 f92a 	bl	8007698 <USB_WritePMA>
            ep->xfer_buff += len;
 8006444:	463b      	mov	r3, r7
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800644e:	441a      	add	r2, r3
 8006450:	463b      	mov	r3, r7
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006456:	463b      	mov	r3, r7
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	463b      	mov	r3, r7
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	429a      	cmp	r2, r3
 8006464:	d909      	bls.n	800647a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006466:	463b      	mov	r3, r7
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006470:	1ad2      	subs	r2, r2, r3
 8006472:	463b      	mov	r3, r7
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	621a      	str	r2, [r3, #32]
 8006478:	e008      	b.n	800648c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006484:	463b      	mov	r3, r7
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2200      	movs	r2, #0
 800648a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d164      	bne.n	8006560 <USB_EPStartXfer+0x384>
 8006496:	1d3b      	adds	r3, r7, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	4413      	add	r3, r2
 80064ac:	61fb      	str	r3, [r7, #28]
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	011a      	lsls	r2, r3, #4
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d112      	bne.n	80064ee <USB_EPStartXfer+0x312>
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	e057      	b.n	800659e <USB_EPStartXfer+0x3c2>
 80064ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f2:	2b3e      	cmp	r3, #62	; 0x3e
 80064f4:	d817      	bhi.n	8006526 <USB_EPStartXfer+0x34a>
 80064f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <USB_EPStartXfer+0x33a>
 800650c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006510:	3301      	adds	r3, #1
 8006512:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006516:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800651a:	b29b      	uxth	r3, r3
 800651c:	029b      	lsls	r3, r3, #10
 800651e:	b29a      	uxth	r2, r3
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	e03b      	b.n	800659e <USB_EPStartXfer+0x3c2>
 8006526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <USB_EPStartXfer+0x36a>
 800653c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006540:	3b01      	subs	r3, #1
 8006542:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006546:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800654a:	b29b      	uxth	r3, r3
 800654c:	029b      	lsls	r3, r3, #10
 800654e:	b29b      	uxth	r3, r3
 8006550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006558:	b29a      	uxth	r2, r3
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	e01e      	b.n	800659e <USB_EPStartXfer+0x3c2>
 8006560:	463b      	mov	r3, r7
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d119      	bne.n	800659e <USB_EPStartXfer+0x3c2>
 800656a:	1d3b      	adds	r3, r7, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006578:	b29b      	uxth	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	4413      	add	r3, r2
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
 8006582:	463b      	mov	r3, r7
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	011a      	lsls	r2, r3, #4
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	4413      	add	r3, r2
 800658e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006592:	623b      	str	r3, [r7, #32]
 8006594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006598:	b29a      	uxth	r2, r3
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	891b      	ldrh	r3, [r3, #8]
 80065a4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065a8:	463b      	mov	r3, r7
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6959      	ldr	r1, [r3, #20]
 80065ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80065b8:	1d38      	adds	r0, r7, #4
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	f001 f86c 	bl	8007698 <USB_WritePMA>
 80065c0:	e33b      	b.n	8006c3a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065c2:	463b      	mov	r3, r7
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d164      	bne.n	8006696 <USB_EPStartXfer+0x4ba>
 80065cc:	1d3b      	adds	r3, r7, #4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065d2:	1d3b      	adds	r3, r7, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e0:	4413      	add	r3, r2
 80065e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e4:	463b      	mov	r3, r7
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	011a      	lsls	r2, r3, #4
 80065ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ee:	4413      	add	r3, r2
 80065f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d112      	bne.n	8006624 <USB_EPStartXfer+0x448>
 80065fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006608:	b29a      	uxth	r2, r3
 800660a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661c:	b29a      	uxth	r2, r3
 800661e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	e057      	b.n	80066d4 <USB_EPStartXfer+0x4f8>
 8006624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006628:	2b3e      	cmp	r3, #62	; 0x3e
 800662a:	d817      	bhi.n	800665c <USB_EPStartXfer+0x480>
 800662c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006630:	085b      	lsrs	r3, r3, #1
 8006632:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d004      	beq.n	800664c <USB_EPStartXfer+0x470>
 8006642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006646:	3301      	adds	r3, #1
 8006648:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800664c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006650:	b29b      	uxth	r3, r3
 8006652:	029b      	lsls	r3, r3, #10
 8006654:	b29a      	uxth	r2, r3
 8006656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	e03b      	b.n	80066d4 <USB_EPStartXfer+0x4f8>
 800665c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <USB_EPStartXfer+0x4a0>
 8006672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006676:	3b01      	subs	r3, #1
 8006678:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800667c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006680:	b29b      	uxth	r3, r3
 8006682:	029b      	lsls	r3, r3, #10
 8006684:	b29b      	uxth	r3, r3
 8006686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668e:	b29a      	uxth	r2, r3
 8006690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006692:	801a      	strh	r2, [r3, #0]
 8006694:	e01e      	b.n	80066d4 <USB_EPStartXfer+0x4f8>
 8006696:	463b      	mov	r3, r7
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d119      	bne.n	80066d4 <USB_EPStartXfer+0x4f8>
 80066a0:	1d3b      	adds	r3, r7, #4
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	657b      	str	r3, [r7, #84]	; 0x54
 80066a6:	1d3b      	adds	r3, r7, #4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066b4:	4413      	add	r3, r2
 80066b6:	657b      	str	r3, [r7, #84]	; 0x54
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	011a      	lsls	r2, r3, #4
 80066c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c2:	4413      	add	r3, r2
 80066c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066c8:	653b      	str	r3, [r7, #80]	; 0x50
 80066ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066d4:	463b      	mov	r3, r7
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	891b      	ldrh	r3, [r3, #8]
 80066da:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066de:	463b      	mov	r3, r7
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6959      	ldr	r1, [r3, #20]
 80066e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80066ee:	1d38      	adds	r0, r7, #4
 80066f0:	6800      	ldr	r0, [r0, #0]
 80066f2:	f000 ffd1 	bl	8007698 <USB_WritePMA>
            ep->xfer_buff += len;
 80066f6:	463b      	mov	r3, r7
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695a      	ldr	r2, [r3, #20]
 80066fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006700:	441a      	add	r2, r3
 8006702:	463b      	mov	r3, r7
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006708:	463b      	mov	r3, r7
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a1a      	ldr	r2, [r3, #32]
 800670e:	463b      	mov	r3, r7
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	429a      	cmp	r2, r3
 8006716:	d909      	bls.n	800672c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006718:	463b      	mov	r3, r7
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	463b      	mov	r3, r7
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	621a      	str	r2, [r3, #32]
 800672a:	e008      	b.n	800673e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800672c:	463b      	mov	r3, r7
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006736:	463b      	mov	r3, r7
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800673e:	1d3b      	adds	r3, r7, #4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	647b      	str	r3, [r7, #68]	; 0x44
 8006744:	463b      	mov	r3, r7
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d164      	bne.n	8006818 <USB_EPStartXfer+0x63c>
 800674e:	1d3b      	adds	r3, r7, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006754:	1d3b      	adds	r3, r7, #4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675c:	b29b      	uxth	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006762:	4413      	add	r3, r2
 8006764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006766:	463b      	mov	r3, r7
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	011a      	lsls	r2, r3, #4
 800676e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006770:	4413      	add	r3, r2
 8006772:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006776:	63bb      	str	r3, [r7, #56]	; 0x38
 8006778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d112      	bne.n	80067a6 <USB_EPStartXfer+0x5ca>
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b29b      	uxth	r3, r3
 8006786:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800678a:	b29a      	uxth	r2, r3
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678e:	801a      	strh	r2, [r3, #0]
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679e:	b29a      	uxth	r2, r3
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	e054      	b.n	8006850 <USB_EPStartXfer+0x674>
 80067a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067aa:	2b3e      	cmp	r3, #62	; 0x3e
 80067ac:	d817      	bhi.n	80067de <USB_EPStartXfer+0x602>
 80067ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067b2:	085b      	lsrs	r3, r3, #1
 80067b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d004      	beq.n	80067ce <USB_EPStartXfer+0x5f2>
 80067c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067c8:	3301      	adds	r3, #1
 80067ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	029b      	lsls	r3, r3, #10
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	801a      	strh	r2, [r3, #0]
 80067dc:	e038      	b.n	8006850 <USB_EPStartXfer+0x674>
 80067de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ec:	f003 031f 	and.w	r3, r3, #31
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d104      	bne.n	80067fe <USB_EPStartXfer+0x622>
 80067f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067f8:	3b01      	subs	r3, #1
 80067fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006802:	b29b      	uxth	r3, r3
 8006804:	029b      	lsls	r3, r3, #10
 8006806:	b29b      	uxth	r3, r3
 8006808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800680c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006810:	b29a      	uxth	r2, r3
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	e01b      	b.n	8006850 <USB_EPStartXfer+0x674>
 8006818:	463b      	mov	r3, r7
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d116      	bne.n	8006850 <USB_EPStartXfer+0x674>
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800682a:	b29b      	uxth	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006830:	4413      	add	r3, r2
 8006832:	647b      	str	r3, [r7, #68]	; 0x44
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	011a      	lsls	r2, r3, #4
 800683c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800683e:	4413      	add	r3, r2
 8006840:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006844:	643b      	str	r3, [r7, #64]	; 0x40
 8006846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800684a:	b29a      	uxth	r2, r3
 800684c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800684e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006850:	463b      	mov	r3, r7
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	895b      	ldrh	r3, [r3, #10]
 8006856:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6959      	ldr	r1, [r3, #20]
 8006860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006864:	b29b      	uxth	r3, r3
 8006866:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800686a:	1d38      	adds	r0, r7, #4
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f000 ff13 	bl	8007698 <USB_WritePMA>
 8006872:	e1e2      	b.n	8006c3a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800687e:	1d3b      	adds	r3, r7, #4
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	463b      	mov	r3, r7
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006898:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800689c:	1d3b      	adds	r3, r7, #4
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	463b      	mov	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80068ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068be:	b29b      	uxth	r3, r3
 80068c0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068c2:	1d3b      	adds	r3, r7, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	663b      	str	r3, [r7, #96]	; 0x60
 80068c8:	1d3b      	adds	r3, r7, #4
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d6:	4413      	add	r3, r2
 80068d8:	663b      	str	r3, [r7, #96]	; 0x60
 80068da:	463b      	mov	r3, r7
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	011a      	lsls	r2, r3, #4
 80068e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068e4:	4413      	add	r3, r2
 80068e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	891b      	ldrh	r3, [r3, #8]
 80068fc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006900:	463b      	mov	r3, r7
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6959      	ldr	r1, [r3, #20]
 8006906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800690a:	b29b      	uxth	r3, r3
 800690c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006910:	1d38      	adds	r0, r7, #4
 8006912:	6800      	ldr	r0, [r0, #0]
 8006914:	f000 fec0 	bl	8007698 <USB_WritePMA>
 8006918:	e18f      	b.n	8006c3a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800691a:	1d3b      	adds	r3, r7, #4
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	463b      	mov	r3, r7
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 808f 	beq.w	8006a54 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	67bb      	str	r3, [r7, #120]	; 0x78
 800693c:	463b      	mov	r3, r7
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d164      	bne.n	8006a10 <USB_EPStartXfer+0x834>
 8006946:	1d3b      	adds	r3, r7, #4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	673b      	str	r3, [r7, #112]	; 0x70
 800694c:	1d3b      	adds	r3, r7, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006954:	b29b      	uxth	r3, r3
 8006956:	461a      	mov	r2, r3
 8006958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800695a:	4413      	add	r3, r2
 800695c:	673b      	str	r3, [r7, #112]	; 0x70
 800695e:	463b      	mov	r3, r7
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	011a      	lsls	r2, r3, #4
 8006966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006968:	4413      	add	r3, r2
 800696a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800696e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d112      	bne.n	800699e <USB_EPStartXfer+0x7c2>
 8006978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006982:	b29a      	uxth	r2, r3
 8006984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006996:	b29a      	uxth	r2, r3
 8006998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699a:	801a      	strh	r2, [r3, #0]
 800699c:	e054      	b.n	8006a48 <USB_EPStartXfer+0x86c>
 800699e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a2:	2b3e      	cmp	r3, #62	; 0x3e
 80069a4:	d817      	bhi.n	80069d6 <USB_EPStartXfer+0x7fa>
 80069a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <USB_EPStartXfer+0x7ea>
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c0:	3301      	adds	r3, #1
 80069c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	029b      	lsls	r3, r3, #10
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d2:	801a      	strh	r2, [r3, #0]
 80069d4:	e038      	b.n	8006a48 <USB_EPStartXfer+0x86c>
 80069d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e4:	f003 031f 	and.w	r3, r3, #31
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <USB_EPStartXfer+0x81a>
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f0:	3b01      	subs	r3, #1
 80069f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	029b      	lsls	r3, r3, #10
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	e01b      	b.n	8006a48 <USB_EPStartXfer+0x86c>
 8006a10:	463b      	mov	r3, r7
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d116      	bne.n	8006a48 <USB_EPStartXfer+0x86c>
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a28:	4413      	add	r3, r2
 8006a2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	011a      	lsls	r2, r3, #4
 8006a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a36:	4413      	add	r3, r2
 8006a38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a3c:	677b      	str	r3, [r7, #116]	; 0x74
 8006a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a48:	463b      	mov	r3, r7
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	895b      	ldrh	r3, [r3, #10]
 8006a4e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006a52:	e097      	b.n	8006b84 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a54:	463b      	mov	r3, r7
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d168      	bne.n	8006b30 <USB_EPStartXfer+0x954>
 8006a5e:	1d3b      	adds	r3, r7, #4
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a66:	1d3b      	adds	r3, r7, #4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a76:	4413      	add	r3, r2
 8006a78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a7c:	463b      	mov	r3, r7
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	011a      	lsls	r2, r3, #4
 8006a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a88:	4413      	add	r3, r2
 8006a8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d112      	bne.n	8006abe <USB_EPStartXfer+0x8e2>
 8006a98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	e05d      	b.n	8006b7a <USB_EPStartXfer+0x99e>
 8006abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ac4:	d817      	bhi.n	8006af6 <USB_EPStartXfer+0x91a>
 8006ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <USB_EPStartXfer+0x90a>
 8006adc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ae6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	029b      	lsls	r3, r3, #10
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	e041      	b.n	8006b7a <USB_EPStartXfer+0x99e>
 8006af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b04:	f003 031f 	and.w	r3, r3, #31
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d104      	bne.n	8006b16 <USB_EPStartXfer+0x93a>
 8006b0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b10:	3b01      	subs	r3, #1
 8006b12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	029b      	lsls	r3, r3, #10
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	e024      	b.n	8006b7a <USB_EPStartXfer+0x99e>
 8006b30:	463b      	mov	r3, r7
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d11f      	bne.n	8006b7a <USB_EPStartXfer+0x99e>
 8006b3a:	1d3b      	adds	r3, r7, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b42:	1d3b      	adds	r3, r7, #4
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b52:	4413      	add	r3, r2
 8006b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b58:	463b      	mov	r3, r7
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	011a      	lsls	r2, r3, #4
 8006b60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b64:	4413      	add	r3, r2
 8006b66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	891b      	ldrh	r3, [r3, #8]
 8006b80:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b84:	463b      	mov	r3, r7
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6959      	ldr	r1, [r3, #20]
 8006b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006b94:	1d38      	adds	r0, r7, #4
 8006b96:	6800      	ldr	r0, [r0, #0]
 8006b98:	f000 fd7e 	bl	8007698 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d122      	bne.n	8006bec <USB_EPStartXfer+0xa10>
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	463b      	mov	r3, r7
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006bc4:	1d3b      	adds	r3, r7, #4
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	463b      	mov	r3, r7
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	8013      	strh	r3, [r2, #0]
 8006bea:	e026      	b.n	8006c3a <USB_EPStartXfer+0xa5e>
 8006bec:	463b      	mov	r3, r7
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	785b      	ldrb	r3, [r3, #1]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d121      	bne.n	8006c3a <USB_EPStartXfer+0xa5e>
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006c14:	1d3b      	adds	r3, r7, #4
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	463b      	mov	r3, r7
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c3a:	1d3b      	adds	r3, r7, #4
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	463b      	mov	r3, r7
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f107 020e 	add.w	r2, r7, #14
 8006c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c58:	8013      	strh	r3, [r2, #0]
 8006c5a:	f107 030e 	add.w	r3, r7, #14
 8006c5e:	f107 020e 	add.w	r2, r7, #14
 8006c62:	8812      	ldrh	r2, [r2, #0]
 8006c64:	f082 0210 	eor.w	r2, r2, #16
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	f107 030e 	add.w	r3, r7, #14
 8006c6e:	f107 020e 	add.w	r2, r7, #14
 8006c72:	8812      	ldrh	r2, [r2, #0]
 8006c74:	f082 0220 	eor.w	r2, r2, #32
 8006c78:	801a      	strh	r2, [r3, #0]
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	463b      	mov	r3, r7
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	441a      	add	r2, r3
 8006c88:	f107 030e 	add.w	r3, r7, #14
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	8013      	strh	r3, [r2, #0]
 8006ca2:	e3b5      	b.n	8007410 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	7b1b      	ldrb	r3, [r3, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f040 8090 	bne.w	8006dd0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006cb0:	463b      	mov	r3, r7
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d90e      	bls.n	8006cde <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006cc0:	463b      	mov	r3, r7
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006cca:	463b      	mov	r3, r7
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699a      	ldr	r2, [r3, #24]
 8006cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd4:	1ad2      	subs	r2, r2, r3
 8006cd6:	463b      	mov	r3, r7
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	619a      	str	r2, [r3, #24]
 8006cdc:	e008      	b.n	8006cf0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006cde:	463b      	mov	r3, r7
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006ce8:	463b      	mov	r3, r7
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2200      	movs	r2, #0
 8006cee:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cf8:	1d3b      	adds	r3, r7, #4
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d08:	4413      	add	r3, r2
 8006d0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d0e:	463b      	mov	r3, r7
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	011a      	lsls	r2, r3, #4
 8006d16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d116      	bne.n	8006d5a <USB_EPStartXfer+0xb7e>
 8006d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	e32c      	b.n	80073b4 <USB_EPStartXfer+0x11d8>
 8006d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d60:	d818      	bhi.n	8006d94 <USB_EPStartXfer+0xbb8>
 8006d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d66:	085b      	lsrs	r3, r3, #1
 8006d68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <USB_EPStartXfer+0xba6>
 8006d78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	029b      	lsls	r3, r3, #10
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	e30f      	b.n	80073b4 <USB_EPStartXfer+0x11d8>
 8006d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <USB_EPStartXfer+0xbd8>
 8006daa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dae:	3b01      	subs	r3, #1
 8006db0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006db4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	029b      	lsls	r3, r3, #10
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	e2f1      	b.n	80073b4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	78db      	ldrb	r3, [r3, #3]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	f040 818f 	bne.w	80070fa <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ddc:	463b      	mov	r3, r7
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	785b      	ldrb	r3, [r3, #1]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d175      	bne.n	8006ed2 <USB_EPStartXfer+0xcf6>
 8006de6:	1d3b      	adds	r3, r7, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dee:	1d3b      	adds	r3, r7, #4
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006dfe:	4413      	add	r3, r2
 8006e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e04:	463b      	mov	r3, r7
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	011a      	lsls	r2, r3, #4
 8006e0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e10:	4413      	add	r3, r2
 8006e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d116      	bne.n	8006e52 <USB_EPStartXfer+0xc76>
 8006e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e36:	801a      	strh	r2, [r3, #0]
 8006e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e065      	b.n	8006f1e <USB_EPStartXfer+0xd42>
 8006e52:	463b      	mov	r3, r7
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b3e      	cmp	r3, #62	; 0x3e
 8006e5a:	d81a      	bhi.n	8006e92 <USB_EPStartXfer+0xcb6>
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e68:	463b      	mov	r3, r7
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d004      	beq.n	8006e80 <USB_EPStartXfer+0xca4>
 8006e76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	029b      	lsls	r3, r3, #10
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	e045      	b.n	8006f1e <USB_EPStartXfer+0xd42>
 8006e92:	463b      	mov	r3, r7
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f003 031f 	and.w	r3, r3, #31
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <USB_EPStartXfer+0xcda>
 8006eac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006eb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	029b      	lsls	r3, r3, #10
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ece:	801a      	strh	r2, [r3, #0]
 8006ed0:	e025      	b.n	8006f1e <USB_EPStartXfer+0xd42>
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d120      	bne.n	8006f1e <USB_EPStartXfer+0xd42>
 8006edc:	1d3b      	adds	r3, r7, #4
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ee4:	1d3b      	adds	r3, r7, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006efa:	463b      	mov	r3, r7
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	011a      	lsls	r2, r3, #4
 8006f02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f06:	4413      	add	r3, r2
 8006f08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f10:	463b      	mov	r3, r7
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f26:	463b      	mov	r3, r7
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d175      	bne.n	800701c <USB_EPStartXfer+0xe40>
 8006f30:	1d3b      	adds	r3, r7, #4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f38:	1d3b      	adds	r3, r7, #4
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f48:	4413      	add	r3, r2
 8006f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f4e:	463b      	mov	r3, r7
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	011a      	lsls	r2, r3, #4
 8006f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f64:	463b      	mov	r3, r7
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d116      	bne.n	8006f9c <USB_EPStartXfer+0xdc0>
 8006f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f80:	801a      	strh	r2, [r3, #0]
 8006f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	e061      	b.n	8007060 <USB_EPStartXfer+0xe84>
 8006f9c:	463b      	mov	r3, r7
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8006fa4:	d81a      	bhi.n	8006fdc <USB_EPStartXfer+0xe00>
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	085b      	lsrs	r3, r3, #1
 8006fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fb2:	463b      	mov	r3, r7
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <USB_EPStartXfer+0xdee>
 8006fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	029b      	lsls	r3, r3, #10
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	e041      	b.n	8007060 <USB_EPStartXfer+0xe84>
 8006fdc:	463b      	mov	r3, r7
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fe8:	463b      	mov	r3, r7
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <USB_EPStartXfer+0xe24>
 8006ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007004:	b29b      	uxth	r3, r3
 8007006:	029b      	lsls	r3, r3, #10
 8007008:	b29b      	uxth	r3, r3
 800700a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007012:	b29a      	uxth	r2, r3
 8007014:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	e021      	b.n	8007060 <USB_EPStartXfer+0xe84>
 800701c:	463b      	mov	r3, r7
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	785b      	ldrb	r3, [r3, #1]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d11c      	bne.n	8007060 <USB_EPStartXfer+0xe84>
 8007026:	1d3b      	adds	r3, r7, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702e:	b29b      	uxth	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007036:	4413      	add	r3, r2
 8007038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800703c:	463b      	mov	r3, r7
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	011a      	lsls	r2, r3, #4
 8007044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007048:	4413      	add	r3, r2
 800704a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800704e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007052:	463b      	mov	r3, r7
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800705e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007060:	463b      	mov	r3, r7
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 81a4 	beq.w	80073b4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800706c:	1d3b      	adds	r3, r7, #4
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	463b      	mov	r3, r7
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007080:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <USB_EPStartXfer+0xebc>
 800708c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10d      	bne.n	80070b4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007098:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800709c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f040 8187 	bne.w	80073b4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070a6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 8180 	bne.w	80073b4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80070b4:	1d3b      	adds	r3, r7, #4
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	463b      	mov	r3, r7
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80070d2:	1d3b      	adds	r3, r7, #4
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	463b      	mov	r3, r7
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	441a      	add	r2, r3
 80070e0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80070e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	8013      	strh	r3, [r2, #0]
 80070f8:	e15c      	b.n	80073b4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80070fa:	463b      	mov	r3, r7
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	78db      	ldrb	r3, [r3, #3]
 8007100:	2b01      	cmp	r3, #1
 8007102:	f040 8155 	bne.w	80073b0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007106:	463b      	mov	r3, r7
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	463b      	mov	r3, r7
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	429a      	cmp	r2, r3
 8007114:	d90e      	bls.n	8007134 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8007116:	463b      	mov	r3, r7
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8007120:	463b      	mov	r3, r7
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699a      	ldr	r2, [r3, #24]
 8007126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800712a:	1ad2      	subs	r2, r2, r3
 800712c:	463b      	mov	r3, r7
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	619a      	str	r2, [r3, #24]
 8007132:	e008      	b.n	8007146 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8007134:	463b      	mov	r3, r7
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800713e:	463b      	mov	r3, r7
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007146:	463b      	mov	r3, r7
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d16f      	bne.n	8007230 <USB_EPStartXfer+0x1054>
 8007150:	1d3b      	adds	r3, r7, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007158:	1d3b      	adds	r3, r7, #4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007160:	b29b      	uxth	r3, r3
 8007162:	461a      	mov	r2, r3
 8007164:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007168:	4413      	add	r3, r2
 800716a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800716e:	463b      	mov	r3, r7
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	011a      	lsls	r2, r3, #4
 8007176:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800717a:	4413      	add	r3, r2
 800717c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007180:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d116      	bne.n	80071ba <USB_EPStartXfer+0xfde>
 800718c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007198:	b29a      	uxth	r2, r3
 800719a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800719e:	801a      	strh	r2, [r3, #0]
 80071a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	e05f      	b.n	800727a <USB_EPStartXfer+0x109e>
 80071ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071be:	2b3e      	cmp	r3, #62	; 0x3e
 80071c0:	d818      	bhi.n	80071f4 <USB_EPStartXfer+0x1018>
 80071c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <USB_EPStartXfer+0x1006>
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071dc:	3301      	adds	r3, #1
 80071de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	029b      	lsls	r3, r3, #10
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	e042      	b.n	800727a <USB_EPStartXfer+0x109e>
 80071f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071f8:	095b      	lsrs	r3, r3, #5
 80071fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	2b00      	cmp	r3, #0
 8007208:	d104      	bne.n	8007214 <USB_EPStartXfer+0x1038>
 800720a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720e:	3b01      	subs	r3, #1
 8007210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007218:	b29b      	uxth	r3, r3
 800721a:	029b      	lsls	r3, r3, #10
 800721c:	b29b      	uxth	r3, r3
 800721e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007226:	b29a      	uxth	r2, r3
 8007228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800722c:	801a      	strh	r2, [r3, #0]
 800722e:	e024      	b.n	800727a <USB_EPStartXfer+0x109e>
 8007230:	463b      	mov	r3, r7
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d11f      	bne.n	800727a <USB_EPStartXfer+0x109e>
 800723a:	1d3b      	adds	r3, r7, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007242:	1d3b      	adds	r3, r7, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800724a:	b29b      	uxth	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007252:	4413      	add	r3, r2
 8007254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007258:	463b      	mov	r3, r7
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	011a      	lsls	r2, r3, #4
 8007260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007264:	4413      	add	r3, r2
 8007266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800726a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800726e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007272:	b29a      	uxth	r2, r3
 8007274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007278:	801a      	strh	r2, [r3, #0]
 800727a:	1d3b      	adds	r3, r7, #4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007282:	463b      	mov	r3, r7
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d16f      	bne.n	800736c <USB_EPStartXfer+0x1190>
 800728c:	1d3b      	adds	r3, r7, #4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007294:	1d3b      	adds	r3, r7, #4
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800729c:	b29b      	uxth	r3, r3
 800729e:	461a      	mov	r2, r3
 80072a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072a4:	4413      	add	r3, r2
 80072a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072aa:	463b      	mov	r3, r7
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	011a      	lsls	r2, r3, #4
 80072b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072b6:	4413      	add	r3, r2
 80072b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d116      	bne.n	80072f6 <USB_EPStartXfer+0x111a>
 80072c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e05e      	b.n	80073b4 <USB_EPStartXfer+0x11d8>
 80072f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072fa:	2b3e      	cmp	r3, #62	; 0x3e
 80072fc:	d818      	bhi.n	8007330 <USB_EPStartXfer+0x1154>
 80072fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d004      	beq.n	800731e <USB_EPStartXfer+0x1142>
 8007314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007318:	3301      	adds	r3, #1
 800731a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800731e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007322:	b29b      	uxth	r3, r3
 8007324:	029b      	lsls	r3, r3, #10
 8007326:	b29a      	uxth	r2, r3
 8007328:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e041      	b.n	80073b4 <USB_EPStartXfer+0x11d8>
 8007330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800733a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800733e:	f003 031f 	and.w	r3, r3, #31
 8007342:	2b00      	cmp	r3, #0
 8007344:	d104      	bne.n	8007350 <USB_EPStartXfer+0x1174>
 8007346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800734a:	3b01      	subs	r3, #1
 800734c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007354:	b29b      	uxth	r3, r3
 8007356:	029b      	lsls	r3, r3, #10
 8007358:	b29b      	uxth	r3, r3
 800735a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800735e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007362:	b29a      	uxth	r2, r3
 8007364:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	e023      	b.n	80073b4 <USB_EPStartXfer+0x11d8>
 800736c:	463b      	mov	r3, r7
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	785b      	ldrb	r3, [r3, #1]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d11e      	bne.n	80073b4 <USB_EPStartXfer+0x11d8>
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737e:	b29b      	uxth	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007386:	4413      	add	r3, r2
 8007388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800738c:	463b      	mov	r3, r7
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	011a      	lsls	r2, r3, #4
 8007394:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007398:	4413      	add	r3, r2
 800739a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800739e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073ac:	801a      	strh	r2, [r3, #0]
 80073ae:	e001      	b.n	80073b4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e02e      	b.n	8007412 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073b4:	1d3b      	adds	r3, r7, #4
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	463b      	mov	r3, r7
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073da:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073ea:	1d3b      	adds	r3, r7, #4
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	463b      	mov	r3, r7
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	441a      	add	r2, r3
 80073f8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800740c:	b29b      	uxth	r3, r3
 800740e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	785b      	ldrb	r3, [r3, #1]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d020      	beq.n	8007470 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007444:	81bb      	strh	r3, [r7, #12]
 8007446:	89bb      	ldrh	r3, [r7, #12]
 8007448:	f083 0310 	eor.w	r3, r3, #16
 800744c:	81bb      	strh	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	441a      	add	r2, r3
 8007458:	89bb      	ldrh	r3, [r7, #12]
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]
 800746e:	e01f      	b.n	80074b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	81fb      	strh	r3, [r7, #14]
 8007488:	89fb      	ldrh	r3, [r7, #14]
 800748a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800748e:	81fb      	strh	r3, [r7, #14]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	441a      	add	r2, r3
 800749a:	89fb      	ldrh	r3, [r7, #14]
 800749c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr

080074bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	7b1b      	ldrb	r3, [r3, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f040 809d 	bne.w	800760a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	785b      	ldrb	r3, [r3, #1]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d04c      	beq.n	8007572 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	823b      	strh	r3, [r7, #16]
 80074e6:	8a3b      	ldrh	r3, [r7, #16]
 80074e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01b      	beq.n	8007528 <USB_EPClearStall+0x6c>
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007506:	81fb      	strh	r3, [r7, #14]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	441a      	add	r2, r3
 8007512:	89fb      	ldrh	r3, [r7, #14]
 8007514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007520:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007524:	b29b      	uxth	r3, r3
 8007526:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	78db      	ldrb	r3, [r3, #3]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d06c      	beq.n	800760a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007546:	81bb      	strh	r3, [r7, #12]
 8007548:	89bb      	ldrh	r3, [r7, #12]
 800754a:	f083 0320 	eor.w	r3, r3, #32
 800754e:	81bb      	strh	r3, [r7, #12]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	441a      	add	r2, r3
 800755a:	89bb      	ldrh	r3, [r7, #12]
 800755c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800756c:	b29b      	uxth	r3, r3
 800756e:	8013      	strh	r3, [r2, #0]
 8007570:	e04b      	b.n	800760a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	82fb      	strh	r3, [r7, #22]
 8007580:	8afb      	ldrh	r3, [r7, #22]
 8007582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01b      	beq.n	80075c2 <USB_EPClearStall+0x106>
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a0:	82bb      	strh	r3, [r7, #20]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	441a      	add	r2, r3
 80075ac:	8abb      	ldrh	r3, [r7, #20]
 80075ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075be:	b29b      	uxth	r3, r3
 80075c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d8:	827b      	strh	r3, [r7, #18]
 80075da:	8a7b      	ldrh	r3, [r7, #18]
 80075dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075e0:	827b      	strh	r3, [r7, #18]
 80075e2:	8a7b      	ldrh	r3, [r7, #18]
 80075e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075e8:	827b      	strh	r3, [r7, #18]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	441a      	add	r2, r3
 80075f4:	8a7b      	ldrh	r3, [r7, #18]
 80075f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007606:	b29b      	uxth	r3, r3
 8007608:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr

08007616 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	460b      	mov	r3, r1
 8007620:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d103      	bne.n	8007630 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2280      	movs	r2, #128	; 0x80
 800762c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr

0800763c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr

08007650 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007672:	b29b      	uxth	r3, r3
 8007674:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007676:	68fb      	ldr	r3, [r7, #12]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr

08007682 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr

08007698 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007698:	b480      	push	{r7}
 800769a:	b08d      	sub	sp, #52	; 0x34
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4611      	mov	r1, r2
 80076a4:	461a      	mov	r2, r3
 80076a6:	460b      	mov	r3, r1
 80076a8:	80fb      	strh	r3, [r7, #6]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076ae:	88bb      	ldrh	r3, [r7, #4]
 80076b0:	3301      	adds	r3, #1
 80076b2:	085b      	lsrs	r3, r3, #1
 80076b4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076be:	88fb      	ldrh	r3, [r7, #6]
 80076c0:	005a      	lsls	r2, r3, #1
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ca:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076d0:	e01e      	b.n	8007710 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	3301      	adds	r3, #1
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	021b      	lsls	r3, r3, #8
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	3302      	adds	r3, #2
 80076fc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	3302      	adds	r3, #2
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	3301      	adds	r3, #1
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	3b01      	subs	r3, #1
 800770e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1dd      	bne.n	80076d2 <USB_WritePMA+0x3a>
  }
}
 8007716:	bf00      	nop
 8007718:	3734      	adds	r7, #52	; 0x34
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr

08007720 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007720:	b480      	push	{r7}
 8007722:	b08b      	sub	sp, #44	; 0x2c
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4611      	mov	r1, r2
 800772c:	461a      	mov	r2, r3
 800772e:	460b      	mov	r3, r1
 8007730:	80fb      	strh	r3, [r7, #6]
 8007732:	4613      	mov	r3, r2
 8007734:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007736:	88bb      	ldrh	r3, [r7, #4]
 8007738:	085b      	lsrs	r3, r3, #1
 800773a:	b29b      	uxth	r3, r3
 800773c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007746:	88fb      	ldrh	r3, [r7, #6]
 8007748:	005a      	lsls	r2, r3, #1
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	4413      	add	r3, r2
 800774e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007752:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
 8007758:	e01b      	b.n	8007792 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	3302      	adds	r3, #2
 8007766:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	b2da      	uxtb	r2, r3
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	3301      	adds	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	0a1b      	lsrs	r3, r3, #8
 800777a:	b2da      	uxtb	r2, r3
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	3301      	adds	r3, #1
 8007784:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	3302      	adds	r3, #2
 800778a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	3b01      	subs	r3, #1
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e0      	bne.n	800775a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007798:	88bb      	ldrh	r3, [r7, #4]
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	701a      	strb	r2, [r3, #0]
  }
}
 80077b4:	bf00      	nop
 80077b6:	372c      	adds	r7, #44	; 0x2c
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bc80      	pop	{r7}
 80077bc:	4770      	bx	lr

080077be <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7c1b      	ldrb	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d115      	bne.n	8007802 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077da:	2202      	movs	r2, #2
 80077dc:	2181      	movs	r1, #129	; 0x81
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fe1f 	bl	8009422 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ee:	2202      	movs	r2, #2
 80077f0:	2101      	movs	r1, #1
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 fe15 	bl	8009422 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007800:	e012      	b.n	8007828 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007802:	2340      	movs	r3, #64	; 0x40
 8007804:	2202      	movs	r2, #2
 8007806:	2181      	movs	r1, #129	; 0x81
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 fe0a 	bl	8009422 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007814:	2340      	movs	r3, #64	; 0x40
 8007816:	2202      	movs	r2, #2
 8007818:	2101      	movs	r1, #1
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 fe01 	bl	8009422 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007828:	2308      	movs	r3, #8
 800782a:	2203      	movs	r2, #3
 800782c:	2182      	movs	r1, #130	; 0x82
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fdf7 	bl	8009422 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800783a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800783e:	f001 ff17 	bl	8009670 <USBD_static_malloc>
 8007842:	4602      	mov	r2, r0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007850:	2b00      	cmp	r3, #0
 8007852:	d102      	bne.n	800785a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007854:	2301      	movs	r3, #1
 8007856:	73fb      	strb	r3, [r7, #15]
 8007858:	e026      	b.n	80078a8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007860:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	7c1b      	ldrb	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d109      	bne.n	8007898 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800788a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800788e:	2101      	movs	r1, #1
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 feb7 	bl	8009604 <USBD_LL_PrepareReceive>
 8007896:	e007      	b.n	80078a8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800789e:	2340      	movs	r3, #64	; 0x40
 80078a0:	2101      	movs	r1, #1
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 feae 	bl	8009604 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078c2:	2181      	movs	r1, #129	; 0x81
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 fdd2 	bl	800946e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078d0:	2101      	movs	r1, #1
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fdcb 	bl	800946e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80078e0:	2182      	movs	r1, #130	; 0x82
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fdc3 	bl	800946e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00e      	beq.n	8007916 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007908:	4618      	mov	r0, r3
 800790a:	f001 febd 	bl	8009688 <USBD_static_free>
    pdev->pClassData = NULL;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007930:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007946:	2b00      	cmp	r3, #0
 8007948:	d039      	beq.n	80079be <USBD_CDC_Setup+0x9e>
 800794a:	2b20      	cmp	r3, #32
 800794c:	d17c      	bne.n	8007a48 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	88db      	ldrh	r3, [r3, #6]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d029      	beq.n	80079aa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	b25b      	sxtb	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	da11      	bge.n	8007984 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800796c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	88d2      	ldrh	r2, [r2, #6]
 8007972:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007974:	6939      	ldr	r1, [r7, #16]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	88db      	ldrh	r3, [r3, #6]
 800797a:	461a      	mov	r2, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f9c9 	bl	8008d14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007982:	e068      	b.n	8007a56 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	785a      	ldrb	r2, [r3, #1]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	88db      	ldrh	r3, [r3, #6]
 8007992:	b2da      	uxtb	r2, r3
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800799a:	6939      	ldr	r1, [r7, #16]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	88db      	ldrh	r3, [r3, #6]
 80079a0:	461a      	mov	r2, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 f9e4 	bl	8008d70 <USBD_CtlPrepareRx>
      break;
 80079a8:	e055      	b.n	8007a56 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	7850      	ldrb	r0, [r2, #1]
 80079b6:	2200      	movs	r2, #0
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	4798      	blx	r3
      break;
 80079bc:	e04b      	b.n	8007a56 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	785b      	ldrb	r3, [r3, #1]
 80079c2:	2b0a      	cmp	r3, #10
 80079c4:	d017      	beq.n	80079f6 <USBD_CDC_Setup+0xd6>
 80079c6:	2b0b      	cmp	r3, #11
 80079c8:	d029      	beq.n	8007a1e <USBD_CDC_Setup+0xfe>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d133      	bne.n	8007a36 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d107      	bne.n	80079e8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80079d8:	f107 030c 	add.w	r3, r7, #12
 80079dc:	2202      	movs	r2, #2
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 f997 	bl	8008d14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079e6:	e02e      	b.n	8007a46 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 f928 	bl	8008c40 <USBD_CtlError>
            ret = USBD_FAIL;
 80079f0:	2302      	movs	r3, #2
 80079f2:	75fb      	strb	r3, [r7, #23]
          break;
 80079f4:	e027      	b.n	8007a46 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d107      	bne.n	8007a10 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a00:	f107 030f 	add.w	r3, r7, #15
 8007a04:	2201      	movs	r2, #1
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 f983 	bl	8008d14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a0e:	e01a      	b.n	8007a46 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 f914 	bl	8008c40 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	75fb      	strb	r3, [r7, #23]
          break;
 8007a1c:	e013      	b.n	8007a46 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d00d      	beq.n	8007a44 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 f908 	bl	8008c40 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a30:	2302      	movs	r3, #2
 8007a32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a34:	e006      	b.n	8007a44 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 f901 	bl	8008c40 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	75fb      	strb	r3, [r7, #23]
          break;
 8007a42:	e000      	b.n	8007a46 <USBD_CDC_Setup+0x126>
          break;
 8007a44:	bf00      	nop
      }
      break;
 8007a46:	e006      	b.n	8007a56 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 f8f8 	bl	8008c40 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a50:	2302      	movs	r3, #2
 8007a52:	75fb      	strb	r3, [r7, #23]
      break;
 8007a54:	bf00      	nop
  }

  return ret;
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a72:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a7a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d03a      	beq.n	8007afc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	331c      	adds	r3, #28
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d029      	beq.n	8007af0 <USBD_CDC_DataIn+0x90>
 8007a9c:	78fa      	ldrb	r2, [r7, #3]
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	331c      	adds	r3, #28
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	78f9      	ldrb	r1, [r7, #3]
 8007ab0:	68b8      	ldr	r0, [r7, #8]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	4403      	add	r3, r0
 8007abc:	3338      	adds	r3, #56	; 0x38
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ac4:	fb03 f301 	mul.w	r3, r3, r1
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d110      	bne.n	8007af0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007ace:	78fa      	ldrb	r2, [r7, #3]
 8007ad0:	6879      	ldr	r1, [r7, #4]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	331c      	adds	r3, #28
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ae2:	78f9      	ldrb	r1, [r7, #3]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 fd68 	bl	80095be <USBD_LL_Transmit>
 8007aee:	e003      	b.n	8007af8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	e000      	b.n	8007afe <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007afc:	2302      	movs	r3, #2
  }
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fd93 	bl	800964a <USBD_LL_GetRxDataSize>
 8007b24:	4602      	mov	r2, r0
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00d      	beq.n	8007b52 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	4798      	blx	r3

    return USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e000      	b.n	8007b54 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007b52:	2302      	movs	r3, #2
  }
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d015      	beq.n	8007ba2 <USBD_CDC_EP0_RxReady+0x46>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007b7c:	2bff      	cmp	r3, #255	; 0xff
 8007b7e:	d010      	beq.n	8007ba2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007b8e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b96:	b292      	uxth	r2, r2
 8007b98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	22ff      	movs	r2, #255	; 0xff
 8007b9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2243      	movs	r2, #67	; 0x43
 8007bb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007bba:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	200000a0 	.word	0x200000a0

08007bcc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2243      	movs	r2, #67	; 0x43
 8007bd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007bda:	4b03      	ldr	r3, [pc, #12]	; (8007be8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bc80      	pop	{r7}
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	2000005c 	.word	0x2000005c

08007bec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2243      	movs	r2, #67	; 0x43
 8007bf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007bfa:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	200000e4 	.word	0x200000e4

08007c0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	220a      	movs	r2, #10
 8007c18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007c1a:	4b03      	ldr	r3, [pc, #12]	; (8007c28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bc80      	pop	{r7}
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20000018 	.word	0x20000018

08007c2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c36:	2302      	movs	r3, #2
 8007c38:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr

08007c58 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c76:	88fa      	ldrh	r2, [r7, #6]
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr

08007c8a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr

08007cb0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d017      	beq.n	8007cfa <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	7c1b      	ldrb	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d109      	bne.n	8007ce6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cdc:	2101      	movs	r1, #1
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fc90 	bl	8009604 <USBD_LL_PrepareReceive>
 8007ce4:	e007      	b.n	8007cf6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cec:	2340      	movs	r3, #64	; 0x40
 8007cee:	2101      	movs	r1, #1
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 fc87 	bl	8009604 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e000      	b.n	8007cfc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007cfa:	2302      	movs	r3, #2
  }
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e01a      	b.n	8007d52 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	79fa      	ldrb	r2, [r7, #7]
 8007d48:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f001 faf4 	bl	8009338 <USBD_LL_Init>

  return USBD_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d006      	beq.n	8007d7c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]
 8007d7a:	e001      	b.n	8007d80 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bc80      	pop	{r7}
 8007d8a:	4770      	bx	lr

08007d8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 fb29 	bl	80093ec <USBD_LL_Start>

  return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bc80      	pop	{r7}
 8007db6:	4770      	bx	lr

08007db8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00c      	beq.n	8007dec <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	78fa      	ldrb	r2, [r7, #3]
 8007ddc:	4611      	mov	r1, r2
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4798      	blx	r3
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	4798      	blx	r3

  return USBD_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 feca 	bl	8008bc8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e42:	461a      	mov	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e50:	f003 031f 	and.w	r3, r3, #31
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d00c      	beq.n	8007e72 <USBD_LL_SetupStage+0x56>
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d302      	bcc.n	8007e62 <USBD_LL_SetupStage+0x46>
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d010      	beq.n	8007e82 <USBD_LL_SetupStage+0x66>
 8007e60:	e017      	b.n	8007e92 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f9ca 	bl	8008204 <USBD_StdDevReq>
      break;
 8007e70:	e01a      	b.n	8007ea8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa2c 	bl	80082d8 <USBD_StdItfReq>
      break;
 8007e80:	e012      	b.n	8007ea8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa6a 	bl	8008364 <USBD_StdEPReq>
      break;
 8007e90:	e00a      	b.n	8007ea8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f001 fb03 	bl	80094ac <USBD_LL_StallEP>
      break;
 8007ea6:	bf00      	nop
  }

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b086      	sub	sp, #24
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	607a      	str	r2, [r7, #4]
 8007ebe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ec0:	7afb      	ldrb	r3, [r7, #11]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d14b      	bne.n	8007f5e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ecc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d134      	bne.n	8007f42 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	68da      	ldr	r2, [r3, #12]
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d919      	bls.n	8007f18 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	68da      	ldr	r2, [r3, #12]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	1ad2      	subs	r2, r2, r3
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d203      	bcs.n	8007f06 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	e002      	b.n	8007f0c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 ff4b 	bl	8008dac <USBD_CtlContinueRx>
 8007f16:	e038      	b.n	8007f8a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d105      	bne.n	8007f3a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 ff48 	bl	8008dd0 <USBD_CtlSendStatus>
 8007f40:	e023      	b.n	8007f8a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f48:	2b05      	cmp	r3, #5
 8007f4a:	d11e      	bne.n	8007f8a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007f54:	2100      	movs	r1, #0
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f001 faa8 	bl	80094ac <USBD_LL_StallEP>
 8007f5c:	e015      	b.n	8007f8a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00d      	beq.n	8007f86 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d108      	bne.n	8007f86 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	7afa      	ldrb	r2, [r7, #11]
 8007f7e:	4611      	mov	r1, r2
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	4798      	blx	r3
 8007f84:	e001      	b.n	8007f8a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f86:	2302      	movs	r3, #2
 8007f88:	e000      	b.n	8007f8c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d17f      	bne.n	80080a8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3314      	adds	r3, #20
 8007fac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d15c      	bne.n	8008072 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d915      	bls.n	8007ff0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	1ad2      	subs	r2, r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 feb5 	bl	8008d4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f001 fb0b 	bl	8009604 <USBD_LL_PrepareReceive>
 8007fee:	e04e      	b.n	800808e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	6912      	ldr	r2, [r2, #16]
 8007ff8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ffc:	fb02 f201 	mul.w	r2, r2, r1
 8008000:	1a9b      	subs	r3, r3, r2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d11c      	bne.n	8008040 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800800e:	429a      	cmp	r2, r3
 8008010:	d316      	bcc.n	8008040 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	689a      	ldr	r2, [r3, #8]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800801c:	429a      	cmp	r2, r3
 800801e:	d20f      	bcs.n	8008040 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008020:	2200      	movs	r2, #0
 8008022:	2100      	movs	r1, #0
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 fe91 	bl	8008d4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008032:	2300      	movs	r3, #0
 8008034:	2200      	movs	r2, #0
 8008036:	2100      	movs	r1, #0
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f001 fae3 	bl	8009604 <USBD_LL_PrepareReceive>
 800803e:	e026      	b.n	800808e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008052:	2b03      	cmp	r3, #3
 8008054:	d105      	bne.n	8008062 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008062:	2180      	movs	r1, #128	; 0x80
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f001 fa21 	bl	80094ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 fec3 	bl	8008df6 <USBD_CtlReceiveStatus>
 8008070:	e00d      	b.n	800808e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008078:	2b04      	cmp	r3, #4
 800807a:	d004      	beq.n	8008086 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008086:	2180      	movs	r1, #128	; 0x80
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f001 fa0f 	bl	80094ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008094:	2b01      	cmp	r3, #1
 8008096:	d11d      	bne.n	80080d4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff fe83 	bl	8007da4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80080a6:	e015      	b.n	80080d4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00d      	beq.n	80080d0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d108      	bne.n	80080d0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	7afa      	ldrb	r2, [r7, #11]
 80080c8:	4611      	mov	r1, r2
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	4798      	blx	r3
 80080ce:	e001      	b.n	80080d4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080d0:	2302      	movs	r3, #2
 80080d2:	e000      	b.n	80080d6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080e6:	2340      	movs	r3, #64	; 0x40
 80080e8:	2200      	movs	r2, #0
 80080ea:	2100      	movs	r1, #0
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 f998 	bl	8009422 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2240      	movs	r2, #64	; 0x40
 80080fe:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008102:	2340      	movs	r3, #64	; 0x40
 8008104:	2200      	movs	r2, #0
 8008106:	2180      	movs	r1, #128	; 0x80
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 f98a 	bl	8009422 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2240      	movs	r2, #64	; 0x40
 8008118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6852      	ldr	r2, [r2, #4]
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	4611      	mov	r1, r2
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
  }

  return USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	78fa      	ldrb	r2, [r7, #3]
 8008170:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	bc80      	pop	{r7}
 800817c:	4770      	bx	lr

0800817e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800817e:	b480      	push	{r7}
 8008180:	b083      	sub	sp, #12
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2204      	movs	r2, #4
 8008196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr

080081a6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d105      	bne.n	80081c4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bc80      	pop	{r7}
 80081ce:	4770      	bx	lr

080081d0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d10b      	bne.n	80081fa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d005      	beq.n	80081fa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800821a:	2b20      	cmp	r3, #32
 800821c:	d004      	beq.n	8008228 <USBD_StdDevReq+0x24>
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d002      	beq.n	8008228 <USBD_StdDevReq+0x24>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d008      	beq.n	8008238 <USBD_StdDevReq+0x34>
 8008226:	e04c      	b.n	80082c2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
      break;
 8008236:	e049      	b.n	80082cc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b09      	cmp	r3, #9
 800823e:	d83a      	bhi.n	80082b6 <USBD_StdDevReq+0xb2>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <USBD_StdDevReq+0x44>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	08008299 	.word	0x08008299
 800824c:	080082ad 	.word	0x080082ad
 8008250:	080082b7 	.word	0x080082b7
 8008254:	080082a3 	.word	0x080082a3
 8008258:	080082b7 	.word	0x080082b7
 800825c:	0800827b 	.word	0x0800827b
 8008260:	08008271 	.word	0x08008271
 8008264:	080082b7 	.word	0x080082b7
 8008268:	0800828f 	.word	0x0800828f
 800826c:	08008285 	.word	0x08008285
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f9d4 	bl	8008620 <USBD_GetDescriptor>
          break;
 8008278:	e022      	b.n	80082c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fb37 	bl	80088f0 <USBD_SetAddress>
          break;
 8008282:	e01d      	b.n	80082c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fb74 	bl	8008974 <USBD_SetConfig>
          break;
 800828c:	e018      	b.n	80082c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fbfd 	bl	8008a90 <USBD_GetConfig>
          break;
 8008296:	e013      	b.n	80082c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fc2c 	bl	8008af8 <USBD_GetStatus>
          break;
 80082a0:	e00e      	b.n	80082c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fc5a 	bl	8008b5e <USBD_SetFeature>
          break;
 80082aa:	e009      	b.n	80082c0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fc69 	bl	8008b86 <USBD_ClrFeature>
          break;
 80082b4:	e004      	b.n	80082c0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fcc1 	bl	8008c40 <USBD_CtlError>
          break;
 80082be:	bf00      	nop
      }
      break;
 80082c0:	e004      	b.n	80082cc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fcbb 	bl	8008c40 <USBD_CtlError>
      break;
 80082ca:	bf00      	nop
  }

  return ret;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop

080082d8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	d003      	beq.n	80082fa <USBD_StdItfReq+0x22>
 80082f2:	2b40      	cmp	r3, #64	; 0x40
 80082f4:	d001      	beq.n	80082fa <USBD_StdItfReq+0x22>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d12a      	bne.n	8008350 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008300:	3b01      	subs	r3, #1
 8008302:	2b02      	cmp	r3, #2
 8008304:	d81d      	bhi.n	8008342 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	889b      	ldrh	r3, [r3, #4]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b01      	cmp	r3, #1
 800830e:	d813      	bhi.n	8008338 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
 800831e:	4603      	mov	r3, r0
 8008320:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	88db      	ldrh	r3, [r3, #6]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d110      	bne.n	800834c <USBD_StdItfReq+0x74>
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10d      	bne.n	800834c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fd4d 	bl	8008dd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008336:	e009      	b.n	800834c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc80 	bl	8008c40 <USBD_CtlError>
          break;
 8008340:	e004      	b.n	800834c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fc7b 	bl	8008c40 <USBD_CtlError>
          break;
 800834a:	e000      	b.n	800834e <USBD_StdItfReq+0x76>
          break;
 800834c:	bf00      	nop
      }
      break;
 800834e:	e004      	b.n	800835a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fc74 	bl	8008c40 <USBD_CtlError>
      break;
 8008358:	bf00      	nop
  }

  return USBD_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	889b      	ldrh	r3, [r3, #4]
 8008376:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008380:	2b20      	cmp	r3, #32
 8008382:	d004      	beq.n	800838e <USBD_StdEPReq+0x2a>
 8008384:	2b40      	cmp	r3, #64	; 0x40
 8008386:	d002      	beq.n	800838e <USBD_StdEPReq+0x2a>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d008      	beq.n	800839e <USBD_StdEPReq+0x3a>
 800838c:	e13d      	b.n	800860a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3
      break;
 800839c:	e13a      	b.n	8008614 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d10a      	bne.n	80083c0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	4798      	blx	r3
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]

        return ret;
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	e12a      	b.n	8008616 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d03e      	beq.n	8008446 <USBD_StdEPReq+0xe2>
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d002      	beq.n	80083d2 <USBD_StdEPReq+0x6e>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d070      	beq.n	80084b2 <USBD_StdEPReq+0x14e>
 80083d0:	e115      	b.n	80085fe <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d002      	beq.n	80083e2 <USBD_StdEPReq+0x7e>
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d015      	beq.n	800840c <USBD_StdEPReq+0xa8>
 80083e0:	e02b      	b.n	800843a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00c      	beq.n	8008402 <USBD_StdEPReq+0x9e>
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	2b80      	cmp	r3, #128	; 0x80
 80083ec:	d009      	beq.n	8008402 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f001 f85a 	bl	80094ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083f8:	2180      	movs	r1, #128	; 0x80
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 f856 	bl	80094ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008400:	e020      	b.n	8008444 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fc1b 	bl	8008c40 <USBD_CtlError>
              break;
 800840a:	e01b      	b.n	8008444 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	885b      	ldrh	r3, [r3, #2]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10e      	bne.n	8008432 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00b      	beq.n	8008432 <USBD_StdEPReq+0xce>
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b80      	cmp	r3, #128	; 0x80
 800841e:	d008      	beq.n	8008432 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	88db      	ldrh	r3, [r3, #6]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 f83d 	bl	80094ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fccc 	bl	8008dd0 <USBD_CtlSendStatus>

              break;
 8008438:	e004      	b.n	8008444 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fbff 	bl	8008c40 <USBD_CtlError>
              break;
 8008442:	bf00      	nop
          }
          break;
 8008444:	e0e0      	b.n	8008608 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800844c:	2b02      	cmp	r3, #2
 800844e:	d002      	beq.n	8008456 <USBD_StdEPReq+0xf2>
 8008450:	2b03      	cmp	r3, #3
 8008452:	d015      	beq.n	8008480 <USBD_StdEPReq+0x11c>
 8008454:	e026      	b.n	80084a4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00c      	beq.n	8008476 <USBD_StdEPReq+0x112>
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	2b80      	cmp	r3, #128	; 0x80
 8008460:	d009      	beq.n	8008476 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 f820 	bl	80094ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800846c:	2180      	movs	r1, #128	; 0x80
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 f81c 	bl	80094ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008474:	e01c      	b.n	80084b0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fbe1 	bl	8008c40 <USBD_CtlError>
              break;
 800847e:	e017      	b.n	80084b0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	885b      	ldrh	r3, [r3, #2]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d112      	bne.n	80084ae <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848e:	2b00      	cmp	r3, #0
 8008490:	d004      	beq.n	800849c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 f827 	bl	80094ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fc97 	bl	8008dd0 <USBD_CtlSendStatus>
              }
              break;
 80084a2:	e004      	b.n	80084ae <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fbca 	bl	8008c40 <USBD_CtlError>
              break;
 80084ac:	e000      	b.n	80084b0 <USBD_StdEPReq+0x14c>
              break;
 80084ae:	bf00      	nop
          }
          break;
 80084b0:	e0aa      	b.n	8008608 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d002      	beq.n	80084c2 <USBD_StdEPReq+0x15e>
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d032      	beq.n	8008526 <USBD_StdEPReq+0x1c2>
 80084c0:	e097      	b.n	80085f2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <USBD_StdEPReq+0x174>
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	2b80      	cmp	r3, #128	; 0x80
 80084cc:	d004      	beq.n	80084d8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fbb5 	bl	8008c40 <USBD_CtlError>
                break;
 80084d6:	e091      	b.n	80085fc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	da0b      	bge.n	80084f8 <USBD_StdEPReq+0x194>
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	3310      	adds	r3, #16
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	4413      	add	r3, r2
 80084f4:	3304      	adds	r3, #4
 80084f6:	e00b      	b.n	8008510 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084fe:	4613      	mov	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	3304      	adds	r3, #4
 8008510:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2202      	movs	r2, #2
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fbf8 	bl	8008d14 <USBD_CtlSendData>
              break;
 8008524:	e06a      	b.n	80085fc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008526:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800852a:	2b00      	cmp	r3, #0
 800852c:	da11      	bge.n	8008552 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	f003 020f 	and.w	r2, r3, #15
 8008534:	6879      	ldr	r1, [r7, #4]
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	440b      	add	r3, r1
 8008540:	3318      	adds	r3, #24
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d117      	bne.n	8008578 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fb78 	bl	8008c40 <USBD_CtlError>
                  break;
 8008550:	e054      	b.n	80085fc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	f003 020f 	and.w	r2, r3, #15
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d104      	bne.n	8008578 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fb65 	bl	8008c40 <USBD_CtlError>
                  break;
 8008576:	e041      	b.n	80085fc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da0b      	bge.n	8008598 <USBD_StdEPReq+0x234>
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	3310      	adds	r3, #16
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	3304      	adds	r3, #4
 8008596:	e00b      	b.n	80085b0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	3304      	adds	r3, #4
 80085b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <USBD_StdEPReq+0x25a>
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b80      	cmp	r3, #128	; 0x80
 80085bc:	d103      	bne.n	80085c6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	e00e      	b.n	80085e4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 ffac 	bl	8009528 <USBD_LL_IsStallEP>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	e002      	b.n	80085e4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2202      	movs	r2, #2
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fb92 	bl	8008d14 <USBD_CtlSendData>
              break;
 80085f0:	e004      	b.n	80085fc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fb23 	bl	8008c40 <USBD_CtlError>
              break;
 80085fa:	bf00      	nop
          }
          break;
 80085fc:	e004      	b.n	8008608 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fb1d 	bl	8008c40 <USBD_CtlError>
          break;
 8008606:	bf00      	nop
      }
      break;
 8008608:	e004      	b.n	8008614 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fb17 	bl	8008c40 <USBD_CtlError>
      break;
 8008612:	bf00      	nop
  }

  return ret;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	885b      	ldrh	r3, [r3, #2]
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	b29b      	uxth	r3, r3
 800863e:	3b01      	subs	r3, #1
 8008640:	2b06      	cmp	r3, #6
 8008642:	f200 8128 	bhi.w	8008896 <USBD_GetDescriptor+0x276>
 8008646:	a201      	add	r2, pc, #4	; (adr r2, 800864c <USBD_GetDescriptor+0x2c>)
 8008648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864c:	08008669 	.word	0x08008669
 8008650:	08008681 	.word	0x08008681
 8008654:	080086c1 	.word	0x080086c1
 8008658:	08008897 	.word	0x08008897
 800865c:	08008897 	.word	0x08008897
 8008660:	08008837 	.word	0x08008837
 8008664:	08008863 	.word	0x08008863
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	7c12      	ldrb	r2, [r2, #16]
 8008674:	f107 0108 	add.w	r1, r7, #8
 8008678:	4610      	mov	r0, r2
 800867a:	4798      	blx	r3
 800867c:	60f8      	str	r0, [r7, #12]
      break;
 800867e:	e112      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	7c1b      	ldrb	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10d      	bne.n	80086a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	f107 0208 	add.w	r2, r7, #8
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
 8008698:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	2202      	movs	r2, #2
 80086a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086a2:	e100      	b.n	80088a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	f107 0208 	add.w	r2, r7, #8
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	2202      	movs	r2, #2
 80086bc:	701a      	strb	r2, [r3, #0]
      break;
 80086be:	e0f2      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	885b      	ldrh	r3, [r3, #2]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	f200 80ac 	bhi.w	8008824 <USBD_GetDescriptor+0x204>
 80086cc:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <USBD_GetDescriptor+0xb4>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	080086ed 	.word	0x080086ed
 80086d8:	08008721 	.word	0x08008721
 80086dc:	08008755 	.word	0x08008755
 80086e0:	08008789 	.word	0x08008789
 80086e4:	080087bd 	.word	0x080087bd
 80086e8:	080087f1 	.word	0x080087f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	7c12      	ldrb	r2, [r2, #16]
 8008704:	f107 0108 	add.w	r1, r7, #8
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
 800870c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870e:	e091      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa94 	bl	8008c40 <USBD_CtlError>
            err++;
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	3301      	adds	r3, #1
 800871c:	72fb      	strb	r3, [r7, #11]
          break;
 800871e:	e089      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00b      	beq.n	8008744 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	7c12      	ldrb	r2, [r2, #16]
 8008738:	f107 0108 	add.w	r1, r7, #8
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008742:	e077      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa7a 	bl	8008c40 <USBD_CtlError>
            err++;
 800874c:	7afb      	ldrb	r3, [r7, #11]
 800874e:	3301      	adds	r3, #1
 8008750:	72fb      	strb	r3, [r7, #11]
          break;
 8008752:	e06f      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00b      	beq.n	8008778 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	7c12      	ldrb	r2, [r2, #16]
 800876c:	f107 0108 	add.w	r1, r7, #8
 8008770:	4610      	mov	r0, r2
 8008772:	4798      	blx	r3
 8008774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008776:	e05d      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa60 	bl	8008c40 <USBD_CtlError>
            err++;
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	3301      	adds	r3, #1
 8008784:	72fb      	strb	r3, [r7, #11]
          break;
 8008786:	e055      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00b      	beq.n	80087ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	7c12      	ldrb	r2, [r2, #16]
 80087a0:	f107 0108 	add.w	r1, r7, #8
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
 80087a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087aa:	e043      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa46 	bl	8008c40 <USBD_CtlError>
            err++;
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	3301      	adds	r3, #1
 80087b8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ba:	e03b      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	7c12      	ldrb	r2, [r2, #16]
 80087d4:	f107 0108 	add.w	r1, r7, #8
 80087d8:	4610      	mov	r0, r2
 80087da:	4798      	blx	r3
 80087dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087de:	e029      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa2c 	bl	8008c40 <USBD_CtlError>
            err++;
 80087e8:	7afb      	ldrb	r3, [r7, #11]
 80087ea:	3301      	adds	r3, #1
 80087ec:	72fb      	strb	r3, [r7, #11]
          break;
 80087ee:	e021      	b.n	8008834 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00b      	beq.n	8008814 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	7c12      	ldrb	r2, [r2, #16]
 8008808:	f107 0108 	add.w	r1, r7, #8
 800880c:	4610      	mov	r0, r2
 800880e:	4798      	blx	r3
 8008810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008812:	e00f      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa12 	bl	8008c40 <USBD_CtlError>
            err++;
 800881c:	7afb      	ldrb	r3, [r7, #11]
 800881e:	3301      	adds	r3, #1
 8008820:	72fb      	strb	r3, [r7, #11]
          break;
 8008822:	e007      	b.n	8008834 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa0a 	bl	8008c40 <USBD_CtlError>
          err++;
 800882c:	7afb      	ldrb	r3, [r7, #11]
 800882e:	3301      	adds	r3, #1
 8008830:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008832:	e038      	b.n	80088a6 <USBD_GetDescriptor+0x286>
 8008834:	e037      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	7c1b      	ldrb	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d109      	bne.n	8008852 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008846:	f107 0208 	add.w	r2, r7, #8
 800884a:	4610      	mov	r0, r2
 800884c:	4798      	blx	r3
 800884e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008850:	e029      	b.n	80088a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f9f3 	bl	8008c40 <USBD_CtlError>
        err++;
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	3301      	adds	r3, #1
 800885e:	72fb      	strb	r3, [r7, #11]
      break;
 8008860:	e021      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	7c1b      	ldrb	r3, [r3, #16]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10d      	bne.n	8008886 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	f107 0208 	add.w	r2, r7, #8
 8008876:	4610      	mov	r0, r2
 8008878:	4798      	blx	r3
 800887a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	2207      	movs	r2, #7
 8008882:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008884:	e00f      	b.n	80088a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f9d9 	bl	8008c40 <USBD_CtlError>
        err++;
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	3301      	adds	r3, #1
 8008892:	72fb      	strb	r3, [r7, #11]
      break;
 8008894:	e007      	b.n	80088a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f9d1 	bl	8008c40 <USBD_CtlError>
      err++;
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	3301      	adds	r3, #1
 80088a2:	72fb      	strb	r3, [r7, #11]
      break;
 80088a4:	bf00      	nop
  }

  if (err != 0U)
 80088a6:	7afb      	ldrb	r3, [r7, #11]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d11c      	bne.n	80088e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80088ac:	893b      	ldrh	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d011      	beq.n	80088d6 <USBD_GetDescriptor+0x2b6>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	88db      	ldrh	r3, [r3, #6]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00d      	beq.n	80088d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	88da      	ldrh	r2, [r3, #6]
 80088be:	893b      	ldrh	r3, [r7, #8]
 80088c0:	4293      	cmp	r3, r2
 80088c2:	bf28      	it	cs
 80088c4:	4613      	movcs	r3, r2
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088ca:	893b      	ldrh	r3, [r7, #8]
 80088cc:	461a      	mov	r2, r3
 80088ce:	68f9      	ldr	r1, [r7, #12]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fa1f 	bl	8008d14 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	88db      	ldrh	r3, [r3, #6]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa76 	bl	8008dd0 <USBD_CtlSendStatus>
 80088e4:	e000      	b.n	80088e8 <USBD_GetDescriptor+0x2c8>
    return;
 80088e6:	bf00      	nop
    }
  }
}
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop

080088f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	889b      	ldrh	r3, [r3, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d130      	bne.n	8008964 <USBD_SetAddress+0x74>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	88db      	ldrh	r3, [r3, #6]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d12c      	bne.n	8008964 <USBD_SetAddress+0x74>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	885b      	ldrh	r3, [r3, #2]
 800890e:	2b7f      	cmp	r3, #127	; 0x7f
 8008910:	d828      	bhi.n	8008964 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	885b      	ldrh	r3, [r3, #2]
 8008916:	b2db      	uxtb	r3, r3
 8008918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800891c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008924:	2b03      	cmp	r3, #3
 8008926:	d104      	bne.n	8008932 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f988 	bl	8008c40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008930:	e01c      	b.n	800896c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	7bfa      	ldrb	r2, [r7, #15]
 8008936:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fe1e 	bl	8009580 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fa43 	bl	8008dd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d004      	beq.n	800895a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008958:	e008      	b.n	800896c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008962:	e003      	b.n	800896c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f96a 	bl	8008c40 <USBD_CtlError>
  }
}
 800896c:	bf00      	nop
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	885b      	ldrh	r3, [r3, #2]
 8008982:	b2da      	uxtb	r2, r3
 8008984:	4b41      	ldr	r3, [pc, #260]	; (8008a8c <USBD_SetConfig+0x118>)
 8008986:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008988:	4b40      	ldr	r3, [pc, #256]	; (8008a8c <USBD_SetConfig+0x118>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d904      	bls.n	800899a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f954 	bl	8008c40 <USBD_CtlError>
 8008998:	e075      	b.n	8008a86 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d002      	beq.n	80089aa <USBD_SetConfig+0x36>
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d023      	beq.n	80089f0 <USBD_SetConfig+0x7c>
 80089a8:	e062      	b.n	8008a70 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80089aa:	4b38      	ldr	r3, [pc, #224]	; (8008a8c <USBD_SetConfig+0x118>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d01a      	beq.n	80089e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80089b2:	4b36      	ldr	r3, [pc, #216]	; (8008a8c <USBD_SetConfig+0x118>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2203      	movs	r2, #3
 80089c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80089c4:	4b31      	ldr	r3, [pc, #196]	; (8008a8c <USBD_SetConfig+0x118>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff f9f4 	bl	8007db8 <USBD_SetClassConfig>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d104      	bne.n	80089e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f931 	bl	8008c40 <USBD_CtlError>
            return;
 80089de:	e052      	b.n	8008a86 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f9f5 	bl	8008dd0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80089e6:	e04e      	b.n	8008a86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f9f1 	bl	8008dd0 <USBD_CtlSendStatus>
        break;
 80089ee:	e04a      	b.n	8008a86 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80089f0:	4b26      	ldr	r3, [pc, #152]	; (8008a8c <USBD_SetConfig+0x118>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d112      	bne.n	8008a1e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008a00:	4b22      	ldr	r3, [pc, #136]	; (8008a8c <USBD_SetConfig+0x118>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008a0a:	4b20      	ldr	r3, [pc, #128]	; (8008a8c <USBD_SetConfig+0x118>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff f9f0 	bl	8007df6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f9da 	bl	8008dd0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a1c:	e033      	b.n	8008a86 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008a1e:	4b1b      	ldr	r3, [pc, #108]	; (8008a8c <USBD_SetConfig+0x118>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d01d      	beq.n	8008a68 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff f9de 	bl	8007df6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <USBD_SetConfig+0x118>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a44:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <USBD_SetConfig+0x118>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff f9b4 	bl	8007db8 <USBD_SetClassConfig>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d104      	bne.n	8008a60 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f8f1 	bl	8008c40 <USBD_CtlError>
            return;
 8008a5e:	e012      	b.n	8008a86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f9b5 	bl	8008dd0 <USBD_CtlSendStatus>
        break;
 8008a66:	e00e      	b.n	8008a86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f9b1 	bl	8008dd0 <USBD_CtlSendStatus>
        break;
 8008a6e:	e00a      	b.n	8008a86 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f8e4 	bl	8008c40 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008a78:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <USBD_SetConfig+0x118>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff f9b9 	bl	8007df6 <USBD_ClrClassConfig>
        break;
 8008a84:	bf00      	nop
    }
  }
}
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	200001a5 	.word	0x200001a5

08008a90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	88db      	ldrh	r3, [r3, #6]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d004      	beq.n	8008aac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f8cb 	bl	8008c40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008aaa:	e021      	b.n	8008af0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	db17      	blt.n	8008ae6 <USBD_GetConfig+0x56>
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	dd02      	ble.n	8008ac0 <USBD_GetConfig+0x30>
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d00b      	beq.n	8008ad6 <USBD_GetConfig+0x46>
 8008abe:	e012      	b.n	8008ae6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	3308      	adds	r3, #8
 8008aca:	2201      	movs	r2, #1
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f920 	bl	8008d14 <USBD_CtlSendData>
        break;
 8008ad4:	e00c      	b.n	8008af0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	2201      	movs	r2, #1
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f918 	bl	8008d14 <USBD_CtlSendData>
        break;
 8008ae4:	e004      	b.n	8008af0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f8a9 	bl	8008c40 <USBD_CtlError>
        break;
 8008aee:	bf00      	nop
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d81e      	bhi.n	8008b4c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	88db      	ldrh	r3, [r3, #6]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d004      	beq.n	8008b20 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f891 	bl	8008c40 <USBD_CtlError>
        break;
 8008b1e:	e01a      	b.n	8008b56 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d005      	beq.n	8008b3c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	f043 0202 	orr.w	r2, r3, #2
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	330c      	adds	r3, #12
 8008b40:	2202      	movs	r2, #2
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f8e5 	bl	8008d14 <USBD_CtlSendData>
      break;
 8008b4a:	e004      	b.n	8008b56 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f876 	bl	8008c40 <USBD_CtlError>
      break;
 8008b54:	bf00      	nop
  }
}
 8008b56:	bf00      	nop
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b082      	sub	sp, #8
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	885b      	ldrh	r3, [r3, #2]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d106      	bne.n	8008b7e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f929 	bl	8008dd0 <USBD_CtlSendStatus>
  }
}
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b96:	3b01      	subs	r3, #1
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d80b      	bhi.n	8008bb4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	885b      	ldrh	r3, [r3, #2]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d10c      	bne.n	8008bbe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f90f 	bl	8008dd0 <USBD_CtlSendStatus>
      }
      break;
 8008bb2:	e004      	b.n	8008bbe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f842 	bl	8008c40 <USBD_CtlError>
      break;
 8008bbc:	e000      	b.n	8008bc0 <USBD_ClrFeature+0x3a>
      break;
 8008bbe:	bf00      	nop
  }
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	785a      	ldrb	r2, [r3, #1]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	3302      	adds	r3, #2
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	3303      	adds	r3, #3
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	3304      	adds	r3, #4
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	3305      	adds	r3, #5
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	4413      	add	r3, r2
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	3306      	adds	r3, #6
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	3307      	adds	r3, #7
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	021b      	lsls	r3, r3, #8
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	4413      	add	r3, r2
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	80da      	strh	r2, [r3, #6]

}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bc80      	pop	{r7}
 8008c3e:	4770      	bx	lr

08008c40 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008c4a:	2180      	movs	r1, #128	; 0x80
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc2d 	bl	80094ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008c52:	2100      	movs	r1, #0
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fc29 	bl	80094ac <USBD_LL_StallEP>
}
 8008c5a:	bf00      	nop
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d032      	beq.n	8008cde <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 f834 	bl	8008ce6 <USBD_GetLen>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	3301      	adds	r3, #1
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	75fa      	strb	r2, [r7, #23]
 8008c92:	461a      	mov	r2, r3
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4413      	add	r3, r2
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	7812      	ldrb	r2, [r2, #0]
 8008c9c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	75fa      	strb	r2, [r7, #23]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	4413      	add	r3, r2
 8008caa:	2203      	movs	r2, #3
 8008cac:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008cae:	e012      	b.n	8008cd6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	60fa      	str	r2, [r7, #12]
 8008cb6:	7dfa      	ldrb	r2, [r7, #23]
 8008cb8:	1c51      	adds	r1, r2, #1
 8008cba:	75f9      	strb	r1, [r7, #23]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	440a      	add	r2, r1
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	75fa      	strb	r2, [r7, #23]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e8      	bne.n	8008cb0 <USBD_GetString+0x4e>
    }
  }
}
 8008cde:	bf00      	nop
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008cf2:	e005      	b.n	8008d00 <USBD_GetLen+0x1a>
  {
    len++;
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1f5      	bne.n	8008cf4 <USBD_GetLen+0xe>
  }

  return len;
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bc80      	pop	{r7}
 8008d12:	4770      	bx	lr

08008d14 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2202      	movs	r2, #2
 8008d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d2a:	88fa      	ldrh	r2, [r7, #6]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008d30:	88fa      	ldrh	r2, [r7, #6]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d36:	88fb      	ldrh	r3, [r7, #6]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 fc3e 	bl	80095be <USBD_LL_Transmit>

  return USBD_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	4613      	mov	r3, r2
 8008d58:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d5a:	88fb      	ldrh	r3, [r7, #6]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	2100      	movs	r1, #0
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 fc2c 	bl	80095be <USBD_LL_Transmit>

  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2203      	movs	r2, #3
 8008d82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d86:	88fa      	ldrh	r2, [r7, #6]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008d8e:	88fa      	ldrh	r2, [r7, #6]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f000 fc31 	bl	8009604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dba:	88fb      	ldrh	r3, [r7, #6]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 fc1f 	bl	8009604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2204      	movs	r2, #4
 8008ddc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008de0:	2300      	movs	r3, #0
 8008de2:	2200      	movs	r2, #0
 8008de4:	2100      	movs	r1, #0
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fbe9 	bl	80095be <USBD_LL_Transmit>

  return USBD_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2205      	movs	r2, #5
 8008e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e06:	2300      	movs	r3, #0
 8008e08:	2200      	movs	r2, #0
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fbf9 	bl	8009604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e20:	2200      	movs	r2, #0
 8008e22:	4912      	ldr	r1, [pc, #72]	; (8008e6c <MX_USB_DEVICE_Init+0x50>)
 8008e24:	4812      	ldr	r0, [pc, #72]	; (8008e70 <MX_USB_DEVICE_Init+0x54>)
 8008e26:	f7fe ff6d 	bl	8007d04 <USBD_Init>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e30:	f7f7 fcbe 	bl	80007b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e34:	490f      	ldr	r1, [pc, #60]	; (8008e74 <MX_USB_DEVICE_Init+0x58>)
 8008e36:	480e      	ldr	r0, [pc, #56]	; (8008e70 <MX_USB_DEVICE_Init+0x54>)
 8008e38:	f7fe ff8f 	bl	8007d5a <USBD_RegisterClass>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e42:	f7f7 fcb5 	bl	80007b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e46:	490c      	ldr	r1, [pc, #48]	; (8008e78 <MX_USB_DEVICE_Init+0x5c>)
 8008e48:	4809      	ldr	r0, [pc, #36]	; (8008e70 <MX_USB_DEVICE_Init+0x54>)
 8008e4a:	f7fe feef 	bl	8007c2c <USBD_CDC_RegisterInterface>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e54:	f7f7 fcac 	bl	80007b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e58:	4805      	ldr	r0, [pc, #20]	; (8008e70 <MX_USB_DEVICE_Init+0x54>)
 8008e5a:	f7fe ff97 	bl	8007d8c <USBD_Start>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e64:	f7f7 fca4 	bl	80007b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e68:	bf00      	nop
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000138 	.word	0x20000138
 8008e70:	2000054c 	.word	0x2000054c
 8008e74:	20000024 	.word	0x20000024
 8008e78:	20000128 	.word	0x20000128

08008e7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e80:	2200      	movs	r2, #0
 8008e82:	4905      	ldr	r1, [pc, #20]	; (8008e98 <CDC_Init_FS+0x1c>)
 8008e84:	4805      	ldr	r0, [pc, #20]	; (8008e9c <CDC_Init_FS+0x20>)
 8008e86:	f7fe fee7 	bl	8007c58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e8a:	4905      	ldr	r1, [pc, #20]	; (8008ea0 <CDC_Init_FS+0x24>)
 8008e8c:	4803      	ldr	r0, [pc, #12]	; (8008e9c <CDC_Init_FS+0x20>)
 8008e8e:	f7fe fefc 	bl	8007c8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	20000bf8 	.word	0x20000bf8
 8008e9c:	2000054c 	.word	0x2000054c
 8008ea0:	20000810 	.word	0x20000810

08008ea4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ea8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr
	...

08008eb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	6039      	str	r1, [r7, #0]
 8008ebe:	71fb      	strb	r3, [r7, #7]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	2b23      	cmp	r3, #35	; 0x23
 8008ec8:	d84a      	bhi.n	8008f60 <CDC_Control_FS+0xac>
 8008eca:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <CDC_Control_FS+0x1c>)
 8008ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed0:	08008f61 	.word	0x08008f61
 8008ed4:	08008f61 	.word	0x08008f61
 8008ed8:	08008f61 	.word	0x08008f61
 8008edc:	08008f61 	.word	0x08008f61
 8008ee0:	08008f61 	.word	0x08008f61
 8008ee4:	08008f61 	.word	0x08008f61
 8008ee8:	08008f61 	.word	0x08008f61
 8008eec:	08008f61 	.word	0x08008f61
 8008ef0:	08008f61 	.word	0x08008f61
 8008ef4:	08008f61 	.word	0x08008f61
 8008ef8:	08008f61 	.word	0x08008f61
 8008efc:	08008f61 	.word	0x08008f61
 8008f00:	08008f61 	.word	0x08008f61
 8008f04:	08008f61 	.word	0x08008f61
 8008f08:	08008f61 	.word	0x08008f61
 8008f0c:	08008f61 	.word	0x08008f61
 8008f10:	08008f61 	.word	0x08008f61
 8008f14:	08008f61 	.word	0x08008f61
 8008f18:	08008f61 	.word	0x08008f61
 8008f1c:	08008f61 	.word	0x08008f61
 8008f20:	08008f61 	.word	0x08008f61
 8008f24:	08008f61 	.word	0x08008f61
 8008f28:	08008f61 	.word	0x08008f61
 8008f2c:	08008f61 	.word	0x08008f61
 8008f30:	08008f61 	.word	0x08008f61
 8008f34:	08008f61 	.word	0x08008f61
 8008f38:	08008f61 	.word	0x08008f61
 8008f3c:	08008f61 	.word	0x08008f61
 8008f40:	08008f61 	.word	0x08008f61
 8008f44:	08008f61 	.word	0x08008f61
 8008f48:	08008f61 	.word	0x08008f61
 8008f4c:	08008f61 	.word	0x08008f61
 8008f50:	08008f61 	.word	0x08008f61
 8008f54:	08008f61 	.word	0x08008f61
 8008f58:	08008f61 	.word	0x08008f61
 8008f5c:	08008f61 	.word	0x08008f61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f60:	bf00      	nop
  }

  return (USBD_OK);
 8008f62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bc80      	pop	{r7}
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop

08008f70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	4805      	ldr	r0, [pc, #20]	; (8008f94 <CDC_Receive_FS+0x24>)
 8008f7e:	f7fe fe84 	bl	8007c8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f82:	4804      	ldr	r0, [pc, #16]	; (8008f94 <CDC_Receive_FS+0x24>)
 8008f84:	f7fe fe94 	bl	8007cb0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	2000054c 	.word	0x2000054c

08008f98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2212      	movs	r2, #18
 8008fa8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008faa:	4b03      	ldr	r3, [pc, #12]	; (8008fb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bc80      	pop	{r7}
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	20000154 	.word	0x20000154

08008fbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2204      	movs	r2, #4
 8008fcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fce:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bc80      	pop	{r7}
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	20000168 	.word	0x20000168

08008fe0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d105      	bne.n	8008ffe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	4907      	ldr	r1, [pc, #28]	; (8009014 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ff6:	4808      	ldr	r0, [pc, #32]	; (8009018 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ff8:	f7ff fe33 	bl	8008c62 <USBD_GetString>
 8008ffc:	e004      	b.n	8009008 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	4904      	ldr	r1, [pc, #16]	; (8009014 <USBD_FS_ProductStrDescriptor+0x34>)
 8009002:	4805      	ldr	r0, [pc, #20]	; (8009018 <USBD_FS_ProductStrDescriptor+0x38>)
 8009004:	f7ff fe2d 	bl	8008c62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000fe0 	.word	0x20000fe0
 8009018:	080097f4 	.word	0x080097f4

0800901c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	6039      	str	r1, [r7, #0]
 8009026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	4904      	ldr	r1, [pc, #16]	; (800903c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800902c:	4804      	ldr	r0, [pc, #16]	; (8009040 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800902e:	f7ff fe18 	bl	8008c62 <USBD_GetString>
  return USBD_StrDesc;
 8009032:	4b02      	ldr	r3, [pc, #8]	; (800903c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20000fe0 	.word	0x20000fe0
 8009040:	08009808 	.word	0x08009808

08009044 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	6039      	str	r1, [r7, #0]
 800904e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	221a      	movs	r2, #26
 8009054:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009056:	f000 f843 	bl	80090e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800905a:	4b02      	ldr	r3, [pc, #8]	; (8009064 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	2000016c 	.word	0x2000016c

08009068 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	6039      	str	r1, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d105      	bne.n	8009086 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	4907      	ldr	r1, [pc, #28]	; (800909c <USBD_FS_ConfigStrDescriptor+0x34>)
 800907e:	4808      	ldr	r0, [pc, #32]	; (80090a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009080:	f7ff fdef 	bl	8008c62 <USBD_GetString>
 8009084:	e004      	b.n	8009090 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4904      	ldr	r1, [pc, #16]	; (800909c <USBD_FS_ConfigStrDescriptor+0x34>)
 800908a:	4805      	ldr	r0, [pc, #20]	; (80090a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800908c:	f7ff fde9 	bl	8008c62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009090:	4b02      	ldr	r3, [pc, #8]	; (800909c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20000fe0 	.word	0x20000fe0
 80090a0:	0800981c 	.word	0x0800981c

080090a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4907      	ldr	r1, [pc, #28]	; (80090d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ba:	4808      	ldr	r0, [pc, #32]	; (80090dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090bc:	f7ff fdd1 	bl	8008c62 <USBD_GetString>
 80090c0:	e004      	b.n	80090cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	4904      	ldr	r1, [pc, #16]	; (80090d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090c6:	4805      	ldr	r0, [pc, #20]	; (80090dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090c8:	f7ff fdcb 	bl	8008c62 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090cc:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20000fe0 	.word	0x20000fe0
 80090dc:	08009828 	.word	0x08009828

080090e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090e6:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <Get_SerialNum+0x44>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090ec:	4b0e      	ldr	r3, [pc, #56]	; (8009128 <Get_SerialNum+0x48>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090f2:	4b0e      	ldr	r3, [pc, #56]	; (800912c <Get_SerialNum+0x4c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4413      	add	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009106:	2208      	movs	r2, #8
 8009108:	4909      	ldr	r1, [pc, #36]	; (8009130 <Get_SerialNum+0x50>)
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 f814 	bl	8009138 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009110:	2204      	movs	r2, #4
 8009112:	4908      	ldr	r1, [pc, #32]	; (8009134 <Get_SerialNum+0x54>)
 8009114:	68b8      	ldr	r0, [r7, #8]
 8009116:	f000 f80f 	bl	8009138 <IntToUnicode>
  }
}
 800911a:	bf00      	nop
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	1ffff7e8 	.word	0x1ffff7e8
 8009128:	1ffff7ec 	.word	0x1ffff7ec
 800912c:	1ffff7f0 	.word	0x1ffff7f0
 8009130:	2000016e 	.word	0x2000016e
 8009134:	2000017e 	.word	0x2000017e

08009138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4613      	mov	r3, r2
 8009144:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800914a:	2300      	movs	r3, #0
 800914c:	75fb      	strb	r3, [r7, #23]
 800914e:	e027      	b.n	80091a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	0f1b      	lsrs	r3, r3, #28
 8009154:	2b09      	cmp	r3, #9
 8009156:	d80b      	bhi.n	8009170 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	0f1b      	lsrs	r3, r3, #28
 800915c:	b2da      	uxtb	r2, r3
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	4619      	mov	r1, r3
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	440b      	add	r3, r1
 8009168:	3230      	adds	r2, #48	; 0x30
 800916a:	b2d2      	uxtb	r2, r2
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e00a      	b.n	8009186 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	0f1b      	lsrs	r3, r3, #28
 8009174:	b2da      	uxtb	r2, r3
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	4619      	mov	r1, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	440b      	add	r3, r1
 8009180:	3237      	adds	r2, #55	; 0x37
 8009182:	b2d2      	uxtb	r2, r2
 8009184:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	3301      	adds	r3, #1
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	4413      	add	r3, r2
 8009196:	2200      	movs	r2, #0
 8009198:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800919a:	7dfb      	ldrb	r3, [r7, #23]
 800919c:	3301      	adds	r3, #1
 800919e:	75fb      	strb	r3, [r7, #23]
 80091a0:	7dfa      	ldrb	r2, [r7, #23]
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d3d3      	bcc.n	8009150 <IntToUnicode+0x18>
  }
}
 80091a8:	bf00      	nop
 80091aa:	371c      	adds	r7, #28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bc80      	pop	{r7}
 80091b0:	4770      	bx	lr
	...

080091b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a0d      	ldr	r2, [pc, #52]	; (80091f8 <HAL_PCD_MspInit+0x44>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d113      	bne.n	80091ee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80091c6:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <HAL_PCD_MspInit+0x48>)
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	4a0c      	ldr	r2, [pc, #48]	; (80091fc <HAL_PCD_MspInit+0x48>)
 80091cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091d0:	61d3      	str	r3, [r2, #28]
 80091d2:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <HAL_PCD_MspInit+0x48>)
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80091de:	2200      	movs	r2, #0
 80091e0:	2100      	movs	r1, #0
 80091e2:	2014      	movs	r0, #20
 80091e4:	f7f8 fd85 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80091e8:	2014      	movs	r0, #20
 80091ea:	f7f8 fd9e 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	40005c00 	.word	0x40005c00
 80091fc:	40021000 	.word	0x40021000

08009200 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f7fe fe00 	bl	8007e1c <USBD_LL_SetupStage>
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009236:	78fa      	ldrb	r2, [r7, #3]
 8009238:	6879      	ldr	r1, [r7, #4]
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	00db      	lsls	r3, r3, #3
 8009242:	440b      	add	r3, r1
 8009244:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	4619      	mov	r1, r3
 800924e:	f7fe fe30 	bl	8007eb2 <USBD_LL_DataOutStage>
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800926c:	78fa      	ldrb	r2, [r7, #3]
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	4613      	mov	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	440b      	add	r3, r1
 800927a:	333c      	adds	r3, #60	; 0x3c
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	78fb      	ldrb	r3, [r7, #3]
 8009280:	4619      	mov	r1, r3
 8009282:	f7fe fe87 	bl	8007f94 <USBD_LL_DataInStage>
}
 8009286:	bf00      	nop
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800929c:	4618      	mov	r0, r3
 800929e:	f7fe ff97 	bl	80081d0 <USBD_LL_SOF>
}
 80092a2:	bf00      	nop
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092b2:	2301      	movs	r3, #1
 80092b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d001      	beq.n	80092c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092be:	f7f7 fa77 	bl	80007b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092c8:	7bfa      	ldrb	r2, [r7, #15]
 80092ca:	4611      	mov	r1, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fe ff47 	bl	8008160 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe ff00 	bl	80080de <USBD_LL_Reset>
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe ff41 	bl	800817e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d005      	beq.n	8009310 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009304:	4b04      	ldr	r3, [pc, #16]	; (8009318 <HAL_PCD_SuspendCallback+0x30>)
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	4a03      	ldr	r2, [pc, #12]	; (8009318 <HAL_PCD_SuspendCallback+0x30>)
 800930a:	f043 0306 	orr.w	r3, r3, #6
 800930e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	e000ed00 	.word	0xe000ed00

0800931c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe ff3b 	bl	80081a6 <USBD_LL_Resume>
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009340:	4a28      	ldr	r2, [pc, #160]	; (80093e4 <USBD_LL_Init+0xac>)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a26      	ldr	r2, [pc, #152]	; (80093e4 <USBD_LL_Init+0xac>)
 800934c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009350:	4b24      	ldr	r3, [pc, #144]	; (80093e4 <USBD_LL_Init+0xac>)
 8009352:	4a25      	ldr	r2, [pc, #148]	; (80093e8 <USBD_LL_Init+0xb0>)
 8009354:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009356:	4b23      	ldr	r3, [pc, #140]	; (80093e4 <USBD_LL_Init+0xac>)
 8009358:	2208      	movs	r2, #8
 800935a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800935c:	4b21      	ldr	r3, [pc, #132]	; (80093e4 <USBD_LL_Init+0xac>)
 800935e:	2202      	movs	r2, #2
 8009360:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009362:	4b20      	ldr	r3, [pc, #128]	; (80093e4 <USBD_LL_Init+0xac>)
 8009364:	2200      	movs	r2, #0
 8009366:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009368:	4b1e      	ldr	r3, [pc, #120]	; (80093e4 <USBD_LL_Init+0xac>)
 800936a:	2200      	movs	r2, #0
 800936c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800936e:	4b1d      	ldr	r3, [pc, #116]	; (80093e4 <USBD_LL_Init+0xac>)
 8009370:	2200      	movs	r2, #0
 8009372:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009374:	481b      	ldr	r0, [pc, #108]	; (80093e4 <USBD_LL_Init+0xac>)
 8009376:	f7f8 ff17 	bl	80021a8 <HAL_PCD_Init>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009380:	f7f7 fa16 	bl	80007b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800938a:	2318      	movs	r3, #24
 800938c:	2200      	movs	r2, #0
 800938e:	2100      	movs	r1, #0
 8009390:	f7fa fa4b 	bl	800382a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800939a:	2358      	movs	r3, #88	; 0x58
 800939c:	2200      	movs	r2, #0
 800939e:	2180      	movs	r1, #128	; 0x80
 80093a0:	f7fa fa43 	bl	800382a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093aa:	23c0      	movs	r3, #192	; 0xc0
 80093ac:	2200      	movs	r2, #0
 80093ae:	2181      	movs	r1, #129	; 0x81
 80093b0:	f7fa fa3b 	bl	800382a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80093be:	2200      	movs	r2, #0
 80093c0:	2101      	movs	r1, #1
 80093c2:	f7fa fa32 	bl	800382a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093d0:	2200      	movs	r2, #0
 80093d2:	2182      	movs	r1, #130	; 0x82
 80093d4:	f7fa fa29 	bl	800382a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	200011e0 	.word	0x200011e0
 80093e8:	40005c00 	.word	0x40005c00

080093ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009402:	4618      	mov	r0, r3
 8009404:	f7f8 ffdb 	bl	80023be <HAL_PCD_Start>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f94e 	bl	80096b0 <USBD_Get_USB_Status>
 8009414:	4603      	mov	r3, r0
 8009416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009418:	7bbb      	ldrb	r3, [r7, #14]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	4608      	mov	r0, r1
 800942c:	4611      	mov	r1, r2
 800942e:	461a      	mov	r2, r3
 8009430:	4603      	mov	r3, r0
 8009432:	70fb      	strb	r3, [r7, #3]
 8009434:	460b      	mov	r3, r1
 8009436:	70bb      	strb	r3, [r7, #2]
 8009438:	4613      	mov	r3, r2
 800943a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800944a:	78bb      	ldrb	r3, [r7, #2]
 800944c:	883a      	ldrh	r2, [r7, #0]
 800944e:	78f9      	ldrb	r1, [r7, #3]
 8009450:	f7f9 f955 	bl	80026fe <HAL_PCD_EP_Open>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f928 	bl	80096b0 <USBD_Get_USB_Status>
 8009460:	4603      	mov	r3, r0
 8009462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009464:	7bbb      	ldrb	r3, [r7, #14]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009488:	78fa      	ldrb	r2, [r7, #3]
 800948a:	4611      	mov	r1, r2
 800948c:	4618      	mov	r0, r3
 800948e:	f7f9 f99c 	bl	80027ca <HAL_PCD_EP_Close>
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	4618      	mov	r0, r3
 800949a:	f000 f909 	bl	80096b0 <USBD_Get_USB_Status>
 800949e:	4603      	mov	r3, r0
 80094a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094c6:	78fa      	ldrb	r2, [r7, #3]
 80094c8:	4611      	mov	r1, r2
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7f9 fa5c 	bl	8002988 <HAL_PCD_EP_SetStall>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 f8ea 	bl	80096b0 <USBD_Get_USB_Status>
 80094dc:	4603      	mov	r3, r0
 80094de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009504:	78fa      	ldrb	r2, [r7, #3]
 8009506:	4611      	mov	r1, r2
 8009508:	4618      	mov	r0, r3
 800950a:	f7f9 fa9d 	bl	8002a48 <HAL_PCD_EP_ClrStall>
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	4618      	mov	r0, r3
 8009516:	f000 f8cb 	bl	80096b0 <USBD_Get_USB_Status>
 800951a:	4603      	mov	r3, r0
 800951c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800951e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800953a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800953c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009540:	2b00      	cmp	r3, #0
 8009542:	da0c      	bge.n	800955e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	00db      	lsls	r3, r3, #3
 8009556:	440b      	add	r3, r1
 8009558:	3302      	adds	r3, #2
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	e00b      	b.n	8009576 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800955e:	78fb      	ldrb	r3, [r7, #3]
 8009560:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009564:	68f9      	ldr	r1, [r7, #12]
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	440b      	add	r3, r1
 8009570:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009574:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr

08009580 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800959a:	78fa      	ldrb	r2, [r7, #3]
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f7f9 f888 	bl	80026b4 <HAL_PCD_SetAddress>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 f880 	bl	80096b0 <USBD_Get_USB_Status>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b086      	sub	sp, #24
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	607a      	str	r2, [r7, #4]
 80095c8:	461a      	mov	r2, r3
 80095ca:	460b      	mov	r3, r1
 80095cc:	72fb      	strb	r3, [r7, #11]
 80095ce:	4613      	mov	r3, r2
 80095d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095e0:	893b      	ldrh	r3, [r7, #8]
 80095e2:	7af9      	ldrb	r1, [r7, #11]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	f7f9 f98c 	bl	8002902 <HAL_PCD_EP_Transmit>
 80095ea:	4603      	mov	r3, r0
 80095ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 f85d 	bl	80096b0 <USBD_Get_USB_Status>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	607a      	str	r2, [r7, #4]
 800960e:	461a      	mov	r2, r3
 8009610:	460b      	mov	r3, r1
 8009612:	72fb      	strb	r3, [r7, #11]
 8009614:	4613      	mov	r3, r2
 8009616:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009626:	893b      	ldrh	r3, [r7, #8]
 8009628:	7af9      	ldrb	r1, [r7, #11]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	f7f9 f915 	bl	800285a <HAL_PCD_EP_Receive>
 8009630:	4603      	mov	r3, r0
 8009632:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f83a 	bl	80096b0 <USBD_Get_USB_Status>
 800963c:	4603      	mov	r3, r0
 800963e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009640:	7dbb      	ldrb	r3, [r7, #22]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800965c:	78fa      	ldrb	r2, [r7, #3]
 800965e:	4611      	mov	r1, r2
 8009660:	4618      	mov	r0, r3
 8009662:	f7f9 f937 	bl	80028d4 <HAL_PCD_EP_GetRxCount>
 8009666:	4603      	mov	r3, r0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009678:	4b02      	ldr	r3, [pc, #8]	; (8009684 <USBD_static_malloc+0x14>)
}
 800967a:	4618      	mov	r0, r3
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	bc80      	pop	{r7}
 8009682:	4770      	bx	lr
 8009684:	200001a8 	.word	0x200001a8

08009688 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]

}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr

0800969a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969a:	b480      	push	{r7}
 800969c:	b083      	sub	sp, #12
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	460b      	mov	r3, r1
 80096a4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bc80      	pop	{r7}
 80096ae:	4770      	bx	lr

080096b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d817      	bhi.n	80096f4 <USBD_Get_USB_Status+0x44>
 80096c4:	a201      	add	r2, pc, #4	; (adr r2, 80096cc <USBD_Get_USB_Status+0x1c>)
 80096c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ca:	bf00      	nop
 80096cc:	080096dd 	.word	0x080096dd
 80096d0:	080096e3 	.word	0x080096e3
 80096d4:	080096e9 	.word	0x080096e9
 80096d8:	080096ef 	.word	0x080096ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
    break;
 80096e0:	e00b      	b.n	80096fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096e2:	2302      	movs	r3, #2
 80096e4:	73fb      	strb	r3, [r7, #15]
    break;
 80096e6:	e008      	b.n	80096fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096e8:	2301      	movs	r3, #1
 80096ea:	73fb      	strb	r3, [r7, #15]
    break;
 80096ec:	e005      	b.n	80096fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096ee:	2302      	movs	r3, #2
 80096f0:	73fb      	strb	r3, [r7, #15]
    break;
 80096f2:	e002      	b.n	80096fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80096f4:	2302      	movs	r3, #2
 80096f6:	73fb      	strb	r3, [r7, #15]
    break;
 80096f8:	bf00      	nop
  }
  return usb_status;
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	bc80      	pop	{r7}
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop

08009708 <__libc_init_array>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	2500      	movs	r5, #0
 800970c:	4e0c      	ldr	r6, [pc, #48]	; (8009740 <__libc_init_array+0x38>)
 800970e:	4c0d      	ldr	r4, [pc, #52]	; (8009744 <__libc_init_array+0x3c>)
 8009710:	1ba4      	subs	r4, r4, r6
 8009712:	10a4      	asrs	r4, r4, #2
 8009714:	42a5      	cmp	r5, r4
 8009716:	d109      	bne.n	800972c <__libc_init_array+0x24>
 8009718:	f000 f822 	bl	8009760 <_init>
 800971c:	2500      	movs	r5, #0
 800971e:	4e0a      	ldr	r6, [pc, #40]	; (8009748 <__libc_init_array+0x40>)
 8009720:	4c0a      	ldr	r4, [pc, #40]	; (800974c <__libc_init_array+0x44>)
 8009722:	1ba4      	subs	r4, r4, r6
 8009724:	10a4      	asrs	r4, r4, #2
 8009726:	42a5      	cmp	r5, r4
 8009728:	d105      	bne.n	8009736 <__libc_init_array+0x2e>
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009730:	4798      	blx	r3
 8009732:	3501      	adds	r5, #1
 8009734:	e7ee      	b.n	8009714 <__libc_init_array+0xc>
 8009736:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800973a:	4798      	blx	r3
 800973c:	3501      	adds	r5, #1
 800973e:	e7f2      	b.n	8009726 <__libc_init_array+0x1e>
 8009740:	08009850 	.word	0x08009850
 8009744:	08009850 	.word	0x08009850
 8009748:	08009850 	.word	0x08009850
 800974c:	08009854 	.word	0x08009854

08009750 <memset>:
 8009750:	4603      	mov	r3, r0
 8009752:	4402      	add	r2, r0
 8009754:	4293      	cmp	r3, r2
 8009756:	d100      	bne.n	800975a <memset+0xa>
 8009758:	4770      	bx	lr
 800975a:	f803 1b01 	strb.w	r1, [r3], #1
 800975e:	e7f9      	b.n	8009754 <memset+0x4>

08009760 <_init>:
 8009760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009762:	bf00      	nop
 8009764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009766:	bc08      	pop	{r3}
 8009768:	469e      	mov	lr, r3
 800976a:	4770      	bx	lr

0800976c <_fini>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	bf00      	nop
 8009770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009772:	bc08      	pop	{r3}
 8009774:	469e      	mov	lr, r3
 8009776:	4770      	bx	lr
